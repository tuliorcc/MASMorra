Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 18:14:34
MASMorra.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE CONSTANTES
				;// -------------------------------------------------------------------------
 = 00000050			COLS = 80            ;// Colunas do jogo
 = 00000019			ROWS = 25            ;// Linhas do jogo
 = 0000004E			MAPCOLS = (COLS - 2) ;// Colunas do mapa
 = 00000014			MAPROWS = (ROWS - 5) ;// Linhas do mapa
 = 00000005			MENUQNT = 5			 ;// Quantas opções tem o menu

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE VARIÁVEIS
				;// -------------------------------------------------------------------------
 00000000			.data
				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELA
				;// -------------------------------------------------------------------------
 00000000 50			xMax BYTE COLS      ;// número maximo de colunas
 00000001 19			yMax BYTE ROWS      ;// númer maximo de linhas

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DO MAPA
				;// -------------------------------------------------------------------------
 00000002  00000618 [		Map BYTE MAPCOLS*MAPROWS Dup(?)	;// vetor de (colunas*linhas) posições. 
	    00
	   ]
 0000061A 0000			posHeroi WORD 0						;// Posição atual do heroi
 0000061C 4F			HeroiChar BYTE 'O'
 0000061D 0000			posEscada WORD 0
 0000061F 48			EscadaChar BYTE 'H'
 00000620 23			paredeChar BYTE '#'
 00000621 20			vazioChar  BYTE ' '

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DE VARIÁVEIS DO JOGO
				;// -------------------------------------------------------------------------
 00000622 00			Level BYTE 0   ;// Nível atual
 00000623 00			inStairs DB 0  ;// Indica se o jogador se encontra na escada
 00000624 4C 45 56 45 4C	strLevel DB 'LEVEL',0
	   00

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: GERAÇÃO DE MAPAS
				;// -------------------------------------------------------------------------
 0000062A 0000			emptyCells WORD 0
 0000062C 0000			emptyGoal WORD 0
 0000062E 00			direction BYTE 0    ;// Direção do corredor [0-Norte, 1-Leste, 2-Sul, 3-Oeste]
 0000062F 0000			pos WORD 0          ;// Ponteiro para a posição atual no mapa (0 - 1559)
 00000631 00			passos BYTE 0       ;// Numero de passos que sao dados na geração do mapa

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE DO TERMINAL
				;// -------------------------------------------------------------------------
 00000632 00000000		cci CONSOLE_CURSOR_INFO <>
	   00000000
 0000063A 00000000		StdOut HANDLE ?
 0000063E 4D 41 53 4D 6F	ctitle DB 'MASMorra', 0 ;// Título da janela do terminal
	   72 72 61 00

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELAS DO MENU
				;// -------------------------------------------------------------------------

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: MENU PRINCIPAL
				;// -------------------------------------------------------------------------
 00000647 0D 0A			telaMenu	DB 13, 10
 00000649  20 20 20 20 20				DB '           __  ___  ___    ____  __  ___', 13, 10
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 5F 20 20
	   5F 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   20 20 5F 5F 5F
	   0D 0A
 00000673  20 20 20 20 20				DB '          /  |/  / / _ |  / __/ /  |/  / ___   ____  ____ ___ _', 13, 10
	   20 20 20 20 20
	   2F 20 20 7C 2F
	   20 20 2F 20 2F
	   20 5F 20 7C 20
	   20 2F 20 5F 5F
	   2F 20 2F 20 20
	   7C 2F 20 20 2F
	   20 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 5F 0D 0A
 000006B4  20 20 20 20 20				DB '         / /|_/ / / __ | _\ \  / /|_/ / / _ \ / __/ / __// _ `/', 13, 10
	   20 20 20 20 2F
	   20 2F 7C 5F 2F
	   20 2F 20 2F 20
	   5F 5F 20 7C 20
	   5F 5C 20 5C 20
	   20 2F 20 2F 7C
	   5F 2F 20 2F 20
	   2F 20 5F 20 5C
	   20 2F 20 5F 5F
	   2F 20 2F 20 5F
	   5F 2F 2F 20 5F
	   20 60 2F 0D 0A
 000006F5  20 20 20 20 20				DB '        /_/  /_/ /_/ |_|/___/ /_/  /_/  \___//_/   /_/   \_,_/', 13, 10, 13, 10, 13, 10
	   20 20 20 2F 5F
	   2F 20 20 2F 5F
	   2F 20 2F 5F 2F
	   20 7C 5F 7C 2F
	   5F 5F 5F 2F 20
	   2F 5F 2F 20 20
	   2F 5F 2F 20 20
	   5C 5F 5F 5F 2F
	   2F 5F 2F 20 20
	   20 2F 5F 2F 20
	   20 20 5C 5F 2C
	   5F 2F 0D 0A 0D
	   0A 0D 0A
 00000739  20 20 20 20 20				DB '                         ____________________ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 0D 0A
 00000769  20 20 20 20 20				DB '                       / \                   \ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2F 20
	   5C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 20 0D 0A
 0000079A  20 20 20 20 20				DB '                      |  \|    NOVO JOGO     |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   5C 7C 20 20 20
	   20 4E 4F 56 4F
	   20 4A 4F 47 4F
	   20 20 20 20 20
	   7C 0D 0A
 000007CA  20 20 20 20 20				DB '                       \_||    CONQUISTAS    |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 5F
	   7C 7C 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   7C 0D 0A
 000007FA  20 20 20 20 20				DB '                          |    AJUDA         |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 41 4A 55 44
	   41 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 0000082A  20 20 20 20 20				DB '                          |    CONFIGURACOES |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 43 4F 4E 46
	   49 47 55 52 41
	   43 4F 45 53 20
	   7C 0D 0A
 0000085A  20 20 20 20 20				DB '                          |    SAIR          |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 53 41 49 52
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 0000088A  20 20 20 20 20				DB '                          |  ________________|__', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 0D 0A
 000008BC  20 20 20 20 20				DB '                          \_/__________________/', 13, 10, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 2F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 2F 0D 0A
	   00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONQUISTAS
				;// -------------------------------------------------------------------------
 000008EF 20 C9			telaConqs	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000941  20 BA 20 20 20				DB 32, 186, '                                  CONQUISTAS                                 ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000993  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000009E5  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A37  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A89  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000ADB  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B2D  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B7F  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000BD1  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C23  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C75  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000CC7  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D19  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D6B  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000DBD  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: AJUDA
				;// -------------------------------------------------------------------------
 00000E10 20 C9			telaAjuda	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000E62  20 BA 20 20 20				DB 32, 186, '                                    AJUDA                                    ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 4A
	   55 44 41 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000EB4  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F06  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F58  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000FAA  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000FFC  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000104E  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000010A0  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000010F2  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001144  20 BA 20 52 65				DB 32, 186, ' Recursos utilizados:                                                        ', 186, 13, 10
	   63 75 72 73 6F
	   73 20 75 74 69
	   6C 69 7A 61 64
	   6F 73 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001196  20 BA 20 20 20				DB 32, 186, '   Biblioteca Irvine (http://www.asmirvine.com)                              ', 186, 13, 10
	   42 69 62 6C 69
	   6F 74 65 63 61
	   20 49 72 76 69
	   6E 65 20 28 68
	   74 74 70 3A 2F
	   2F 77 77 77 2E
	   61 73 6D 69 72
	   76 69 6E 65 2E
	   63 6F 6D 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000011E8  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000123A  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000128C  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000012DE  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONFIGURAÇÕES
				;// -------------------------------------------------------------------------
 00001331 20 C9			telaConfig	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00001383  20 BA 20 20 20				DB 32, 186, '                                 CONFIGURACOES                               ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   43 4F 4E 46 49
	   47 55 52 41 43
	   4F 45 53 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000013D5  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001427  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001479  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000014CB  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000151D  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000156F  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000015C1  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001613  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001665  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000016B7  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001709  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000175B  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017AD  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017FF  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00


				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE PROCEDIMENTOS
				;// -------------------------------------------------------------------------
 00000000			.code

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: HideCursor
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Esconder o cursor piscante do terminal
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000000			HideCursor PROC
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 0000063A R		mov StdOut, eax
					invoke GetConsoleCursorInfo, StdOut, OFFSET cci
 0000000C  68 00000632 R   *	    push   dword  ptr OFFSET FLAT: cci
 00000011  FF 35 0000063A R *	    push   StdOut
 00000017  E8 00000000 E   *	    call   GetConsoleCursorInfo
 0000001C  C7 05 00000636 R		mov cci.bVisible, FALSE
	   00000000
					invoke SetConsoleCursorInfo, StdOut, OFFSET cci
 00000026  68 00000632 R   *	    push   dword  ptr OFFSET FLAT: cci
 0000002B  FF 35 0000063A R *	    push   StdOut
 00000031  E8 00000000 E   *	    call   SetConsoleCursorInfo
 00000036  C3				ret
 00000037			HideCursor ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ShowMenu
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir o menu principal e chamar o controle da seta seletora
				;//  PARÂMETROS: CL - Opção atual do menu
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000037			ShowMenu PROC
 00000037  B8 0000001E			mov eax, yellow + (blue * 16)
 0000003C  E8 00000000 E		call SetTextColor

 00000041  BE 00000000			mov esi, 0	;// Inicia o índice do menu na primeira opção

 00000046  E8 000000EB			call LimpaTela

 0000004B  BA 00000647 R		mov edx, OFFSET telaMenu ;// Imprime a tela inicial do menu
 00000050  E8 00000000 E		call WriteString

 00000055  8A E9			mov ch, cl			;// Copia a seleção atual para chamar ChangeMenuSel
 00000057  E8 00000046			call ChangeMenuSel	;// Imprime a seta seletora do menu

 0000005C			MENUL:
 0000005C  B8 00000032			mov  eax, 50
 00000061  E8 00000000 E		call Delay
 00000066  E8 00000000 E		call ReadKey	;// Verifica se há uma tecla pressionada
 0000006B  74 EF			jz MENUL
 0000006D  80 FC 48			cmp ah, 48h	;// Seta para cima
 00000070  74 20			je CIMA
 00000072  80 FC 50			cmp ah, 50h	;// Seta para baixo
 00000075  74 0B			je BAIXO
 00000077  80 FC 1C			cmp ah, 1Ch	;// Enter
 0000007A  75 E0			jne MENUL
 0000007C  E8 00000046			call DoMenuSel
 00000081  C3				ret
 00000082			BAIXO :
 00000082  80 F9 04			cmp cl, (MENUQNT - 1)	;// Limitador máximo
 00000085  74 D5			je MENUL
 00000087  8A E9			mov ch, cl
 00000089  FE C5			inc ch
 0000008B  E8 00000012			call ChangeMenuSel
 00000090  EB CA			jmp MENUL
 00000092			CIMA :
 00000092  80 F9 00			cmp cl, 0	;// Limitador mínimo
 00000095  74 C5			je MENUL
 00000097  8A E9			mov ch, cl
 00000099  FE CD			dec ch
 0000009B  E8 00000002			call ChangeMenuSel
 000000A0  EB BA			jmp MENUL
 000000A2			ShowMenu ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ChangeMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir a seta seletora do menu
				;//  PARÂMETROS:  CH - Nova Opção Selecionada
				;//  RETORNO: CL - Opção Selecionada
				;// -------------------------------------------------------------------------
 000000A2			ChangeMenuSel PROC
 000000A2  B2 1D			mov dl, 29			;// pos X da seta
 000000A4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000A6  02 F1			add dh, cl			;// pos Y da seta(atual)
 000000A8  E8 00000000 E		call Gotoxy
 000000AD  B0 20			mov al, 32			;// ASCII: Espaço
 000000AF  E8 00000000 E		call WriteChar		;// Limpa a seleção anterior
 000000B4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000B6  02 F5			add dh, ch			;// pos Y da seta(nova)
 000000B8  E8 00000000 E		call Gotoxy
 000000BD  B0 AF			mov al, 175			;// ASCII: Seta
 000000BF  E8 00000000 E		call WriteChar		;// Escreve o indicador do menu
 000000C4  8A CD			mov cl, ch			;// Troca a opção atual
 000000C6  C3				ret
 000000C7			ChangeMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: DoMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Verificar a opção selecionada no menu e agir de acordo
				;//  PARÂMETROS:  CL - Opção Selecionada
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000000C7			DoMenuSel PROC
 000000C7  80 F9 00			cmp cl, 0
 000000CA  74 1B			je opNovoJogo
 000000CC  80 F9 01			cmp cl, 1
 000000CF  74 1D			je opConquistas
 000000D1  80 F9 02			cmp cl, 2
 000000D4  74 29			je opAjuda
 000000D6  80 F9 03			cmp cl, 3
 000000D9  74 35			je opConfig
				;// SELEÇÃO DO MENU: Sair
 000000DB  E8 00000056			call LimpaTela
					invoke ExitProcess, 0
 000000E0  6A 00	   *	    push   +000000000h
 000000E2  E8 00000000 E   *	    call   ExitProcess
				;// SELEÇÃO DO MENU: Novo Jogo
 000000E7			opNovoJogo:
 000000E7  E8 0000045B		          call MainGame
 000000EC  EB 31				jmp MenuRetWait 
				;// SELEÇÃO DO MENU: Conquistas
 000000EE			opConquistas:
 000000EE  E8 00000043				call LimpaTela
 000000F3  BA 000008EF R			mov edx, OFFSET telaConqs
 000000F8  E8 00000000 E			call WriteString
 000000FD  EB 20				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Ajuda
 000000FF			opAjuda:
 000000FF  E8 00000032				call LimpaTela
 00000104  BA 00000E10 R			mov edx, OFFSET telaAjuda
 00000109  E8 00000000 E			call WriteString
 0000010E  EB 0F				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Configurações
 00000110			opConfig:
 00000110  E8 00000021				call LimpaTela
 00000115  BA 00001331 R			mov edx, OFFSET telaConfig
 0000011A  E8 00000000 E			call WriteString
				;// Para telas do menu que aguardam uma tecla para retornar
 0000011F			MenuRetWait:
 0000011F  B8 00000032				mov  eax, 50
 00000124  E8 00000000 E			call Delay
 00000129  E8 00000000 E			call ReadKey	;// Verifica se há uma tecla pressionada
 0000012E  74 EF				jz MenuRetWait
 00000130  E8 FFFFFF02				call ShowMenu   ;// Retorna ao menu principal
 00000135  C3					ret
 00000136			DoMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: LimpaTela
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Limpar a tela, escrevendo o caracter " " (espaço) em toda a 
				;//			   matriz do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000136			LimpaTela PROC USES eax ecx edx
 00000136  50		   *	    push   eax
 00000137  51		   *	    push   ecx
 00000138  52		   *	    push   edx
 00000139  B8 00000000			mov eax, black + (black * 16) ;// Para a função SETTEXTCOLOR deve ser passado al, onde os 4 bits HSB é a cor de fundo e os 4 LSB são a cor da letra, a multiplicação por 16 é equivalente a dar um shift de 4 bits para a esquerda
 0000013E  E8 00000000 E		call SETTEXTCOLOR ;// Função Irvine : Configura a cor do texto recebendo como parâmetro o registrador eax
 00000143  B2 00			mov dl, 0 ;// Move o cursor para a posição 0, 0
 00000145  B6 00			mov dh, 0
 00000147  E8 00000000 E		call GOTOXY ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 0000014C  0F B6 0D			movzx ecx, yMax ;// Inicializa o contador do loop com a quantidade de linhas
	   00000001 R
 00000153  41				inc ecx
 00000154  A0 00000621 R		mov al, vazioChar

 00000159			LLP1 :
 00000159  B2 00			mov dl, 0
 0000015B  E8 00000000 E		call GOTOXY
 00000160  51				push ecx
 00000161  0F B6 0D			movzx ecx, xMax ;// Inicializa o contador do loop com a quantidade de colunhas
	   00000000 R
 00000168			LLP2 :
 00000168  E8 00000000 E		call WRITECHAR ;// Função Irvine : Escreve um caracter no terminal, tMaxX * tMaxY vezes(declarado de forma a ser dois loops aninhados)
 0000016D  FE C2			inc dl
 0000016F  E2 F7			loop LLP2

 00000171  FE C6			inc dh
 00000173  59				pop ecx
 00000174  E2 E3			loop LLP1

 00000176  B8 0000000F			mov eax, white + (black * 16)
 0000017B  E8 00000000 E		call SETTEXTCOLOR
 00000180  B2 00			mov dl, 0
 00000182  B6 00			mov dh, 0
 00000184  E8 00000000 E		call GOTOXY
					ret
 00000189  5A		   *	    pop    edx
 0000018A  59		   *	    pop    ecx
 0000018B  58		   *	    pop    eax
 0000018C  C3		   *	    ret    00000h

 0000018D			LimpaTela ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawBordas
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha as bordas do jogo com o caracter "/" em vermelho
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//				 yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000018D			drawBordas PROC uses eax ecx edx 
 0000018D  50		   *	    push   eax
 0000018E  51		   *	    push   ecx
 0000018F  52		   *	    push   edx
 00000190  B8 00000008		     mov eax, gray + (black * 16)
 00000195  E8 00000000 E	     call SetTextColor

				     ;// -------------------- Imprime a borda superior do mapa
 0000019A  0F B6 0D		     movzx ecx, xMax            
	   00000000 R
 000001A1  A0 00000620 R	     mov al, paredeChar
 000001A6			L1:
 000001A6  E8 00000000 E	     call WriteChar
 000001AB  E2 F9		     loop L1
				     
				     ;// ------------------- Imprime as bordas laterais do mapa
 000001AD  0F B6 0D		     movzx ecx, yMax                  
	   00000001 R
 000001B4  83 E9 04		     sub ecx, 4
 000001B7  B6 01		     mov dh, 1
 000001B9			L2:
 000001B9  B2 00		     mov dl, 0
 000001BB  E8 00000000 E	     call GotoXY
 000001C0  E8 00000000 E	     call WriteChar
 000001C5  8A 15 00000000 R	     mov dl, xMax
 000001CB  FE CA		     dec dl
 000001CD  E8 00000000 E	     call GotoXY
 000001D2  E8 00000000 E	     call WriteChar
 000001D7  FE C6		     inc dh
 000001D9  E2 DE		     loop L2

				     ;// ------------------ Imprime a borda de baixo do mapa
 000001DB  B2 00		     mov dl, 0
 000001DD  8A 35 00000001 R	     mov dh, yMax
 000001E3  80 EE 04		     sub dh, 4
 000001E6  E8 00000000 E	     call GotoXY
 000001EB  0F B6 0D		     movzx ecx, xMax           
	   00000000 R
 000001F2			L3:
 000001F2  E8 00000000 E	     call WriteChar
 000001F7  E2 F9		     loop L3

 000001F9  B8 00000004		     mov eax, red + (black * 16)
 000001FE  E8 00000000 E	     call SetTextColor


				     ;// --------------------Imprime a borda superior do status
 00000203  B0 3D		     mov al, '='
 00000205  B2 00		     mov dl, 0
 00000207  8A 35 00000001 R	     mov dh, yMax
 0000020D  80 EE 03		     sub dh, 3
 00000210  E8 00000000 E	     call GotoXY
 00000215  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 0000021C			L4:
 0000021C  E8 00000000 E	     call WriteChar
 00000221  E2 F9		     loop L4

				     ;// ------------------Imprime a borda de baixo do status
 00000223  B2 00		     mov dl, 0
 00000225  8A 35 00000001 R	     mov dh, yMax
 0000022B  E8 00000000 E	     call GotoXY
 00000230  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 00000237			L5:
 00000237  E8 00000000 E	     call WriteChar
 0000023C  E2 F9		     loop L5
				     
				     ;// ------------------ Imprime as laterais do status
 0000023E  B0 49		     mov al, 'I'
 00000240  B9 00000002		     mov ecx, 2
 00000245  8A 35 00000001 R	     mov dh, yMax
 0000024B  80 EE 02		     sub dh, 2
 0000024E			L6:
 0000024E  B2 00		     mov dl, 0
 00000250  E8 00000000 E	     call GotoXY
 00000255  E8 00000000 E	     call WriteChar
 0000025A  8A 15 00000000 R	     mov dl, xMax
 00000260  FE CA		     dec dl
 00000262  E8 00000000 E	     call GotoXY
 00000267  E8 00000000 E	     call WriteChar
 0000026C  FE C6		     inc dh
 0000026E  E2 DE		     loop L6

				     ;// ------- Reseta a cor e retorna
 00000270  B8 0000000F		     mov eax, white + (black * 16)
 00000275  E8 00000000 E	     call SetTextColor
				     ret
 0000027A  5A		   *	    pop    edx
 0000027B  59		   *	    pop    ecx
 0000027C  58		   *	    pop    eax
 0000027D  C3		   *	    ret    00000h
 0000027E			drawBordas ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawStatus
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o status do jogo (nível, vida, etc)
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//		       yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000027E			drawStatus PROC uses eax edx
				     
 0000027E  50		   *	    push   eax
 0000027F  52		   *	    push   edx
 00000280  B8 0000000F		     mov eax, white+(black*16)
 00000285  E8 00000000 E	     call SetTextColor

				     ;// ---- LEVEL
 0000028A  B6 17		     mov dh, 23
 0000028C  B2 05		     mov dl, 5
 0000028E  E8 00000000 E	     call GotoXY
 00000293  BA 00000624 R	     mov edx, OFFSET strLevel
 00000298  E8 00000000 E	     call WriteString
 0000029D  B6 18		     mov dh, 24
 0000029F  B2 07		     mov dl, 7
 000002A1  E8 00000000 E	     call GotoXY
 000002A6  A0 00000622 R	     mov al, Level
 000002AB  E8 00000000 E	     call WriteDec
				     
 000002B0  E8 FFFFFD4B		     call HideCursor
				     ret
 000002B5  5A		   *	    pop    edx
 000002B6  58		   *	    pop    eax
 000002B7  C3		   *	    ret    00000h
 000002B8			drawStatus ENDP


				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PrintMapa
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o mapa do jogo
				;//  PARÂMETROS: MAPCOLS - Quantidade de colunas no mapa 
				;//				 MAPROWS - Quantidade de linhas no mapa
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000002B8			PrintMapa PROC USES ecx esi ebx eax
				     
 000002B8  51		   *	    push   ecx
 000002B9  56		   *	    push   esi
 000002BA  53		   *	    push   ebx
 000002BB  50		   *	    push   eax
 000002BC  B8 00000080		     mov eax, black + (gray * 16)
 000002C1  E8 00000000 E	     call SETTEXTCOLOR
 000002C6  B6 00		     mov dh, 0
 000002C8  B2 01		     mov dl, 1
 000002CA  B9 00000014		     mov ecx, MAPROWS
 000002CF  BE 00000002 R	     mov esi, OFFSET map
 000002D4  BB 00000000		     mov ebx, 0
 000002D9			L1:
 000002D9  80 C6 01		     add dh, 1
 000002DC  51			     push ecx                 ;// Guarda ecx
 000002DD  B9 0000004E		     mov ecx, MAPCOLS         ;// ecx = numero de colunas do mapa
 000002E2  E8 00000000 E	     call GOTOXY              ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 000002E7			L2:
 000002E7  8A 04 1E		     mov al, [esi + ebx]
 000002EA  3A 05 0000061C R	     cmp al, HeroiChar
 000002F0  74 0F		     je Hero
 000002F2  3A 05 0000061F R	     cmp al, EscadaChar
 000002F8  74 24		     je Escada
 000002FA			Default:
 000002FA  E8 00000000 E	     call WriteChar ;// Desenha padrão (parede ou nada)
 000002FF  EB 3A		     jmp DefLoop

 00000301			Hero:
 00000301  50			     push eax                      ;// guarda 
 00000302  B8 0000008F		     mov eax, white + (gray * 16)  ;// Seleciona o branco  
 00000307  E8 00000000 E	     call SETTEXTCOLOR
 0000030C  58			     pop eax
 0000030D  E8 00000000 E	     call WriteChar                ;// Desenha o herói
 00000312  B8 00000080		     mov eax, black + (gray * 16)  ;// Volta para a cor padrão
 00000317  E8 00000000 E	     call SETTEXTCOLOR
 0000031C  EB 1D		     jmp DefLoop

 0000031E			Escada:
 0000031E  50			     push eax                      ;// guarda 
 0000031F  B8 0000008A		     mov eax, lightGreen + (gray * 16)  ;// Seleciona o branco  
 00000324  E8 00000000 E	     call SETTEXTCOLOR
 00000329  58			     pop eax
 0000032A  E8 00000000 E	     call WriteChar                ;// Desenha a Escada
 0000032F  B8 00000080		     mov eax, black + (gray * 16)  ;// Volta para a cor padrão
 00000334  E8 00000000 E	     call SETTEXTCOLOR
 00000339  EB 00		     jmp DefLoop

 0000033B			DefLoop:          ;// Continua os loops padrão
 0000033B  43			     inc ebx   
 0000033C  E2 A9		     loop L2   
 0000033E  59			     pop ecx
 0000033F  E2 98		     loop L1
				     
				     ;// Reseta a cor do print
 00000341  B8 0000000F		     mov eax, white + (black * 16)
 00000346  E8 00000000 E	     call SETTEXTCOLOR

				     ret
 0000034B  58		   *	    pop    eax
 0000034C  5B		   *	    pop    ebx
 0000034D  5E		   *	    pop    esi
 0000034E  59		   *	    pop    ecx
 0000034F  C3		   *	    ret    00000h
 00000350			PrintMapa ENDP

				;// ==============================================================
				;// ResetMapa PROC
				;// Objetivo: Reseta o Mapa, setando todos os bytes do vetor para '#' - parede
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;// Retorna: Sem retorno
				;// ==============================================================
 00000350			ResetMapa PROC uses eax ecx esi
 00000350  50		   *	    push   eax
 00000351  51		   *	    push   ecx
 00000352  56		   *	    push   esi
 00000353  B9 00000000		     mov ecx, 0
 00000358  BE 00000002 R	     mov esi, OFFSET Map
 0000035D  A0 00000620 R	     mov al, paredeChar
 00000362			L1:
 00000362  88 04 0E		     mov [esi+ecx], al
 00000365  41			     inc ecx
 00000366  81 F9 00000618	     cmp ecx, LENGTHOF Map
 0000036C  72 F4		     jb L1
				     
				     ret
 0000036E  5E		   *	    pop    esi
 0000036F  59		   *	    pop    ecx
 00000370  58		   *	    pop    eax
 00000371  C3		   *	    ret    00000h
 00000372			ResetMapa ENDP

				;// ==============================================================
				;// GeraMapa PROC
				;// Objetivo: Gera o Mapa - drunkard walk modificado
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;//          Map     - Mapa (vetor de bytes)
				;//          emptyCells - células vazias no mapa
				;//          emptyGoal - Meta de células vazias
				;//          pos - posição atual na matriz
				;//          direction - direcao que a geracao se movera
				;//          passos - numero de passos que serão dados
				;// Retorna: Sem retorno
				;// ==============================================================
 00000372			GeraMapa PROC USES eax ebx ecx edx esi
				;// ------------------------- Reseta mapa e variáveis
 00000372  50		   *	    push   eax
 00000373  53		   *	    push   ebx
 00000374  51		   *	    push   ecx
 00000375  52		   *	    push   edx
 00000376  56		   *	    push   esi
 00000377  E8 FFFFFFD4		     call ResetMapa
 0000037C  66| C7 05		     mov emptyCells, 0
	   0000062A R
	   0000
				;// ------------------------- Randomiza a meta de células limpas - entre 620 e 870 (aprox. 40 a 55 % do mapa)
 00000385  B8 000001C3		     mov eax, 451
 0000038A  E8 00000000 E	     call RandomRange
 0000038F  05 000001A4		     add eax, 420
 00000394  66| A3		     mov emptyGoal, ax 
	   0000062C R

				;// ------------------------- Define uma posição inicial aleatória NO MEIO DO MAPA e salva em pos
 0000039A  BE 00000002 R	     mov esi, OFFSET Map
 0000039F  B8 00000209		     mov eax, 521
 000003A4  E8 00000000 E	     call RandomRange
 000003A9  05 00000208		     add eax, 520
 000003AE  66| A3		     mov pos, ax   
	   0000062F R
 000003B4  66| A3		     mov posHeroi, ax
	   0000061A R

				;// ------------------------- Enquanto Células vazias < Meta
 000003BA  66| A1		WL1: mov ax, emptyGoal
	   0000062C R
 000003C0  66| 39 05		     cmp emptyCells, ax
	   0000062A R
 000003C7  0F 83 00000150	     jae Fim

				;// ------------------------- Randomiza direção e num. de passos (de 2 a 5)
				     ;----------- Randomiza direção (0-4)
 000003CD  B8 00000004		     mov eax, 4
 000003D2  E8 00000000 E	     call RandomRange
 000003D7  A2 0000062E R	     mov direction, al
				     ;// --------- Randomiza número de passos (1-9)
 000003DC  B8 00000009		     mov eax, 9
 000003E1  E8 00000000 E	     call RandomRange
 000003E6  40			     inc eax
 000003E7  A2 00000631 R	     mov passos, al
				     ;// --------- Verifica direção e salta para o trecho correspondente
 000003EC  BE 00000002 R	     mov esi, OFFSET Map
 000003F1  80 3D 0000062E R	     cmp direction, 0
	   00
 000003F8  74 23		     je MoveNorth
 000003FA  80 3D 0000062E R	     cmp direction, 1
	   01
 00000401  74 50		     je MoveEast
 00000403  80 3D 0000062E R	     cmp direction, 2
	   02
 0000040A  0F 84 0000008A	     je MoveSouth
 00000410  80 3D 0000062E R	     cmp direction, 3
	   03
 00000417  0F 84 000000BB	     je MoveWest

 0000041D			MoveNorth:
				     ;// ---------- Tira paredes para o norte
 0000041D  33 C9		     xor ecx, ecx
 0000041F  8A 0D 00000631 R	     mov cl, passos
 00000425			MNC:
 00000425  66| A1		     mov ax, pos         
	   0000062F R
 0000042B  66| 83 E8 4E		     sub ax, MAPCOLS     ;// Se não pode mover para cima,
 0000042F  78 89		     js WL1              ;// volta para o inicio
				     
 00000431  66| A3		     mov pos, ax;// salva a nova posição
	   0000062F R

 00000437  8A 1D 00000621 R	     mov bl, vazioChar
 0000043D  38 1C 06		     cmp[esi + eax], bl
 00000440  74 0A		     je NowriteN
 00000442  66| FF 05		     inc emptyCells
	   0000062A R
 00000449  88 1C 06		     mov[esi + eax], bl
 0000044C			NowriteN:  
 0000044C  E2 D7		     loop MNC
 0000044E  E9 FFFFFF67		     jmp WL1

 00000453			MoveEast:
				     ;// ----------Tira paredes para o leste
 00000453  33 C9		     xor ecx, ecx
 00000455  8A 0D 00000631 R	     mov cl, passos
 0000045B			MEC: 
 0000045B  66| A1		     mov ax, pos
	   0000062F R
 00000461  66| 40		     inc ax       ;// ax = pos+1
 00000463  B3 4E		     mov bl, 78
 00000465  F6 F3		     div bl       ;// (pos+1)/78 - Resto fica em AH
 00000467  80 FC 00		     cmp ah, 0
 0000046A  0F 84 FFFFFF4A	     je WL1      ;// se (pos+1)%78 = 0, então não é valido
				     
 00000470  66| A1		     mov ax, pos
	   0000062F R
 00000476  66| 40		     inc ax
 00000478  66| A3		     mov pos, ax  ;// salva a nova posição
	   0000062F R

 0000047E  8A 1D 00000621 R	     mov bl, vazioChar
 00000484  38 1C 06		     cmp[esi + eax], bl
 00000487  74 0A		     je NowriteE
 00000489  66| FF 05		     inc emptyCells
	   0000062A R
 00000490  88 1C 06		     mov[esi + eax], bl
 00000493			NowriteE:  
 00000493  E2 C6		     loop MEC
 00000495  E9 FFFFFF20		     jmp WL1


 0000049A			MoveSouth:
				     ;// ----------Tira paredes para o sul
 0000049A  33 C9		     xor ecx, ecx
 0000049C  8A 0D 00000631 R	     mov cl, passos
 000004A2			MSC: 
 000004A2  66| A1		     mov ax, pos
	   0000062F R
 000004A8  66| 83 C0 4E		     add ax, MAPCOLS
 000004AC  66| 3D 0617		     cmp ax, 1559     ;// Se não pode mover para baixo,
 000004B0  0F 87 FFFFFF04	     ja WL1           ;// volta para o inicio

 000004B6  66| A3		     mov pos, ax     ;// salva a nova posição
	   0000062F R

 000004BC  8A 1D 00000621 R	     mov bl, vazioChar
 000004C2  38 1C 06		     cmp[esi + eax], bl
 000004C5  74 0A		     je NowriteS
 000004C7  66| FF 05		     inc emptyCells
	   0000062A R
 000004CE  88 1C 06		     mov[esi + eax], bl
 000004D1			NowriteS:  
 000004D1  E2 CF		     loop MSC
 000004D3  E9 FFFFFEE2		     jmp WL1

 000004D8			MoveWest:
				     ;// ----------Tira paredes para o oeste
 000004D8  33 C9		     xor ecx, ecx
 000004DA  8A 0D 00000631 R	     mov cl, passos
 000004E0			MWC :
 000004E0  66| A1		     mov ax, pos
	   0000062F R
 000004E6  B3 4E		     mov bl, 78
 000004E8  F6 F3		     div bl         ;// pos/78 - Resto fica em AH
 000004EA  80 FC 00		     cmp ah, 0
 000004ED  0F 84 FFFFFEC7	     je WL1         ;// se pos%78 = 0, então não é valido

 000004F3  66| A1		     mov ax, pos
	   0000062F R
 000004F9  66| 48		     dec ax
 000004FB  66| A3		     mov pos, ax    ;// salva a nova posição
	   0000062F R

 00000501  8A 1D 00000621 R	     mov bl, vazioChar
 00000507  38 1C 06		     cmp [esi + eax], bl
 0000050A  74 0A		     je NowriteW
 0000050C  66| FF 05		     inc emptyCells
	   0000062A R
 00000513  88 1C 06		     mov [esi + eax], bl
 00000516			NowriteW:  
 00000516  E2 C8		     loop MWC
 00000518  E9 FFFFFE9D		     jmp WL1



 0000051D			Fim:
				     ;// -------- - Insere a Escada no mapa
 0000051D  66| A1		     mov ax, pos
	   0000062F R
 00000523  66| A3		     mov posEscada, ax
	   0000061D R
 00000529  8A 1D 0000061F R	     mov bl, EscadaChar
 0000052F  88 1C 06     mov [esi+eax], bl

				     ;// -------- - Insere Personagem no mapa
 00000532  66| A1		     mov ax, posHeroi
	   0000061A R
 00000538  8A 1D 0000061C R	     mov bl, HeroiChar
 0000053E  88 1C 06		     mov [esi + eax], bl

				     ret
 00000541  5E		   *	    pop    esi
 00000542  5A		   *	    pop    edx
 00000543  59		   *	    pop    ecx
 00000544  5B		   *	    pop    ebx
 00000545  58		   *	    pop    eax
 00000546  C3		   *	    ret    00000h
 00000547			GeraMapa ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: mainGame
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Loop do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000547			MainGame PROC
				     
 00000547			InitAll:
 00000547  C6 05 00000622 R	     mov Level, 1
	   01

 0000054E			InitLevel:
 0000054E  E8 FFFFFBE3		     call LimpaTela;// Limpa a tela
 00000553  E8 FFFFFC35		     call drawBordas;// Desenha as bordas do jogo
 00000558  E8 FFFFFDF3		     call ResetMapa;// Reseta o mapa
 0000055D  E8 FFFFFE10		     call GeraMapa;// Gera um novo mapa

 00000562			gameloop:
 00000562  E8 FFFFFD51		     call PrintMapa;// Desenha o mapa
 00000567  E8 FFFFFD12		     call drawStatus;// Escreve os status
 0000056C  E8 0000001B		     call PlayerMove
 00000571  80 3D 00000623 R	     cmp inStairs, 0
	   00
 00000578  75 02		     jne NextLevel
 0000057A  EB E6		     jmp gameloop

 0000057C			NextLevel:
 0000057C  C6 05 00000623 R	     mov inStairs, 0
	   00
 00000583  FE 05 00000622 R	     inc Level
 00000589  EB C3		     jmp InitLevel
				     
 0000058B  C3			     ret
 0000058C			MainGame ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PlayerMove
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Lê a entrada do jogador e move o personagem
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000058C			PlayerMove PROC uses eax esi edx ebx 
				         
 0000058C  50		   *	    push   eax
 0000058D  56		   *	    push   esi
 0000058E  52		   *	    push   edx
 0000058F  53		   *	    push   ebx
 00000590  BE 00000002 R	     mov esi, OFFSET Map    

 00000595			KeyWait:
 00000595  B8 00000032		     mov eax, 50
 0000059A  E8 00000000 E	     call Delay; // Sleep para timeslice
 0000059F  E8 00000000 E	     call ReadKey
 000005A4  74 EF		     jz KeyWait

 000005A6  66| 83 FA 26		     cmp  dx, 0026h
 000005AA  74 1C		     je KeyUp
 000005AC  66| 83 FA 25		     cmp dx, 0025h
 000005B0  0F 84 00000089	     je KeyLeft
 000005B6  66| 83 FA 27		     cmp dx, 0027h
 000005BA  0F 84 000000C7	     je KeyRight
 000005C0  66| 83 FA 28		     cmp dx, 0028h
 000005C4  74 3A		     je KeyDown
 000005C6  EB CD		     jmp KeyWait

 000005C8			KeyUp:
 000005C8  66| A1		     mov ax, posHeroi
	   0000061A R
 000005CE  66| 83 F8 4D		     cmp ax, 77
 000005D2  76 C1		     jbe KeyWait      ;// Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 000005D4  83 E8 4E		     sub eax, 78
 000005D7  8A 1D 00000620 R	     mov bl, paredeChar
 000005DD  38 1C 06		     cmp [esi + eax], bl
 000005E0  74 B3		     je KeyWait
				     ;// Move caso válido
 000005E2  8A 1D 00000621 R	     mov bl, vazioChar
 000005E8  38 1C 06		     cmp[esi + eax], bl
 000005EB  0F 84 000000DC	     je MovUp
				     ;// Colisão com escada
 000005F1  8A 1D 0000061F R	     mov bl, EscadaChar
 000005F7  38 1C 06		     cmp[esi + eax], bl
 000005FA  0F 84 00000157	     je colisaoEscada
				     ;// -------------------------- INSERIR COLISÕES

 00000600			KeyDown:
 00000600  66| A1		     mov ax, posHeroi
	   0000061A R
 00000606  66| BB 05CA		     mov bx, 1482
 0000060A  66| 3B C3		     cmp ax, bx
 0000060D  73 86		     jae KeyWait;   // Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000060F  83 C0 4E		     add eax, 78
 00000612  8A 1D 00000620 R	     mov bl, paredeChar
 00000618  38 1C 06		     cmp[esi + eax], bl
 0000061B  0F 84 FFFFFF74	     je KeyWait
				     ;// Move caso válido
 00000621  8A 1D 00000621 R	     mov bl, vazioChar
 00000627  38 1C 06		     cmp[esi + eax], bl
 0000062A  0F 84 000000C0	     je MovDown
				     ;// Colisão com escada
 00000630  8A 1D 0000061F R	     mov bl, EscadaChar
 00000636  38 1C 06		     cmp[esi + eax], bl
 00000639  0F 84 00000118	     je colisaoEscada
				     ;// -------------------------- INSERIR COLISÕES

 0000063F			KeyLeft:
 0000063F  66| A1		     mov ax, PosHeroi
	   0000061A R
 00000645  B3 4E		     mov bl, 78
 00000647  F6 F3		     div bl             ;// pos/78 - Resto fica em AH
 00000649  80 FC 00		     cmp ah, 0
 0000064C  0F 84 FFFFFF43	     je KeyWait         ;// se pos%78 = 0, então não é valido

 00000652  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 00000658  66| 48		     dec ax
 0000065A  8A 1D 00000620 R	     mov bl, paredeChar
 00000660  38 1C 06		     cmp [esi+eax], bl
 00000663  0F 84 FFFFFF2C	     je KeyWait
				     ;// Move caso válido
 00000669  8A 1D 00000621 R	     mov bl, vazioChar
 0000066F  38 1C 06		     cmp [esi + eax], bl
 00000672  0F 84 0000009B	     je MovLeft
				     ;// Colisão com escada
 00000678  8A 1D 0000061F R	     mov bl, EscadaChar
 0000067E  38 1C 06		     cmp[esi + eax], bl
 00000681  0F 84 000000D0	     je colisaoEscada
				     ;// -------------------------- INSERIR COLISÕES

 00000687			KeyRight:
 00000687  66| A1		     mov ax, PosHeroi
	   0000061A R
 0000068D  66| 40		     inc ax         ;// ax = pos+1
 0000068F  B3 4E		     mov bl, 78
 00000691  F6 F3		     div bl         ;// (pos+1)/78 - Resto fica em AH
 00000693  80 FC 00		     cmp ah, 0
 00000696  0F 84 FFFFFEF9	     je KeyWait     ;// se (pos+1)%78 = 0, então não é valido

 0000069C  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 000006A2  66| 40		     inc ax
 000006A4  8A 1D 00000620 R	     mov bl, paredeChar
 000006AA  38 1C 06		     cmp[esi + eax], bl
 000006AD  0F 84 FFFFFEE2	     je KeyWait
				     ;// Move caso válido
 000006B3  8A 1D 00000621 R	     mov bl, vazioChar
 000006B9  38 1C 06		     cmp[esi + eax], bl
 000006BC  74 77		     je MovRight
				     ;// Colisão com escada
 000006BE  8A 1D 0000061F R	     mov bl, EscadaChar
 000006C4  38 1C 06		     cmp[esi + eax], bl
 000006C7  0F 84 0000008A	     je colisaoEscada
				     ;// -------------------------- INSERIR COLISÕES

 000006CD			MovUp:
 000006CD  66| 83 2D		     sub posHeroi, 78
	   0000061A R 4E
 000006D5  66| A1		     mov ax, posHeroi
	   0000061A R
 000006DB  8A 1D 00000621 R	     mov bl, vazioChar
 000006E1  88 5C 06 4E		     mov [esi + eax + 78], bl   ;// Limpa posição atual
 000006E5  8A 1D 0000061C R	     mov bl, HeroiChar
 000006EB  88 1C 06		     mov [esi + eax], bl ; // Adiciona o heroi na nova posição
 000006EE  EB 70		     jmp EndInput

 000006F0			MovDown :
 000006F0  66| 83 05		     add posHeroi, 78
	   0000061A R 4E
 000006F8  66| A1		     mov ax, posHeroi
	   0000061A R
 000006FE  8A 1D 00000621 R	     mov bl, vazioChar
 00000704  88 5C 06 B2		     mov[esi + eax - 78], bl   ;// Limpa posição atual
 00000708  8A 1D 0000061C R	     mov bl, HeroiChar
 0000070E  88 1C 06		     mov[esi + eax], bl ; // Adiciona o heroi na nova posição
 00000711  EB 4D		     jmp EndInput

 00000713			MovLeft :
 00000713  66| FF 0D		     dec posHeroi
	   0000061A R
 0000071A  66| A1		     mov ax, posHeroi
	   0000061A R
 00000720  8A 1D 00000621 R	     mov bl, vazioChar
 00000726  88 5C 06 01		     mov[esi + eax + 1], bl;// Limpa posição atual
 0000072A  8A 1D 0000061C R	     mov bl, HeroiChar
 00000730  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 00000733  EB 2B		     jmp EndInput

 00000735			MovRight :
 00000735  66| FF 05		     inc posHeroi
	   0000061A R
 0000073C  66| A1		     mov ax, posHeroi
	   0000061A R
 00000742  8A 1D 00000621 R	     mov bl, vazioChar
 00000748  88 5C 06 FF		     mov[esi + eax - 1], bl;// Limpa posição atual
 0000074C  8A 1D 0000061C R	     mov bl, HeroiChar
 00000752  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 00000755  EB 09		     jmp EndInput

 00000757			colisaoEscada:
 00000757  C6 05 00000623 R	     mov inStairs, 1
	   01
 0000075E  EB 00		     jmp EndInput


 00000760			EndInput:     
				     ret
 00000760  5B		   *	    pop    ebx
 00000761  5A		   *	    pop    edx
 00000762  5E		   *	    pop    esi
 00000763  58		   *	    pop    eax
 00000764  C3		   *	    ret    00000h
 00000765			PlayerMove ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: main
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Procedimento principal do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000765			main PROC
 00000765  E8 00000000 E	     call Randomize;// Randomiza a seed
					invoke SetConsoleTitle, OFFSET ctitle	;// Muda o título do terminal
 0000076A  68 0000063E R   *	    push   dword  ptr OFFSET FLAT: ctitle
 0000076F  E8 00000000 E   *	    call   SetConsoleTitleA
 00000774  E8 FFFFF887			call HideCursor							;// Esconde o cursor piscante
 00000779  B1 00			mov cl, 0								;// Inicia o seletor do menu na primeira opção
 0000077B  E8 FFFFF8B7			call ShowMenu							;// Mostra o menu principal

 00000780			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 18:14:34
MASMorra.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001852 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000780 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChangeMenuSel  . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000025 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DoMenuSel  . . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 0000006F Public STDCALL
  opNovoJogo . . . . . . . . . .	L Near	 000000E7 _TEXT	
  opConquistas . . . . . . . . .	L Near	 000000EE _TEXT	
  opAjuda  . . . . . . . . . . .	L Near	 000000FF _TEXT	
  opConfig . . . . . . . . . . .	L Near	 00000110 _TEXT	
  MenuRetWait  . . . . . . . . .	L Near	 0000011F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GeraMapa . . . . . . . . . . . .	P Near	 00000372 _TEXT	Length= 000001D5 Public STDCALL
  WL1  . . . . . . . . . . . . .	L Near	 000003BA _TEXT	
  MoveNorth  . . . . . . . . . .	L Near	 0000041D _TEXT	
  MNC  . . . . . . . . . . . . .	L Near	 00000425 _TEXT	
  NowriteN . . . . . . . . . . .	L Near	 0000044C _TEXT	
  MoveEast . . . . . . . . . . .	L Near	 00000453 _TEXT	
  MEC  . . . . . . . . . . . . .	L Near	 0000045B _TEXT	
  NowriteE . . . . . . . . . . .	L Near	 00000493 _TEXT	
  MoveSouth  . . . . . . . . . .	L Near	 0000049A _TEXT	
  MSC  . . . . . . . . . . . . .	L Near	 000004A2 _TEXT	
  NowriteS . . . . . . . . . . .	L Near	 000004D1 _TEXT	
  MoveWest . . . . . . . . . . .	L Near	 000004D8 _TEXT	
  MWC  . . . . . . . . . . . . .	L Near	 000004E0 _TEXT	
  NowriteW . . . . . . . . . . .	L Near	 00000516 _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 0000051D _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LimpaTela  . . . . . . . . . . .	P Near	 00000136 _TEXT	Length= 00000057 Public STDCALL
  LLP1 . . . . . . . . . . . . .	L Near	 00000159 _TEXT	
  LLP2 . . . . . . . . . . . . .	L Near	 00000168 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGame . . . . . . . . . . . .	P Near	 00000547 _TEXT	Length= 00000045 Public STDCALL
  InitAll  . . . . . . . . . . .	L Near	 00000547 _TEXT	
  InitLevel  . . . . . . . . . .	L Near	 0000054E _TEXT	
  gameloop . . . . . . . . . . .	L Near	 00000562 _TEXT	
  NextLevel  . . . . . . . . . .	L Near	 0000057C _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayerMove . . . . . . . . . . .	P Near	 0000058C _TEXT	Length= 000001D9 Public STDCALL
  KeyWait  . . . . . . . . . . .	L Near	 00000595 _TEXT	
  KeyUp  . . . . . . . . . . . .	L Near	 000005C8 _TEXT	
  KeyDown  . . . . . . . . . . .	L Near	 00000600 _TEXT	
  KeyLeft  . . . . . . . . . . .	L Near	 0000063F _TEXT	
  KeyRight . . . . . . . . . . .	L Near	 00000687 _TEXT	
  MovUp  . . . . . . . . . . . .	L Near	 000006CD _TEXT	
  MovDown  . . . . . . . . . . .	L Near	 000006F0 _TEXT	
  MovLeft  . . . . . . . . . . .	L Near	 00000713 _TEXT	
  MovRight . . . . . . . . . . .	L Near	 00000735 _TEXT	
  colisaoEscada  . . . . . . . .	L Near	 00000757 _TEXT	
  EndInput . . . . . . . . . . .	L Near	 00000760 _TEXT	
PrintMapa  . . . . . . . . . . .	P Near	 000002B8 _TEXT	Length= 00000098 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002D9 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002E7 _TEXT	
  Default  . . . . . . . . . . .	L Near	 000002FA _TEXT	
  Hero . . . . . . . . . . . . .	L Near	 00000301 _TEXT	
  Escada . . . . . . . . . . . .	L Near	 0000031E _TEXT	
  DefLoop  . . . . . . . . . . .	L Near	 0000033B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetMapa  . . . . . . . . . . .	P Near	 00000350 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000362 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowMenu . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 0000006B Public STDCALL
  MENUL  . . . . . . . . . . . .	L Near	 0000005C _TEXT	
  BAIXO  . . . . . . . . . . . .	L Near	 00000082 _TEXT	
  CIMA . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
drawBordas . . . . . . . . . . .	P Near	 0000018D _TEXT	Length= 000000F1 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001B9 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000001F2 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000021C _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 00000237 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 0000024E _TEXT	
drawStatus . . . . . . . . . . .	P Near	 0000027E _TEXT	Length= 0000003A Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000765 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000050h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EscadaChar . . . . . . . . . . .	Byte	 0000061F _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HeroiChar  . . . . . . . . . . .	Byte	 0000061C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Level  . . . . . . . . . . . . .	Byte	 00000622 _DATA	
MAPCOLS  . . . . . . . . . . . .	Number	 0000004Eh   
MAPROWS  . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENUQNT  . . . . . . . . . . . .	Number	 00000005h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Map  . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 00000019h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StdOut . . . . . . . . . . . . .	DWord	 0000063A _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cci  . . . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000632 _DATA	
ctitle . . . . . . . . . . . . .	Byte	 0000063E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 0000062E _DATA	
emptyCells . . . . . . . . . . .	Word	 0000062A _DATA	
emptyGoal  . . . . . . . . . . .	Word	 0000062C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inStairs . . . . . . . . . . . .	Byte	 00000623 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
paredeChar . . . . . . . . . . .	Byte	 00000620 _DATA	
passos . . . . . . . . . . . . .	Byte	 00000631 _DATA	
posEscada  . . . . . . . . . . .	Word	 0000061D _DATA	
posHeroi . . . . . . . . . . . .	Word	 0000061A _DATA	
pos  . . . . . . . . . . . . . .	Word	 0000062F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strLevel . . . . . . . . . . . .	Byte	 00000624 _DATA	
telaAjuda  . . . . . . . . . . .	Byte	 00000E10 _DATA	
telaConfig . . . . . . . . . . .	Byte	 00001331 _DATA	
telaConqs  . . . . . . . . . . .	Byte	 000008EF _DATA	
telaMenu . . . . . . . . . . . .	Byte	 00000647 _DATA	
vazioChar  . . . . . . . . . . .	Byte	 00000621 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xMax . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yMax . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
