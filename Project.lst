Microsoft (R) Macro Assembler Version 14.14.26429.4	    07/01/18 22:56:14
MASMorra.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE CONSTANTES
				;// -------------------------------------------------------------------------
 = 00000050			COLS = 80            ;// Colunas do jogo
 = 00000019			ROWS = 25            ;// Linhas do jogo
 = 0000004E			MAPCOLS = (COLS - 2) ;// Colunas do mapa
 = 00000014			MAPROWS = (ROWS - 5) ;// Linhas do mapa
 = 00000005			MENUQNT = 5			 ;// Quantas opções tem o menu

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE VARIÁVEIS
				;// -------------------------------------------------------------------------
 00000000			.data
				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELA
				;// -------------------------------------------------------------------------
 00000000 50			xMax BYTE COLS      ;// número maximo de colunas
 00000001 19			yMax BYTE ROWS      ;// númer maximo de linhas

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DO MAPA
				;// -------------------------------------------------------------------------
 00000002  00000618 [		Map BYTE MAPCOLS*MAPROWS Dup(?)	;// vetor de (colunas*linhas) posições. 
	    00
	   ]
 0000061A 0000			posHeroi WORD 0						;// Posição atual do heroi
 0000061C E9			HeroiChar BYTE 233
 0000061D 0000			posEscada WORD 0
 0000061F F0			EscadaChar BYTE 240
 00000620 B2			paredeChar BYTE 178
 00000621 20			vazioChar  BYTE ' '
 00000622 FE			bauChar BYTE 254
 00000623 26			MonstroChar BYTE 38

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DE VARIÁVEIS DO JOGO
				;// -------------------------------------------------------------------------
 00000624 00			Level BYTE 0   ;// Nível atual
 00000625 00			inStairs DB 0  ;// Indica se o jogador se encontra na escada
 00000626 4C 45 56 45 4C	strLevel DB 'LEVEL: ',0
	   3A 20 00
 0000062E 000A			Health WORD 10
 00000630 48 45 41 4C 54	strHealth DB 'HEALTH: ',0
	   48 3A 20 00
 00000639 02			Attack BYTE 2
 0000063A 41 54 54 41 43	strAttack DB 'ATTACK: ',0
	   4B 3A 20 00
 00000643 0000			Gold WORD 0
 00000645 47 4F 4C 44 3A	strGold DB 'GOLD: ',0
	   20 00
 0000064C 00			isDead DB 0
 0000064D 0000			PosMonstro WORD 0   ;// Usado para a movimentação dos monstros
 0000064F 14			maxLevel BYTE 20    ;// nivel maximo

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: GERAÇÃO DE MAPAS
				;// -------------------------------------------------------------------------
 00000650 0000			emptyCells WORD 0
 00000652 0000			emptyGoal WORD 0
 00000654 00			direction BYTE 0    ;// Direção do corredor [0-Norte, 1-Leste, 2-Sul, 3-Oeste]
 00000655 0000			pos WORD 0          ;// Ponteiro para a posição atual no mapa (0 - 1559)
 00000657 00			passos BYTE 0       ;// Numero de passos que sao dados na geração do mapa

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE DO TERMINAL
				;// -------------------------------------------------------------------------
 00000658 00000000		cci CONSOLE_CURSOR_INFO <>
	   00000000
 00000660 00000000		StdOut HANDLE ?
 00000664 4D 41 53 4D 6F	ctitle DB 'MASMorra', 0 ;// Título da janela do terminal
	   72 72 61 00

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELAS DO MENU
				;// -------------------------------------------------------------------------

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: MENU PRINCIPAL
				;// -------------------------------------------------------------------------
 0000066D 0D 0A			telaMenu	DB 13, 10
 0000066F  20 20 20 20 20				DB '           __  ___  ___    ____  __  ___', 13, 10
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 5F 20 20
	   5F 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   20 20 5F 5F 5F
	   0D 0A
 00000699  20 20 20 20 20				DB '          /  |/  / / _ |  / __/ /  |/  / ___   ____  ____ ___ _', 13, 10
	   20 20 20 20 20
	   2F 20 20 7C 2F
	   20 20 2F 20 2F
	   20 5F 20 7C 20
	   20 2F 20 5F 5F
	   2F 20 2F 20 20
	   7C 2F 20 20 2F
	   20 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 5F 0D 0A
 000006DA  20 20 20 20 20				DB '         / /|_/ / / __ | _\ \  / /|_/ / / _ \ / __/ / __// _ `/', 13, 10
	   20 20 20 20 2F
	   20 2F 7C 5F 2F
	   20 2F 20 2F 20
	   5F 5F 20 7C 20
	   5F 5C 20 5C 20
	   20 2F 20 2F 7C
	   5F 2F 20 2F 20
	   2F 20 5F 20 5C
	   20 2F 20 5F 5F
	   2F 20 2F 20 5F
	   5F 2F 2F 20 5F
	   20 60 2F 0D 0A
 0000071B  20 20 20 20 20				DB '        /_/  /_/ /_/ |_|/___/ /_/  /_/  \___//_/   /_/   \_,_/', 13, 10, 13, 10, 13, 10
	   20 20 20 2F 5F
	   2F 20 20 2F 5F
	   2F 20 2F 5F 2F
	   20 7C 5F 7C 2F
	   5F 5F 5F 2F 20
	   2F 5F 2F 20 20
	   2F 5F 2F 20 20
	   5C 5F 5F 5F 2F
	   2F 5F 2F 20 20
	   20 2F 5F 2F 20
	   20 20 5C 5F 2C
	   5F 2F 0D 0A 0D
	   0A 0D 0A
 0000075F  20 20 20 20 20				DB '                         ____________________ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 0D 0A
 0000078F  20 20 20 20 20				DB '                       / \                   \ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2F 20
	   5C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 20 0D 0A
 000007C0  20 20 20 20 20				DB '                      |  \|    NOVO JOGO     |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   5C 7C 20 20 20
	   20 4E 4F 56 4F
	   20 4A 4F 47 4F
	   20 20 20 20 20
	   7C 0D 0A
 000007F0  20 20 20 20 20				DB '                       \_||    CONQUISTAS    |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 5F
	   7C 7C 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   7C 0D 0A
 00000820  20 20 20 20 20				DB '                          |    AJUDA         |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 41 4A 55 44
	   41 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 00000850  20 20 20 20 20				DB '                          |    CONFIGURACOES |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 43 4F 4E 46
	   49 47 55 52 41
	   43 4F 45 53 20
	   7C 0D 0A
 00000880  20 20 20 20 20				DB '                          |    SAIR          |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 53 41 49 52
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 000008B0  20 20 20 20 20				DB '                          |  ________________|__', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 0D 0A
 000008E2  20 20 20 20 20				DB '                          \_/__________________/', 13, 10, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 2F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 2F 0D 0A
	   00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONQUISTAS
				;// -------------------------------------------------------------------------
 00000915 20 C9			telaConqs	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000967  20 BA 20 20 20				DB 32, 186, '                                  CONQUISTAS                                 ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000009B9  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A0B  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A5D  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000AAF  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B01  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B53  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000BA5  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000BF7  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C49  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C9B  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000CED  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D3F  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D91  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000DE3  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: AJUDA
				;// -------------------------------------------------------------------------
 00000E36 20 C9			telaAjuda	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000E88  20 BA 20 20 20				DB 32, 186, '                                    AJUDA                                    ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 4A
	   55 44 41 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000EDA  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F2C  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F7E  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000FD0  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001022  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001074  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000010C6  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001118  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000116A  20 BA 20 52 65				DB 32, 186, ' Recursos utilizados:                                                        ', 186, 13, 10
	   63 75 72 73 6F
	   73 20 75 74 69
	   6C 69 7A 61 64
	   6F 73 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000011BC  20 BA 20 20 20				DB 32, 186, '   Biblioteca Irvine (http://www.asmirvine.com)                              ', 186, 13, 10
	   42 69 62 6C 69
	   6F 74 65 63 61
	   20 49 72 76 69
	   6E 65 20 28 68
	   74 74 70 3A 2F
	   2F 77 77 77 2E
	   61 73 6D 69 72
	   76 69 6E 65 2E
	   63 6F 6D 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000120E  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001260  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000012B2  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001304  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONFIGURAÇÕES
				;// -------------------------------------------------------------------------
 00001357 20 C9			telaConfig	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 000013A9  20 BA 20 20 20				DB 32, 186, '                                 CONFIGURACOES                               ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   43 4F 4E 46 49
	   47 55 52 41 43
	   4F 45 53 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000013FB  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000144D  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000149F  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000014F1  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001543  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001595  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000015E7  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001639  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000168B  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000016DD  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000172F  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001781  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017D3  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001825  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00


				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE PROCEDIMENTOS
				;// -------------------------------------------------------------------------
 00000000			.code

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: HideCursor
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Esconder o cursor piscante do terminal
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000000			HideCursor PROC
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 00000660 R		mov StdOut, eax
					invoke GetConsoleCursorInfo, StdOut, OFFSET cci
 0000000C  68 00000658 R   *	    push   dword  ptr OFFSET FLAT: cci
 00000011  FF 35 00000660 R *	    push   StdOut
 00000017  E8 00000000 E   *	    call   GetConsoleCursorInfo
 0000001C  C7 05 0000065C R		mov cci.bVisible, FALSE
	   00000000
					invoke SetConsoleCursorInfo, StdOut, OFFSET cci
 00000026  68 00000658 R   *	    push   dword  ptr OFFSET FLAT: cci
 0000002B  FF 35 00000660 R *	    push   StdOut
 00000031  E8 00000000 E   *	    call   SetConsoleCursorInfo
 00000036  C3				ret
 00000037			HideCursor ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ShowMenu
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir o menu principal e chamar o controle da seta seletora
				;//  PARÂMETROS: CL - Opção atual do menu
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000037			ShowMenu PROC
 00000037  B8 0000001E			mov eax, yellow + (blue * 16)
 0000003C  E8 00000000 E		call SetTextColor

 00000041  BE 00000000			mov esi, 0	;// Inicia o índice do menu na primeira opção

 00000046  E8 000000F2			call LimpaTela

 0000004B  BA 0000066D R		mov edx, OFFSET telaMenu ;// Imprime a tela inicial do menu
 00000050  E8 00000000 E		call WriteString

 00000055  8A E9			mov ch, cl			;// Copia a seleção atual para chamar ChangeMenuSel
 00000057  E8 00000046			call ChangeMenuSel	;// Imprime a seta seletora do menu

 0000005C			MENUL:
 0000005C  B8 00000032			mov  eax, 50
 00000061  E8 00000000 E		call Delay
 00000066  E8 00000000 E		call ReadKey	;// Verifica se há uma tecla pressionada
 0000006B  74 EF			jz MENUL
 0000006D  80 FC 48			cmp ah, 48h	;// Seta para cima
 00000070  74 20			je CIMA
 00000072  80 FC 50			cmp ah, 50h	;// Seta para baixo
 00000075  74 0B			je BAIXO
 00000077  80 FC 1C			cmp ah, 1Ch	;// Enter
 0000007A  75 E0			jne MENUL
 0000007C  E8 00000046			call DoMenuSel
 00000081  C3				ret
 00000082			BAIXO :
 00000082  80 F9 04			cmp cl, (MENUQNT - 1)	;// Limitador máximo
 00000085  74 D5			je MENUL
 00000087  8A E9			mov ch, cl
 00000089  FE C5			inc ch
 0000008B  E8 00000012			call ChangeMenuSel
 00000090  EB CA			jmp MENUL
 00000092			CIMA :
 00000092  80 F9 00			cmp cl, 0	;// Limitador mínimo
 00000095  74 C5			je MENUL
 00000097  8A E9			mov ch, cl
 00000099  FE CD			dec ch
 0000009B  E8 00000002			call ChangeMenuSel
 000000A0  EB BA			jmp MENUL
 000000A2			ShowMenu ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ChangeMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir a seta seletora do menu
				;//  PARÂMETROS:  CH - Nova Opção Selecionada
				;//  RETORNO: CL - Opção Selecionada
				;// -------------------------------------------------------------------------
 000000A2			ChangeMenuSel PROC
 000000A2  B2 1D			mov dl, 29			;// pos X da seta
 000000A4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000A6  02 F1			add dh, cl			;// pos Y da seta(atual)
 000000A8  E8 00000000 E		call Gotoxy
 000000AD  B0 20			mov al, 32			;// ASCII: Espaço
 000000AF  E8 00000000 E		call WriteChar		;// Limpa a seleção anterior
 000000B4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000B6  02 F5			add dh, ch			;// pos Y da seta(nova)
 000000B8  E8 00000000 E		call Gotoxy
 000000BD  B0 AF			mov al, 175			;// ASCII: Seta
 000000BF  E8 00000000 E		call WriteChar		;// Escreve o indicador do menu
 000000C4  8A CD			mov cl, ch			;// Troca a opção atual
 000000C6  C3				ret
 000000C7			ChangeMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: DoMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Verificar a opção selecionada no menu e agir de acordo
				;//  PARÂMETROS:  CL - Opção Selecionada
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000000C7			DoMenuSel PROC
 000000C7  80 F9 00			cmp cl, 0
 000000CA  74 1B			je opNovoJogo
 000000CC  80 F9 01			cmp cl, 1
 000000CF  74 24			je opConquistas
 000000D1  80 F9 02			cmp cl, 2
 000000D4  74 30			je opAjuda
 000000D6  80 F9 03			cmp cl, 3
 000000D9  74 3C			je opConfig
				;// SELEÇÃO DO MENU: Sair
 000000DB  E8 0000005D			call LimpaTela
					invoke ExitProcess, 0
 000000E0  6A 00	   *	    push   +000000000h
 000000E2  E8 00000000 E   *	    call   ExitProcess
				;// SELEÇÃO DO MENU: Novo Jogo
 000000E7			opNovoJogo:
 000000E7  E8 00000594		          call MainGame
 000000EC  B1 00		          mov cl, 0
 000000EE  E8 FFFFFF44		          call ShowMenu
 000000F3  EB 31				jmp MenuRetWait 
				;// SELEÇÃO DO MENU: Conquistas
 000000F5			opConquistas:
 000000F5  E8 00000043				call LimpaTela
 000000FA  BA 00000915 R			mov edx, OFFSET telaConqs
 000000FF  E8 00000000 E			call WriteString
 00000104  EB 20				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Ajuda
 00000106			opAjuda:
 00000106  E8 00000032				call LimpaTela
 0000010B  BA 00000E36 R			mov edx, OFFSET telaAjuda
 00000110  E8 00000000 E			call WriteString
 00000115  EB 0F				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Configurações
 00000117			opConfig:
 00000117  E8 00000021				call LimpaTela
 0000011C  BA 00001357 R			mov edx, OFFSET telaConfig
 00000121  E8 00000000 E			call WriteString
				;// Para telas do menu que aguardam uma tecla para retornar
 00000126			MenuRetWait:
 00000126  B8 00000032				mov  eax, 50
 0000012B  E8 00000000 E			call Delay
 00000130  E8 00000000 E			call ReadKey	;// Verifica se há uma tecla pressionada
 00000135  74 EF				jz MenuRetWait
 00000137  E8 FFFFFEFB				call ShowMenu   ;// Retorna ao menu principal
 0000013C  C3					ret
 0000013D			DoMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: LimpaTela
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Limpar a tela, escrevendo o caracter " " (espaço) em toda a 
				;//			   matriz do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000013D			LimpaTela PROC USES eax ecx edx
 0000013D  50		   *	    push   eax
 0000013E  51		   *	    push   ecx
 0000013F  52		   *	    push   edx
 00000140  B8 00000000			mov eax, black + (black * 16) ;// Para a função SETTEXTCOLOR deve ser passado al, onde os 4 bits HSB é a cor de fundo e os 4 LSB são a cor da letra, a multiplicação por 16 é equivalente a dar um shift de 4 bits para a esquerda
 00000145  E8 00000000 E		call SETTEXTCOLOR ;// Função Irvine : Configura a cor do texto recebendo como parâmetro o registrador eax
 0000014A  B2 00			mov dl, 0 ;// Move o cursor para a posição 0, 0
 0000014C  B6 00			mov dh, 0
 0000014E  E8 00000000 E		call GOTOXY ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 00000153  0F B6 0D			movzx ecx, yMax ;// Inicializa o contador do loop com a quantidade de linhas
	   00000001 R
 0000015A  41				inc ecx
 0000015B  A0 00000621 R		mov al, vazioChar

 00000160			LLP1 :
 00000160  B2 00			mov dl, 0
 00000162  E8 00000000 E		call GOTOXY
 00000167  51				push ecx
 00000168  0F B6 0D			movzx ecx, xMax ;// Inicializa o contador do loop com a quantidade de colunhas
	   00000000 R
 0000016F			LLP2 :
 0000016F  E8 00000000 E		call WRITECHAR ;// Função Irvine : Escreve um caracter no terminal, tMaxX * tMaxY vezes(declarado de forma a ser dois loops aninhados)
 00000174  FE C2			inc dl
 00000176  E2 F7			loop LLP2

 00000178  FE C6			inc dh
 0000017A  59				pop ecx
 0000017B  E2 E3			loop LLP1

 0000017D  B8 0000000F			mov eax, white + (black * 16)
 00000182  E8 00000000 E		call SETTEXTCOLOR
 00000187  B2 00			mov dl, 0
 00000189  B6 00			mov dh, 0
 0000018B  E8 00000000 E		call GOTOXY
					ret
 00000190  5A		   *	    pop    edx
 00000191  59		   *	    pop    ecx
 00000192  58		   *	    pop    eax
 00000193  C3		   *	    ret    00000h

 00000194			LimpaTela ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawBordas
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha as bordas do jogo com o caracter "/" em vermelho
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//				 yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000194			drawBordas PROC uses eax ecx edx 
 00000194  50		   *	    push   eax
 00000195  51		   *	    push   ecx
 00000196  52		   *	    push   edx
 00000197  B8 00000008		     mov eax, gray + (black * 16)
 0000019C  E8 00000000 E	     call SetTextColor

				     ;// -------------------- Imprime a borda superior do mapa
 000001A1  B0 C9		     mov al, 201
 000001A3  E8 00000000 E	     call WriteChar

 000001A8  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 000001AF  83 E9 02		     sub ecx, 2
 000001B2  B0 CD		     mov al, 205
 000001B4			L1:
 000001B4  E8 00000000 E	     call WriteChar
 000001B9  E2 F9		     loop L1

 000001BB  B0 BB		     mov al, 187
 000001BD  E8 00000000 E	     call WriteChar

				     ;// ------------------- Imprime as bordas laterais do mapa
 000001C2  B0 BA		     mov al, 186
 000001C4  0F B6 0D		     movzx ecx, yMax                  
	   00000001 R
 000001CB  83 E9 04		     sub ecx, 4
 000001CE  B6 01		     mov dh, 1
 000001D0			L2:
 000001D0  B2 00		     mov dl, 0
 000001D2  E8 00000000 E	     call GotoXY
 000001D7  E8 00000000 E	     call WriteChar
 000001DC  8A 15 00000000 R	     mov dl, xMax
 000001E2  FE CA		     dec dl
 000001E4  E8 00000000 E	     call GotoXY
 000001E9  E8 00000000 E	     call WriteChar
 000001EE  FE C6		     inc dh
 000001F0  E2 DE		     loop L2

				     ;// ------------------ Imprime a borda de baixo do mapa
 000001F2  B2 00		     mov dl, 0
 000001F4  8A 35 00000001 R	     mov dh, yMax
 000001FA  80 EE 04		     sub dh, 4
 000001FD  E8 00000000 E	     call GotoXY
				     
 00000202  B0 C8		     mov al, 200
 00000204  E8 00000000 E	     call WriteChar

 00000209  0F B6 0D		     movzx ecx, xMax  
	   00000000 R
 00000210  83 E9 02		     sub ecx, 2
 00000213  B0 CD		     mov al, 205

 00000215			L3:
 00000215  E8 00000000 E	     call WriteChar
 0000021A  E2 F9		     loop L3

 0000021C  B0 BC		     mov al, 188
 0000021E  E8 00000000 E	     call WriteChar

 00000223  B8 00000004		     mov eax, red + (black * 16)
 00000228  E8 00000000 E	     call SetTextColor


				     ;// --------------------Imprime a borda superior do status
 0000022D  B0 C9		     mov al, 201
 0000022F  B2 00		     mov dl, 0
 00000231  8A 35 00000001 R	     mov dh, yMax
 00000237  80 EE 03		     sub dh, 3
 0000023A  E8 00000000 E	     call GotoXY
 0000023F  E8 00000000 E	     call WriteChar
 00000244  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 0000024B  83 E9 02		     sub ecx, 2
 0000024E  B0 CF		     mov al, 207
 00000250			L4:
 00000250  E8 00000000 E	     call WriteChar
 00000255  E2 F9		     loop L4

 00000257  B0 BB		     mov al, 187
 00000259  E8 00000000 E	     call WriteChar

				     ;// ------------------Imprime a borda de baixo do status
 0000025E  B0 C8		     mov al, 200
 00000260  B2 00		     mov dl, 0
 00000262  8A 35 00000001 R	     mov dh, yMax
 00000268  E8 00000000 E	     call GotoXY
 0000026D  E8 00000000 E	     call writeChar
 00000272  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 00000279  83 E9 02		     sub ecx, 2
 0000027C  B0 D1		     mov al, 209
 0000027E			L5:
 0000027E  E8 00000000 E	     call WriteChar
 00000283  E2 F9		     loop L5
				          
 00000285  B0 BC		     mov al, 188
 00000287  E8 00000000 E	     call WriteChar
				     
				     ;// ------------------ Imprime as laterais do status
 0000028C  B9 00000002		     mov ecx, 2
 00000291  8A 35 00000001 R	     mov dh, yMax
 00000297  80 EE 02		     sub dh, 2
 0000029A			L6:
 0000029A  B2 00		     mov dl, 0
 0000029C  E8 00000000 E	     call GotoXY
 000002A1  B0 B6		     mov al, 182
 000002A3  E8 00000000 E	     call WriteChar
 000002A8  8A 15 00000000 R	     mov dl, xMax
 000002AE  FE CA		     dec dl
 000002B0  E8 00000000 E	     call GotoXY
 000002B5  B0 C7		     mov al, 199
 000002B7  E8 00000000 E	     call WriteChar
 000002BC  FE C6		     inc dh
 000002BE  E2 DA		     loop L6

				     ;// ------- Reseta a cor e retorna
 000002C0  B8 0000000F		     mov eax, white + (black * 16)
 000002C5  E8 00000000 E	     call SetTextColor
				     ret
 000002CA  5A		   *	    pop    edx
 000002CB  59		   *	    pop    ecx
 000002CC  58		   *	    pop    eax
 000002CD  C3		   *	    ret    00000h
 000002CE			drawBordas ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawStatus
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o status do jogo (nível, vida, etc)
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//		       yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000002CE			drawStatus PROC uses eax edx
				     
 000002CE  50		   *	    push   eax
 000002CF  52		   *	    push   edx
 000002D0  B8 0000000F		     mov eax, white+(black*16)
 000002D5  E8 00000000 E	     call SetTextColor

 000002DA  B9 0000004E		     mov ecx, 78
 000002DF  B6 17		     mov dh, 23
 000002E1  B2 01		     mov dl, 1
 000002E3  E8 00000000 E	     call GotoXY
 000002E8  A0 00000621 R	     mov al, VazioChar
 000002ED			L1:  
 000002ED  E8 00000000 E	     call WriteChar
 000002F2  E2 F9		     loop L1


				     ;// ---- LEVEL
 000002F4  B6 17		     mov dh, 23     ;// move para a posição
 000002F6  B2 05		     mov dl, 5
 000002F8  E8 00000000 E	     call GotoXY
 000002FD  BA 00000626 R	     mov edx, OFFSET strLevel
 00000302  E8 00000000 E	     call WriteString
 00000307  A0 00000624 R	     mov al, Level
 0000030C  E8 00000000 E	     call WriteDec
				     
				     ;// ---- HEALTH
 00000311  B6 17		     mov dh, 23     ;// move para a posição
 00000313  B2 19		     mov dl, 25
 00000315  E8 00000000 E	     call GotoXY
 0000031A  BA 00000630 R	     mov edx, OFFSET strHealth
 0000031F  E8 00000000 E	     call WriteString
 00000324  66| A1		     mov ax, Health
	   0000062E R
 0000032A  E8 00000000 E	     call WriteDec

				     ;// ---- GOLD
 0000032F  B6 17		     mov dh, 23     ;// move para a posição
 00000331  B2 2D		     mov dl, 45
 00000333  E8 00000000 E	     call GotoXY
 00000338  BA 00000645 R	     mov edx, OFFSET strGold
 0000033D  E8 00000000 E	     call WriteString
 00000342  66| A1		     mov ax, Gold
	   00000643 R
 00000348  E8 00000000 E	     call WriteDec

 0000034D  E8 FFFFFCAE		     call HideCursor
				     ret
 00000352  5A		   *	    pop    edx
 00000353  58		   *	    pop    eax
 00000354  C3		   *	    ret    00000h
 00000355			drawStatus ENDP


				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PrintMapa
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o mapa do jogo
				;//  PARÂMETROS: MAPCOLS - Quantidade de colunas no mapa 
				;//				 MAPROWS - Quantidade de linhas no mapa
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000355			PrintMapa PROC USES ecx esi ebx eax edx
				     
 00000355  51		   *	    push   ecx
 00000356  56		   *	    push   esi
 00000357  53		   *	    push   ebx
 00000358  50		   *	    push   eax
 00000359  52		   *	    push   edx
 0000035A  B8 00000080		     mov eax, black + (gray * 16)
 0000035F  E8 00000000 E	     call SETTEXTCOLOR
 00000364  B6 00		     mov dh, 0
 00000366  B2 01		     mov dl, 1
 00000368  B9 00000014		     mov ecx, MAPROWS
 0000036D  BE 00000002 R	     mov esi, OFFSET map
 00000372  BB 00000000		     mov ebx, 0
 00000377			L1:
 00000377  80 C6 01		     add dh, 1
 0000037A  51			     push ecx                 ;// Guarda ecx
 0000037B  B9 0000004E		     mov ecx, MAPCOLS         ;// ecx = numero de colunas do mapa
 00000380  E8 00000000 E	     call GOTOXY              ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 00000385			L2:
 00000385  8A 04 1E		     mov al, [esi + ebx]
 00000388  3A 05 0000061C R	     cmp al, HeroiChar
 0000038E  74 31		     je Hero
 00000390  3A 05 0000061F R	     cmp al, EscadaChar
 00000396  74 37		     je Escada
 00000398  3A 05 00000622 R	     cmp al, BauChar
 0000039E  74 3D		     je Bau
 000003A0  3A 05 00000623 R		cmp al, MonstroChar
 000003A6  74 43		     je Monstro
 000003A8  50			     push eax
 000003A9  B8 00000080		     mov eax, black + (gray * 16);// Volta para a cor padrão
 000003AE  E8 00000000 E	     call SETTEXTCOLOR
 000003B3  58			     pop eax
 000003B4			Default:
 000003B4  E8 00000000 E	     call WriteChar ;// Desenha padrão (parede ou nada)
 000003B9  43			     inc ebx   
 000003BA  E2 C9		     loop L2   
 000003BC  59			     pop ecx
 000003BD  E2 B8		     loop L1
 000003BF  EB 38		     jmp Fim

 000003C1			Hero:
 000003C1  50			     push eax                      ;// guarda 
 000003C2  B8 0000008F		     mov eax, white + (gray * 16)  ;// Seleciona o branco  
 000003C7  E8 00000000 E	     call SETTEXTCOLOR
 000003CC  58			     pop eax
 000003CD  EB E5		     jmp Default

 000003CF			Escada:
 000003CF  50			     push eax                      ;// guarda 
 000003D0  B8 0000008A		     mov eax, lightGreen + (gray * 16)  ;// Seleciona o verde  
 000003D5  E8 00000000 E	     call SETTEXTCOLOR
 000003DA  58			     pop eax
 000003DB  EB D7		     jmp Default

 000003DD			Bau:
 000003DD  50			     push eax                      ;// guarda 
 000003DE  B8 0000008E		     mov eax, yellow + (gray * 16)  ;// Seleciona o amarelo  
 000003E3  E8 00000000 E	     call SETTEXTCOLOR
 000003E8  58			     pop eax
 000003E9  EB C9		     jmp Default

 000003EB			Monstro:
 000003EB  50			     push eax                      ;// guarda 
 000003EC  B8 00000084		     mov eax, red + (gray * 16)  ;// Seleciona o vermelho  
 000003F1  E8 00000000 E	     call SETTEXTCOLOR
 000003F6  58			     pop eax
 000003F7  EB BB		     jmp Default

 000003F9			Fim:    
				     ;// Reseta a cor do print
 000003F9  B8 0000000F		     mov eax, white + (black * 16)
 000003FE  E8 00000000 E	     call SETTEXTCOLOR

				     ret
 00000403  5A		   *	    pop    edx
 00000404  58		   *	    pop    eax
 00000405  5B		   *	    pop    ebx
 00000406  5E		   *	    pop    esi
 00000407  59		   *	    pop    ecx
 00000408  C3		   *	    ret    00000h
 00000409			PrintMapa ENDP

				;// ==============================================================
				;// ResetMapa PROC
				;// Objetivo: Reseta o Mapa, setando todos os bytes do vetor para '#' - parede
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;// Retorna: Sem retorno
				;// ==============================================================
 00000409			ResetMapa PROC uses eax ecx esi
 00000409  50		   *	    push   eax
 0000040A  51		   *	    push   ecx
 0000040B  56		   *	    push   esi
 0000040C  B9 00000000		     mov ecx, 0
 00000411  BE 00000002 R	     mov esi, OFFSET Map
 00000416  A0 00000620 R	     mov al, paredeChar
 0000041B			L1:
 0000041B  88 04 0E		     mov [esi+ecx], al
 0000041E  41			     inc ecx
 0000041F  81 F9 00000618	     cmp ecx, LENGTHOF Map
 00000425  72 F4		     jb L1
				     
				     ret
 00000427  5E		   *	    pop    esi
 00000428  59		   *	    pop    ecx
 00000429  58		   *	    pop    eax
 0000042A  C3		   *	    ret    00000h
 0000042B			ResetMapa ENDP

				;// ==============================================================
				;// GeraMapa PROC
				;// Objetivo: Gera o Mapa - drunkard walk modificado
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;//          Map     - Mapa (vetor de bytes)
				;//          emptyCells - células vazias no mapa
				;//          emptyGoal - Meta de células vazias
				;//          pos - posição atual na matriz
				;//          direction - direcao que a geracao se movera
				;//          passos - numero de passos que serão dados
				;// Retorna: Sem retorno
				;// ==============================================================
 0000042B			GeraMapa PROC USES eax ebx ecx edx esi
				;// ------------------------- Reseta mapa e variáveis
 0000042B  50		   *	    push   eax
 0000042C  53		   *	    push   ebx
 0000042D  51		   *	    push   ecx
 0000042E  52		   *	    push   edx
 0000042F  56		   *	    push   esi
 00000430  E8 FFFFFFD4		     call ResetMapa
 00000435  66| C7 05		     mov emptyCells, 0
	   00000650 R
	   0000
				;// ------------------------- Randomiza a meta de células limpas - entre 620 e 950 (aprox. 40 a 60 % do mapa)
 0000043E  B8 000001C3		     mov eax, 451
 00000443  E8 00000000 E	     call RandomRange
 00000448  05 000001F4		     add eax, 500
 0000044D  66| A3		     mov emptyGoal, ax 
	   00000652 R

				;// ------------------------- Define uma posição inicial aleatória NO MEIO DO MAPA e salva em pos
 00000453  BE 00000002 R	     mov esi, OFFSET Map
 00000458  B8 00000209		     mov eax, 521
 0000045D  E8 00000000 E	     call RandomRange
 00000462  05 00000208		     add eax, 520
 00000467  66| A3		     mov pos, ax   
	   00000655 R
 0000046D  66| A3		     mov posHeroi, ax
	   0000061A R

				;// ------------------------- Enquanto Células vazias < Meta
 00000473  66| A1		WL1: mov ax, emptyGoal
	   00000652 R
 00000479  66| 39 05		     cmp emptyCells, ax
	   00000650 R
 00000480  0F 83 00000150	     jae Fim

				;// ------------------------- Randomiza direção e num. de passos (de 2 a 5)
				     ;----------- Randomiza direção (0-4)
 00000486  B8 00000004		     mov eax, 4
 0000048B  E8 00000000 E	     call RandomRange
 00000490  A2 00000654 R	     mov direction, al
				     ;// --------- Randomiza número de passos (1-9)
 00000495  B8 00000009		     mov eax, 9
 0000049A  E8 00000000 E	     call RandomRange
 0000049F  40			     inc eax
 000004A0  A2 00000657 R	     mov passos, al
				     ;// --------- Verifica direção e salta para o trecho correspondente
 000004A5  BE 00000002 R	     mov esi, OFFSET Map
 000004AA  80 3D 00000654 R	     cmp direction, 0
	   00
 000004B1  74 23		     je MoveNorth
 000004B3  80 3D 00000654 R	     cmp direction, 1
	   01
 000004BA  74 50		     je MoveEast
 000004BC  80 3D 00000654 R	     cmp direction, 2
	   02
 000004C3  0F 84 0000008A	     je MoveSouth
 000004C9  80 3D 00000654 R	     cmp direction, 3
	   03
 000004D0  0F 84 000000BB	     je MoveWest

 000004D6			MoveNorth:
				     ;// ---------- Tira paredes para o norte
 000004D6  33 C9		     xor ecx, ecx
 000004D8  8A 0D 00000657 R	     mov cl, passos
 000004DE			MNC:
 000004DE  66| A1		     mov ax, pos         
	   00000655 R
 000004E4  66| 83 E8 4E		     sub ax, MAPCOLS     ;// Se não pode mover para cima,
 000004E8  78 89		     js WL1              ;// volta para o inicio
				     
 000004EA  66| A3		     mov pos, ax;// salva a nova posição
	   00000655 R

 000004F0  8A 1D 00000621 R	     mov bl, vazioChar
 000004F6  38 1C 06		     cmp[esi + eax], bl
 000004F9  74 0A		     je NowriteN
 000004FB  66| FF 05		     inc emptyCells
	   00000650 R
 00000502  88 1C 06		     mov[esi + eax], bl
 00000505			NowriteN:  
 00000505  E2 D7		     loop MNC
 00000507  E9 FFFFFF67		     jmp WL1

 0000050C			MoveEast:
				     ;// ----------Tira paredes para o leste
 0000050C  33 C9		     xor ecx, ecx
 0000050E  8A 0D 00000657 R	     mov cl, passos
 00000514			MEC: 
 00000514  66| A1		     mov ax, pos
	   00000655 R
 0000051A  66| 40		     inc ax       ;// ax = pos+1
 0000051C  B3 4E		     mov bl, 78
 0000051E  F6 F3		     div bl       ;// (pos+1)/78 - Resto fica em AH
 00000520  80 FC 00		     cmp ah, 0
 00000523  0F 84 FFFFFF4A	     je WL1      ;// se (pos+1)%78 = 0, então não é valido
				     
 00000529  66| A1		     mov ax, pos
	   00000655 R
 0000052F  66| 40		     inc ax
 00000531  66| A3		     mov pos, ax  ;// salva a nova posição
	   00000655 R

 00000537  8A 1D 00000621 R	     mov bl, vazioChar
 0000053D  38 1C 06		     cmp[esi + eax], bl
 00000540  74 0A		     je NowriteE
 00000542  66| FF 05		     inc emptyCells
	   00000650 R
 00000549  88 1C 06		     mov[esi + eax], bl
 0000054C			NowriteE:  
 0000054C  E2 C6		     loop MEC
 0000054E  E9 FFFFFF20		     jmp WL1


 00000553			MoveSouth:
				     ;// ----------Tira paredes para o sul
 00000553  33 C9		     xor ecx, ecx
 00000555  8A 0D 00000657 R	     mov cl, passos
 0000055B			MSC: 
 0000055B  66| A1		     mov ax, pos
	   00000655 R
 00000561  66| 83 C0 4E		     add ax, MAPCOLS
 00000565  66| 3D 0617		     cmp ax, 1559     ;// Se não pode mover para baixo,
 00000569  0F 87 FFFFFF04	     ja WL1           ;// volta para o inicio

 0000056F  66| A3		     mov pos, ax     ;// salva a nova posição
	   00000655 R

 00000575  8A 1D 00000621 R	     mov bl, vazioChar
 0000057B  38 1C 06		     cmp[esi + eax], bl
 0000057E  74 0A		     je NowriteS
 00000580  66| FF 05		     inc emptyCells
	   00000650 R
 00000587  88 1C 06		     mov[esi + eax], bl
 0000058A			NowriteS:  
 0000058A  E2 CF		     loop MSC
 0000058C  E9 FFFFFEE2		     jmp WL1

 00000591			MoveWest:
				     ;// ----------Tira paredes para o oeste
 00000591  33 C9		     xor ecx, ecx
 00000593  8A 0D 00000657 R	     mov cl, passos
 00000599			MWC :
 00000599  66| A1		     mov ax, pos
	   00000655 R
 0000059F  B3 4E		     mov bl, 78
 000005A1  F6 F3		     div bl         ;// pos/78 - Resto fica em AH
 000005A3  80 FC 00		     cmp ah, 0
 000005A6  0F 84 FFFFFEC7	     je WL1         ;// se pos%78 = 0, então não é valido

 000005AC  66| A1		     mov ax, pos
	   00000655 R
 000005B2  66| 48		     dec ax
 000005B4  66| A3		     mov pos, ax    ;// salva a nova posição
	   00000655 R

 000005BA  8A 1D 00000621 R	     mov bl, vazioChar
 000005C0  38 1C 06		     cmp [esi + eax], bl
 000005C3  74 0A		     je NowriteW
 000005C5  66| FF 05		     inc emptyCells
	   00000650 R
 000005CC  88 1C 06		     mov [esi + eax], bl
 000005CF			NowriteW:  
 000005CF  E2 C8		     loop MWC
 000005D1  E9 FFFFFE9D		     jmp WL1



 000005D6			Fim:
				     ;// -------- - Insere a Escada no mapa
 000005D6  66| A1		     mov ax, pos
	   00000655 R
 000005DC  66| A3		     mov posEscada, ax
	   0000061D R
 000005E2  8A 1D 0000061F R	     mov bl, EscadaChar
 000005E8  88 1C 06		     mov [esi+eax], bl

				     ;// -------- - Insere Personagem no mapa
 000005EB  66| A1		     mov ax, posHeroi
	   0000061A R
 000005F1  8A 1D 0000061C R	     mov bl, HeroiChar
 000005F7  88 1C 06		     mov [esi + eax], bl

 000005FA  E8 0000000B		     call InsertBaus
 000005FF  E8 00000033			call InsertMonstros

				     ret
 00000604  5E		   *	    pop    esi
 00000605  5A		   *	    pop    edx
 00000606  59		   *	    pop    ecx
 00000607  5B		   *	    pop    ebx
 00000608  58		   *	    pop    eax
 00000609  C3		   *	    ret    00000h
 0000060A			GeraMapa ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: InsertBaus
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Insere os baús no mapa
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000060A			InsertBaus PROC
 0000060A  BE 00000002 R	     mov esi, OFFSET Map
 0000060F  B9 00000002		     mov ecx, 2
 00000614  8A 1D 00000621 R	     mov bl, VazioChar

 0000061A			random:
 0000061A  B8 00000619		     mov eax, 1561
 0000061F  E8 00000000 E	     call RandomRange
 00000624  8A 14 06		     mov dl, [esi+eax]
 00000627  3A D3		     cmp dl, bl
 00000629  75 EF		     jne random

 0000062B			addBau:
 0000062B  8A 15 00000622 R	     mov dl, BauChar
 00000631  88 14 06		     mov [esi+eax], dl
 00000634  E2 E4		     loop random

 00000636  C3			     ret
 00000637			InsertBaus ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: InsertMonstros
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Insere os monstros no mapa
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000637			InsertMonstros PROC
 00000637  BE 00000002 R	     mov esi, OFFSET Map
 0000063C  B9 00000005		     mov ecx, 5
 00000641  B8 0000000F		     mov eax, 15
 00000646  E8 00000000 E	     call RandomRange
 0000064B  03 C8		     add ecx, eax
 0000064D  8A 1D 00000621 R	     mov bl, VazioChar

 00000653			random:
 00000653  8A 1D 00000621 R	     mov bl, VazioChar
 00000659  B8 00000619		     mov eax, 1561
 0000065E  E8 00000000 E	     call RandomRange
 00000663  8A 14 06		     mov dl, [esi+eax]
 00000666  3A D3		     cmp dl, bl
 00000668  75 E9		     jne random
 0000066A  8A 1D 00000622 R	     mov bl, BauChar
 00000670  3A D3		     cmp dl, bl
 00000672  74 DF		     je random

 00000674			addMonstro:
 00000674  8A 15 00000623 R	     mov dl, MonstroChar
 0000067A  88 14 06		     mov [esi+eax], dl
 0000067D  E2 D4		     loop random

 0000067F  C3			     ret
 00000680			InsertMonstros ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: mainGame
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Loop do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000680			MainGame PROC uses ecx eax
				     
 00000680  51		   *	    push   ecx
 00000681  50		   *	    push   eax
 00000682			InitAll:
				     ;// Reseta variáveis
 00000682  C6 05 00000624 R	     mov Level, 1
	   01
 00000689  66| C7 05		     mov Health, 10
	   0000062E R
	   000A
 00000692  66| C7 05		     mov Gold, 0
	   00000643 R
	   0000
 0000069B  C6 05 0000064C R	     mov isDead, 0
	   00

 000006A2			InitLevel:
 000006A2  E8 FFFFFA96		     call LimpaTela;// Limpa a tela
 000006A7  E8 FFFFFAE8		     call drawBordas;// Desenha as bordas do jogo
 000006AC  E8 FFFFFD58		     call ResetMapa;// Reseta o mapa
 000006B1  E8 FFFFFD75		     call GeraMapa;// Gera um novo mapa

 000006B6			gameloop:
 000006B6  E8 FFFFFC9A		     call PrintMapa;// Desenha o mapa
 000006BB  E8 FFFFFC0E		     call drawStatus;// Escreve os status
 000006C0  E8 00000277		     call PlayerMove

 000006C5  80 3D 00000625 R	     cmp inStairs, 0 ;// Verifica se o o jogador se encontra na escada
	   00
 000006CC  75 1F		     jne NextLevel
 000006CE  80 3D 0000064C R	     cmp isDead, 0  ;// Verifica se o jogador esta morto
	   00
 000006D5  75 32		     jne EndGame
				     
 000006D7  E8 FFFFFC79		     call PrintMapa
 000006DC  B8 00000032		     mov eax, 50
 000006E1  E8 00000000 E	     call Delay
 000006E6  E8 00000021		     call MoveMonstros
				     
 000006EB  EB C9		     jmp gameloop

 000006ED			NextLevel:
 000006ED  C6 05 00000625 R	     mov inStairs, 0 
	   00
 000006F4  FE 05 00000624 R	     inc Level
 000006FA  A0 0000064F R	     mov al, MaxLevel
 000006FF  3A 05 00000624 R	     cmp al, Level
 00000705  74 02		     je EndGame
 00000707  EB 99		     jmp InitLevel
				 
 00000709			EndGame:

				     ret
 00000709  58		   *	    pop    eax
 0000070A  59		   *	    pop    ecx
 0000070B  C3		   *	    ret    00000h
 0000070C			MainGame ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: MoveMonstros
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Move os monstros aleatoriamente
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000070C			MoveMonstros PROC
				     
 0000070C  BE 00000002 R	     mov esi, OFFSET map
 00000711  B9 00000617		     mov ecx, 1559
 00000716  8A 1D 00000623 R	     mov bl, MonstroChar

 0000071C			Scan:
 0000071C  38 1C 0E		     cmp [esi+ecx], bl
 0000071F  74 04		     je Monstro
 00000721  E2 F9		     loop Scan
 00000723  EB 07		     jmp Fim

 00000725			Monstro: 
 00000725  E8 00000003		     call MonstroMoveCheck
 0000072A  E2 F0		     loop Scan

 0000072C			Fim:
 0000072C  C3			     ret
 0000072D			MoveMonstros ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: MonstroMoveCheck
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Lê a entrada do jogador e move o personagem
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------

 0000072D			MonstroMoveCheck PROC uses esi eax ebx
				     
 0000072D  56		   *	    push   esi
 0000072E  50		   *	    push   eax
 0000072F  53		   *	    push   ebx
 00000730  66| 89 0D		     mov PosMonstro, cx
	   0000064D R

 00000737			Dir: 
 00000737  E8 00000000 E	     call Randomize
 0000073C  B8 00000004		     mov eax, 4
 00000741  E8 00000000 E	     call RandomRange
 00000746  83 F8 00		     cmp eax, 0
 00000749  74 13		     je MonUp
 0000074B  83 F8 01		     cmp eax, 1
 0000074E  0F 84 000000B2	     je MonRight
 00000754  83 F8 02		     cmp eax, 2
 00000757  74 3C		     je MonDown
 00000759  83 F8 03		     cmp eax, 3
 0000075C  74 6D		     je MonLeft

 0000075E			MonUp:
 0000075E  0F B7 05		     movzx eax, PosMonstro
	   0000064D R
 00000765  66| 83 F8 4D		     cmp ax, 77
 00000769  0F 86 000001C9	     jbe EndMov     ;// Tenta outra direção caso inválido

				     ;// Checa se existe uma parede:
 0000076F  83 E8 4E		     sub eax, 78
 00000772  8A 1D 00000620 R	     mov bl, paredeChar
 00000778  38 1C 06		     cmp [esi + eax], bl
 0000077B  0F 84 000001B7	     je EndMov
				     ;// Move caso válido
 00000781  8A 1D 00000621 R	     mov bl, vazioChar
 00000787  38 1C 06		     cmp[esi + eax], bl
 0000078A  0F 84 000000EC	     je MovUp
				     ;// Outras colisões
 00000790  E9 000000AE		     jmp colisao

 00000795			MonDown:
 00000795  66| A1		     mov ax, PosMonstro
	   0000064D R
 0000079B  66| BB 05CA		     mov bx, 1482
 0000079F  66| 3B C3		     cmp ax, bx
 000007A2  0F 86 00000190	     jbe EndMov     ;// Tenta outra direção caso inválido

				     ;// Checa se existe uma parede:
 000007A8  83 C0 4E		     add eax, 78
 000007AB  8A 1D 00000620 R	     mov bl, paredeChar
 000007B1  38 1C 06		     cmp[esi + eax], bl
 000007B4  0F 84 0000017E	     je EndMov
				     ;// Move caso válido
 000007BA  8A 1D 00000621 R	     mov bl, vazioChar
 000007C0  38 1C 06		     cmp[esi + eax], bl
 000007C3  0F 84 000000DC	     je MovDown
 000007C9  EB 78		     jmp colisao

 000007CB			MonLeft:
 000007CB  66| A1		     mov ax, PosMonstro
	   0000064D R
 000007D1  B3 4E		     mov bl, 78
 000007D3  F6 F3		     div bl             ;// pos/78 - Resto fica em AH
 000007D5  80 FC 00		     cmp ah, 0
 000007D8  0F 86 0000015A	     jbe EndMov;// Tenta outra direção caso inválido

 000007DE  66| A1		     mov ax, posMonstro
	   0000064D R
				     ;// Checa se existe uma parede:
 000007E4  66| 48		     dec ax
 000007E6  8A 1D 00000620 R	     mov bl, paredeChar
 000007EC  38 1C 06		     cmp [esi+eax], bl
 000007EF  0F 84 00000143	     je EndMov
				     ;// Move caso válido
 000007F5  8A 1D 00000621 R	     mov bl, vazioChar
 000007FB  38 1C 06		     cmp [esi + eax], bl
 000007FE  0F 84 000000C4	     je MovLeft
 00000804  EB 3D		     jmp colisao

 00000806			MonRight:
 00000806  66| A1		     mov ax, PosMonstro
	   0000064D R
 0000080C  66| 40		     inc ax         ;// ax = pos+1
 0000080E  B3 4E		     mov bl, 78
 00000810  F6 F3		     div bl         ;// (pos+1)/78 - Resto fica em AH
 00000812  80 FC 00		     cmp ah, 0      ;// se (pos+1)%78 = 0, então não é valido
 00000815  0F 86 0000011D	     jbe EndMov     ;// Tenta outra direção caso inválido     

 0000081B  66| A1		     mov ax, posMonstro
	   0000064D R
				     ;// Checa se existe uma parede:
 00000821  66| 40		     inc ax
 00000823  8A 1D 00000620 R	     mov bl, paredeChar
 00000829  38 1C 06		     cmp[esi + eax], bl
 0000082C  0F 84 00000106	     je EndMov
				     ;// Move caso válido
 00000832  8A 1D 00000621 R	     mov bl, vazioChar
 00000838  38 1C 06		     cmp[esi + eax], bl
 0000083B  0F 84 000000AA	     je MovRight
 00000841  EB 00		     jmp colisao

 00000843			Colisao:
				     ;// Colisão com escada
 00000843  8A 1D 0000061F R	     mov bl, EscadaChar
 00000849  38 1C 06		     cmp[esi + eax], bl
 0000084C  E9 000000E7		     jmp EndMov
				     ;// Colisão com bau
 00000851  8A 1D 00000622 R	     mov bl, BauChar
 00000857  38 1C 06		     cmp[esi + eax], bl
 0000085A  E9 000000D9		     jmp EndMov
					;// Colisão com o Heroi
 0000085F  8A 1D 0000061C R	     mov bl, HeroiChar
 00000865  38 1C 06		     cmp[esi + eax], bl
 00000868  0F 84 0000009F	     je colisaoHeroi
					;// Colisão com monstro
 0000086E  8A 1D 00000623 R	     mov bl, MonstroChar
 00000874  38 1C 06		     cmp[esi + eax], bl
 00000877  E9 FFFFFEBB		     jmp Dir   

 0000087C			MovUp:
 0000087C  66| 83 2D		     sub PosMonstro, 78
	   0000064D R 4E
 00000884  66| A1		     mov ax, PosMonstro
	   0000064D R
 0000088A  8A 1D 00000621 R	     mov bl, vazioChar
 00000890  88 5C 06 4E		     mov [esi + eax + 78], bl   ;// Limpa posição atual
 00000894  8A 1D 00000623 R	     mov bl, MonstroCHar
 0000089A  88 1C 06		     mov [esi + eax], bl ; // Adiciona o heroi na nova posição
 0000089D  83 E9 4F		     sub ecx, 79
 000008A0  E9 00000093		     jmp EndMov

 000008A5			MovDown :
 000008A5  66| 83 05     add PosMonstro, 78
	   0000064D R 4E
 000008AD  66| A1		     mov ax, PosMonstro
	   0000064D R
 000008B3  8A 1D 00000621 R	     mov bl, vazioChar
 000008B9  88 5C 06 B2		     mov[esi + eax - 78], bl   ;// Limpa posição atual
 000008BD  8A 1D 00000623 R	     mov bl, MonstroChar
 000008C3  88 1C 06		     mov[esi + eax], bl ; // Adiciona o heroi na nova posição
 000008C6  EB 70		     jmp EndMov

 000008C8			MovLeft :
 000008C8  66| FF 0D		     dec PosMonstro
	   0000064D R
 000008CF  66| A1		     mov ax, PosMonstro
	   0000064D R
 000008D5  8A 1D 00000621 R	     mov bl, vazioChar
 000008DB  88 5C 06 01		     mov[esi + eax + 1], bl;// Limpa posição atual
 000008DF  8A 1D 00000623 R	     mov bl, MonstroChar
 000008E5  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 000008E8  49			     dec ecx
 000008E9  EB 4D		     jmp EndMov

 000008EB			MovRight :
 000008EB  66| FF 05		     inc PosMonstro
	   0000064D R
 000008F2  66| A1		     mov ax, PosMonstro
	   0000064D R
 000008F8  8A 1D 00000621 R	     mov bl, vazioChar
 000008FE  88 5C 06 FF		     mov[esi + eax - 1], bl;// Limpa posição atual
 00000902  8A 1D 00000623 R	     mov bl, MonstroChar
 00000908  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 0000090B  EB 2B		     jmp EndMov

 0000090D			colisaoHeroi:
 0000090D  0F B6 1D		     movzx ebx, Level
	   00000624 R
 00000914  66| 39 1D		     cmp Health, bx   ;// compara a vida atual com o dano (dano=level)
	   0000062E R
 0000091B  76 09		     jbe Fatal
 0000091D  66| 29 1D		     sub Health, bx ;// dá dano caso não seja fatal
	   0000062E R
 00000924  EB 12		     jmp EndMov

 00000926			fatal:
 00000926  66| C7 05		     mov Health, 0
	   0000062E R
	   0000
 0000092F  C6 05 0000064C R	     mov isDead, 1
	   01
 00000936  EB 00		     jmp EndMov


 00000938			EndMov:
				     ret
 00000938  5B		   *	    pop    ebx
 00000939  58		   *	    pop    eax
 0000093A  5E		   *	    pop    esi
 0000093B  C3		   *	    ret    00000h
 0000093C			MonstroMoveCheck ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PlayerMove
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Lê a entrada do jogador e move o personagem
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000093C			PlayerMove PROC uses eax esi edx ebx 
				         
 0000093C  50		   *	    push   eax
 0000093D  56		   *	    push   esi
 0000093E  52		   *	    push   edx
 0000093F  53		   *	    push   ebx
 00000940  BE 00000002 R	     mov esi, OFFSET Map    

 00000945			KeyWait:
 00000945  B8 00000032		     mov eax, 50
 0000094A  E8 00000000 E	     call Delay; // Sleep para timeslice
 0000094F  E8 00000000 E	     call ReadKey
 00000954  74 EF		     jz KeyWait

 00000956  66| 83 FA 26		     cmp  dx, 0026h
 0000095A  74 22		     je KeyUp
 0000095C  66| 83 FA 25		     cmp dx, 0025h
 00000960  74 7C		     je KeyLeft
 00000962  66| 83 FA 27		     cmp dx, 0027h
 00000966  0F 84 000000AD	     je KeyRight
 0000096C  66| 83 FA 28		     cmp dx, 0028h
 00000970  74 3A		     je KeyDown
 00000972  66| 83 FA 51		     cmp dx, 0051h
 00000976  0F 84 00000235	     je Quit
 0000097C  EB C7		     jmp KeyWait

 0000097E			KeyUp:
 0000097E  66| A1		     mov ax, posHeroi
	   0000061A R
 00000984  66| 83 F8 4D		     cmp ax, 77
 00000988  76 BB		     jbe KeyWait      ;// Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000098A  83 E8 4E		     sub eax, 78
 0000098D  8A 1D 00000620 R	     mov bl, paredeChar
 00000993  38 1C 06		     cmp [esi + eax], bl
 00000996  74 AD		     je KeyWait
				     ;// Move caso válido
 00000998  8A 1D 00000621 R	     mov bl, vazioChar
 0000099E  38 1C 06		     cmp[esi + eax], bl
 000009A1  0F 84 000000DC	     je MovUp
				     ;// Outras colisões
 000009A7  E9 000000AA		     jmp colisao

 000009AC			KeyDown:
 000009AC  66| A1		     mov ax, posHeroi
	   0000061A R
 000009B2  66| BB 05CA		     mov bx, 1482
 000009B6  66| 3B C3		     cmp ax, bx
 000009B9  73 8A		     jae KeyWait;   // Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 000009BB  83 C0 4E		     add eax, 78
 000009BE  8A 1D 00000620 R	     mov bl, paredeChar
 000009C4  38 1C 06		     cmp[esi + eax], bl
 000009C7  0F 84 FFFFFF78	     je KeyWait
				     ;// Move caso válido
 000009CD  8A 1D 00000621 R	     mov bl, vazioChar
 000009D3  38 1C 06		     cmp[esi + eax], bl
 000009D6  0F 84 000000CD	     je MovDown
 000009DC  EB 78		     jmp colisao

 000009DE			KeyLeft:
 000009DE  66| A1		     mov ax, PosHeroi
	   0000061A R
 000009E4  B3 4E		     mov bl, 78
 000009E6  F6 F3		     div bl             ;// pos/78 - Resto fica em AH
 000009E8  80 FC 00		     cmp ah, 0
 000009EB  0F 84 FFFFFF54	     je KeyWait         ;// se pos%78 = 0, então não é valido

 000009F1  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 000009F7  66| 48		     dec ax
 000009F9  8A 1D 00000620 R	     mov bl, paredeChar
 000009FF  38 1C 06		     cmp [esi+eax], bl
 00000A02  0F 84 FFFFFF3D	     je KeyWait
				     ;// Move caso válido
 00000A08  8A 1D 00000621 R	     mov bl, vazioChar
 00000A0E  38 1C 06		     cmp [esi + eax], bl
 00000A11  0F 84 000000B8	     je MovLeft
 00000A17  EB 3D		     jmp colisao

 00000A19			KeyRight:
 00000A19  66| A1		     mov ax, PosHeroi
	   0000061A R
 00000A1F  66| 40		     inc ax         ;// ax = pos+1
 00000A21  B3 4E		     mov bl, 78
 00000A23  F6 F3		     div bl         ;// (pos+1)/78 - Resto fica em AH
 00000A25  80 FC 00		     cmp ah, 0
 00000A28  0F 84 FFFFFF17	     je KeyWait     ;// se (pos+1)%78 = 0, então não é valido

 00000A2E  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 00000A34  66| 40		     inc ax
 00000A36  8A 1D 00000620 R	     mov bl, paredeChar
 00000A3C  38 1C 06		     cmp[esi + eax], bl
 00000A3F  0F 84 FFFFFF00	     je KeyWait
				     ;// Move caso válido
 00000A45  8A 1D 00000621 R	     mov bl, vazioChar
 00000A4B  38 1C 06		     cmp[esi + eax], bl
 00000A4E  0F 84 000000A0	     je MovRight
 00000A54  EB 00		     jmp colisao

 00000A56			Colisao:
				     ;// Colisão com escada
 00000A56  8A 1D 0000061F R	     mov bl, EscadaChar
 00000A5C  38 1C 06		     cmp[esi + eax], bl
 00000A5F  0F 84 000000B4	     je colisaoEscada
				     ;// Colisão com bau
 00000A65  8A 1D 00000622 R	     mov bl, BauChar
 00000A6B  38 1C 06		     cmp[esi + eax], bl
 00000A6E  0F 84 000000B1	     je colisaoBau
					;// Colisão com monstro
 00000A74  8A 1D 00000623 R	     mov bl, MonstroChar
 00000A7A  38 1C 06		     cmp[esi + eax], bl
 00000A7D  0F 84 000000BF	     je colisaoMonstro
					

 00000A83			MovUp:
 00000A83  66| 83 2D		     sub posHeroi, 78
	   0000061A R 4E
 00000A8B  66| A1		     mov ax, posHeroi
	   0000061A R
 00000A91  8A 1D 00000621 R	     mov bl, vazioChar
 00000A97  88 5C 06 4E		     mov [esi + eax + 78], bl   ;// Limpa posição atual
 00000A9B  8A 1D 0000061C R	     mov bl, HeroiChar
 00000AA1  88 1C 06		     mov [esi + eax], bl ; // Adiciona o heroi na nova posição
 00000AA4  E9 00000111		     jmp EndInput

 00000AA9			MovDown :
 00000AA9  66| 83 05		     add posHeroi, 78
	   0000061A R 4E
 00000AB1  66| A1		     mov ax, posHeroi
	   0000061A R
 00000AB7  8A 1D 00000621 R	     mov bl, vazioChar
 00000ABD  88 5C 06 B2		     mov[esi + eax - 78], bl   ;// Limpa posição atual
 00000AC1  8A 1D 0000061C R	     mov bl, HeroiChar
 00000AC7  88 1C 06		     mov[esi + eax], bl ; // Adiciona o heroi na nova posição
 00000ACA  E9 000000EB		     jmp EndInput

 00000ACF			MovLeft :
 00000ACF  66| FF 0D		     dec posHeroi
	   0000061A R
 00000AD6  66| A1		     mov ax, posHeroi
	   0000061A R
 00000ADC  8A 1D 00000621 R	     mov bl, vazioChar
 00000AE2  88 5C 06 01		     mov[esi + eax + 1], bl;// Limpa posição atual
 00000AE6  8A 1D 0000061C R	     mov bl, HeroiChar
 00000AEC  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 00000AEF  E9 000000C6		     jmp EndInput

 00000AF4			MovRight :
 00000AF4  66| FF 05		     inc posHeroi
	   0000061A R
 00000AFB  66| A1		     mov ax, posHeroi
	   0000061A R
 00000B01  8A 1D 00000621 R	     mov bl, vazioChar
 00000B07  88 5C 06 FF		     mov[esi + eax - 1], bl;// Limpa posição atual
 00000B0B  8A 1D 0000061C R	     mov bl, HeroiChar
 00000B11  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 00000B14  E9 000000A1		     jmp EndInput

 00000B19			colisaoEscada:
 00000B19  C6 05 00000625 R	     mov inStairs, 1
	   01
 00000B20  E9 00000095		     jmp EndInput

 00000B25			colisaoBau:
 00000B25  8A 1D 00000621 R	     mov bl, VazioChar
 00000B2B  88 1C 06		     mov [esi+eax], bl ;// Limpa a posição do bau
 00000B2E  B8 00000002		     mov eax, 2
 00000B33  E8 00000000 E	     call RandomRange
				     ;// Adiciona Ouro
 00000B38  83 F8 00		     cmp eax, 0
 00000B3B  74 40		     je addGold
				     ;// Adiciona vida
 00000B3D  83 F8 01		     cmp eax, 1
 00000B40  74 55		     je addHealth

 00000B42			colisaoMonstro:
 00000B42  0F B6 1D		     movzx ebx, Level
	   00000624 R
 00000B49  66| 39 1D		     cmp Health, bx   ;// compara a vida atual com o dano (dano=level)
	   0000062E R
 00000B50  76 19		     jbe Fatal
 00000B52  66| 29 1D		     sub Health, bx
	   0000062E R
 00000B59  66| 01 1D		     add Gold, bx
	   00000643 R
 00000B60  8A 1D 00000621 R	     mov bl, VazioChar
 00000B66  88 1C 06		     mov [esi+eax], bl ;// Remove o monstro
 00000B69  EB 4F		     jmp EndInput
 00000B6B			fatal:
 00000B6B  66| C7 05		     mov Health, 0
	   0000062E R
	   0000
 00000B74  C6 05 0000064C R	     mov isDead, 1
	   01
 00000B7B  EB 3D		     jmp EndInput

 00000B7D			addGold:
 00000B7D  B8 00000003		     mov eax, 3          
 00000B82  E8 00000000 E	     call RandomRange    
 00000B87  40			     inc eax             ;// gera um número aleatório entre 1 e 3
 00000B88  F6 25 00000624 R	     mul Level           ;// multiplica pelo level e adiciona no ouro
 00000B8E  66| 01 05		     add Gold, ax
	   00000643 R
 00000B95  EB 23		     jmp EndInput

 00000B97			addHealth:
 00000B97  A0 00000624 R	     mov al, Level
 00000B9C  E8 00000000 E	     call RandomRange              ;// gera um numero aleatorio entre 1 e o Level atual
 00000BA1  40			     inc eax
 00000BA2  03 05 00000624 R	     add eax, dword PTR Level      ;// adiciona o level atual e adiciona o resultado como vida
 00000BA8  66| 01 05		     add Health, ax
	   0000062E R
 00000BAF  EB 09		     jmp EndInput

 00000BB1			Quit:
 00000BB1  C6 05 0000064C R	     mov isDead, 1
	   01
 00000BB8  EB 00		     jmp EndInput

 00000BBA			EndInput:     
				     ret
 00000BBA  5B		   *	    pop    ebx
 00000BBB  5A		   *	    pop    edx
 00000BBC  5E		   *	    pop    esi
 00000BBD  58		   *	    pop    eax
 00000BBE  C3		   *	    ret    00000h
 00000BBF			PlayerMove ENDP


				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: main
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Procedimento principal do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000BBF			main PROC
 00000BBF  E8 00000000 E	     call Randomize;// Randomiza a seed
					invoke SetConsoleTitle, OFFSET ctitle	;// Muda o título do terminal
 00000BC4  68 00000664 R   *	    push   dword  ptr OFFSET FLAT: ctitle
 00000BC9  E8 00000000 E   *	    call   SetConsoleTitleA
 00000BCE  E8 FFFFF42D			call HideCursor							;// Esconde o cursor piscante
 00000BD3  B1 00			mov cl, 0								;// Inicia o seletor do menu na primeira opção
 00000BD5  E8 FFFFF45D			call ShowMenu							;// Mostra o menu principal

 00000BDA			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    07/01/18 22:56:14
MASMorra.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001878 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000BDA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChangeMenuSel  . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000025 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DoMenuSel  . . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 00000076 Public STDCALL
  opNovoJogo . . . . . . . . . .	L Near	 000000E7 _TEXT	
  opConquistas . . . . . . . . .	L Near	 000000F5 _TEXT	
  opAjuda  . . . . . . . . . . .	L Near	 00000106 _TEXT	
  opConfig . . . . . . . . . . .	L Near	 00000117 _TEXT	
  MenuRetWait  . . . . . . . . .	L Near	 00000126 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GeraMapa . . . . . . . . . . . .	P Near	 0000042B _TEXT	Length= 000001DF Public STDCALL
  WL1  . . . . . . . . . . . . .	L Near	 00000473 _TEXT	
  MoveNorth  . . . . . . . . . .	L Near	 000004D6 _TEXT	
  MNC  . . . . . . . . . . . . .	L Near	 000004DE _TEXT	
  NowriteN . . . . . . . . . . .	L Near	 00000505 _TEXT	
  MoveEast . . . . . . . . . . .	L Near	 0000050C _TEXT	
  MEC  . . . . . . . . . . . . .	L Near	 00000514 _TEXT	
  NowriteE . . . . . . . . . . .	L Near	 0000054C _TEXT	
  MoveSouth  . . . . . . . . . .	L Near	 00000553 _TEXT	
  MSC  . . . . . . . . . . . . .	L Near	 0000055B _TEXT	
  NowriteS . . . . . . . . . . .	L Near	 0000058A _TEXT	
  MoveWest . . . . . . . . . . .	L Near	 00000591 _TEXT	
  MWC  . . . . . . . . . . . . .	L Near	 00000599 _TEXT	
  NowriteW . . . . . . . . . . .	L Near	 000005CF _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000005D6 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public STDCALL
InsertBaus . . . . . . . . . . .	P Near	 0000060A _TEXT	Length= 0000002D Public STDCALL
  random . . . . . . . . . . . .	L Near	 0000061A _TEXT	
  addBau . . . . . . . . . . . .	L Near	 0000062B _TEXT	
InsertMonstros . . . . . . . . .	P Near	 00000637 _TEXT	Length= 00000049 Public STDCALL
  random . . . . . . . . . . . .	L Near	 00000653 _TEXT	
  addMonstro . . . . . . . . . .	L Near	 00000674 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LimpaTela  . . . . . . . . . . .	P Near	 0000013D _TEXT	Length= 00000057 Public STDCALL
  LLP1 . . . . . . . . . . . . .	L Near	 00000160 _TEXT	
  LLP2 . . . . . . . . . . . . .	L Near	 0000016F _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGame . . . . . . . . . . . .	P Near	 00000680 _TEXT	Length= 0000008C Public STDCALL
  InitAll  . . . . . . . . . . .	L Near	 00000682 _TEXT	
  InitLevel  . . . . . . . . . .	L Near	 000006A2 _TEXT	
  gameloop . . . . . . . . . . .	L Near	 000006B6 _TEXT	
  NextLevel  . . . . . . . . . .	L Near	 000006ED _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 00000709 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MonstroMoveCheck . . . . . . . .	P Near	 0000072D _TEXT	Length= 0000020F Public STDCALL
  Dir  . . . . . . . . . . . . .	L Near	 00000737 _TEXT	
  MonUp  . . . . . . . . . . . .	L Near	 0000075E _TEXT	
  MonDown  . . . . . . . . . . .	L Near	 00000795 _TEXT	
  MonLeft  . . . . . . . . . . .	L Near	 000007CB _TEXT	
  MonRight . . . . . . . . . . .	L Near	 00000806 _TEXT	
  Colisao  . . . . . . . . . . .	L Near	 00000843 _TEXT	
  MovUp  . . . . . . . . . . . .	L Near	 0000087C _TEXT	
  MovDown  . . . . . . . . . . .	L Near	 000008A5 _TEXT	
  MovLeft  . . . . . . . . . . .	L Near	 000008C8 _TEXT	
  MovRight . . . . . . . . . . .	L Near	 000008EB _TEXT	
  colisaoHeroi . . . . . . . . .	L Near	 0000090D _TEXT	
  fatal  . . . . . . . . . . . .	L Near	 00000926 _TEXT	
  EndMov . . . . . . . . . . . .	L Near	 00000938 _TEXT	
MoveMonstros . . . . . . . . . .	P Near	 0000070C _TEXT	Length= 00000021 Public STDCALL
  Scan . . . . . . . . . . . . .	L Near	 0000071C _TEXT	
  Monstro  . . . . . . . . . . .	L Near	 00000725 _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 0000072C _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayerMove . . . . . . . . . . .	P Near	 0000093C _TEXT	Length= 00000283 Public STDCALL
  KeyWait  . . . . . . . . . . .	L Near	 00000945 _TEXT	
  KeyUp  . . . . . . . . . . . .	L Near	 0000097E _TEXT	
  KeyDown  . . . . . . . . . . .	L Near	 000009AC _TEXT	
  KeyLeft  . . . . . . . . . . .	L Near	 000009DE _TEXT	
  KeyRight . . . . . . . . . . .	L Near	 00000A19 _TEXT	
  Colisao  . . . . . . . . . . .	L Near	 00000A56 _TEXT	
  MovUp  . . . . . . . . . . . .	L Near	 00000A83 _TEXT	
  MovDown  . . . . . . . . . . .	L Near	 00000AA9 _TEXT	
  MovLeft  . . . . . . . . . . .	L Near	 00000ACF _TEXT	
  MovRight . . . . . . . . . . .	L Near	 00000AF4 _TEXT	
  colisaoEscada  . . . . . . . .	L Near	 00000B19 _TEXT	
  colisaoBau . . . . . . . . . .	L Near	 00000B25 _TEXT	
  colisaoMonstro . . . . . . . .	L Near	 00000B42 _TEXT	
  fatal  . . . . . . . . . . . .	L Near	 00000B6B _TEXT	
  addGold  . . . . . . . . . . .	L Near	 00000B7D _TEXT	
  addHealth  . . . . . . . . . .	L Near	 00000B97 _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 00000BB1 _TEXT	
  EndInput . . . . . . . . . . .	L Near	 00000BBA _TEXT	
PrintMapa  . . . . . . . . . . .	P Near	 00000355 _TEXT	Length= 000000B4 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000377 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000385 _TEXT	
  Default  . . . . . . . . . . .	L Near	 000003B4 _TEXT	
  Hero . . . . . . . . . . . . .	L Near	 000003C1 _TEXT	
  Escada . . . . . . . . . . . .	L Near	 000003CF _TEXT	
  Bau  . . . . . . . . . . . . .	L Near	 000003DD _TEXT	
  Monstro  . . . . . . . . . . .	L Near	 000003EB _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000003F9 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetMapa  . . . . . . . . . . .	P Near	 00000409 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000041B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowMenu . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 0000006B Public STDCALL
  MENUL  . . . . . . . . . . . .	L Near	 0000005C _TEXT	
  BAIXO  . . . . . . . . . . . .	L Near	 00000082 _TEXT	
  CIMA . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
drawBordas . . . . . . . . . . .	P Near	 00000194 _TEXT	Length= 0000013A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000215 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000250 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000027E _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 0000029A _TEXT	
drawStatus . . . . . . . . . . .	P Near	 000002CE _TEXT	Length= 00000087 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002ED _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000BBF _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
Attack . . . . . . . . . . . . .	Byte	 00000639 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000050h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EscadaChar . . . . . . . . . . .	Byte	 0000061F _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Gold . . . . . . . . . . . . . .	Word	 00000643 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
Health . . . . . . . . . . . . .	Word	 0000062E _DATA	
HeroiChar  . . . . . . . . . . .	Byte	 0000061C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Level  . . . . . . . . . . . . .	Byte	 00000624 _DATA	
MAPCOLS  . . . . . . . . . . . .	Number	 0000004Eh   
MAPROWS  . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENUQNT  . . . . . . . . . . . .	Number	 00000005h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Map  . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MonstroChar  . . . . . . . . . .	Byte	 00000623 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PosMonstro . . . . . . . . . . .	Word	 0000064D _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 00000019h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StdOut . . . . . . . . . . . . .	DWord	 00000660 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bauChar  . . . . . . . . . . . .	Byte	 00000622 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cci  . . . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000658 _DATA	
ctitle . . . . . . . . . . . . .	Byte	 00000664 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000654 _DATA	
emptyCells . . . . . . . . . . .	Word	 00000650 _DATA	
emptyGoal  . . . . . . . . . . .	Word	 00000652 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inStairs . . . . . . . . . . . .	Byte	 00000625 _DATA	
isDead . . . . . . . . . . . . .	Byte	 0000064C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxLevel . . . . . . . . . . . .	Byte	 0000064F _DATA	
paredeChar . . . . . . . . . . .	Byte	 00000620 _DATA	
passos . . . . . . . . . . . . .	Byte	 00000657 _DATA	
posEscada  . . . . . . . . . . .	Word	 0000061D _DATA	
posHeroi . . . . . . . . . . . .	Word	 0000061A _DATA	
pos  . . . . . . . . . . . . . .	Word	 00000655 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strAttack  . . . . . . . . . . .	Byte	 0000063A _DATA	
strGold  . . . . . . . . . . . .	Byte	 00000645 _DATA	
strHealth  . . . . . . . . . . .	Byte	 00000630 _DATA	
strLevel . . . . . . . . . . . .	Byte	 00000626 _DATA	
telaAjuda  . . . . . . . . . . .	Byte	 00000E36 _DATA	
telaConfig . . . . . . . . . . .	Byte	 00001357 _DATA	
telaConqs  . . . . . . . . . . .	Byte	 00000915 _DATA	
telaMenu . . . . . . . . . . . .	Byte	 0000066D _DATA	
vazioChar  . . . . . . . . . . .	Byte	 00000621 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xMax . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yMax . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
