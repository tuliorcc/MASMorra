Microsoft (R) Macro Assembler Version 14.14.26429.4	    07/01/18 21:24:03
MASMorra.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE CONSTANTES
				;// -------------------------------------------------------------------------
 = 00000050			COLS = 80            ;// Colunas do jogo
 = 00000019			ROWS = 25            ;// Linhas do jogo
 = 0000004E			MAPCOLS = (COLS - 2) ;// Colunas do mapa
 = 00000014			MAPROWS = (ROWS - 5) ;// Linhas do mapa
 = 00000005			MENUQNT = 5			 ;// Quantas opções tem o menu

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE VARIÁVEIS
				;// -------------------------------------------------------------------------
 00000000			.data
				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELA
				;// -------------------------------------------------------------------------
 00000000 50			xMax BYTE COLS      ;// número maximo de colunas
 00000001 19			yMax BYTE ROWS      ;// númer maximo de linhas

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DO MAPA
				;// -------------------------------------------------------------------------
 00000002  00000618 [		Map BYTE MAPCOLS*MAPROWS Dup(?)	;// vetor de (colunas*linhas) posições. 
	    00
	   ]
 0000061A 0000			posHeroi WORD 0						;// Posição atual do heroi
 0000061C E9			HeroiChar BYTE 233
 0000061D 0000			posEscada WORD 0
 0000061F F0			EscadaChar BYTE 240
 00000620 B2			paredeChar BYTE 178
 00000621 20			vazioChar  BYTE ' '
 00000622 FE			bauChar BYTE 254
 00000623 26			MonstroChar BYTE 38

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE E EXIBIÇÃO DE VARIÁVEIS DO JOGO
				;// -------------------------------------------------------------------------
 00000624 00			Level BYTE 0   ;// Nível atual
 00000625 00			inStairs DB 0  ;// Indica se o jogador se encontra na escada
 00000626 4C 45 56 45 4C	strLevel DB 'LEVEL: ',0
	   3A 20 00
 0000062E 000A			Health WORD 10
 00000630 48 45 41 4C 54	strHealth DB 'HEALTH: ',0
	   48 3A 20 00
 00000639 02			Attack BYTE 2
 0000063A 41 54 54 41 43	strAttack DB 'ATTACK: ',0
	   4B 3A 20 00
 00000643 0000			Gold WORD 0
 00000645 47 4F 4C 44 3A	strGold DB 'GOLD: ',0
	   20 00
 0000064C 00			isDead DB 0

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: GERAÇÃO DE MAPAS
				;// -------------------------------------------------------------------------
 0000064D 0000			emptyCells WORD 0
 0000064F 0000			emptyGoal WORD 0
 00000651 00			direction BYTE 0    ;// Direção do corredor [0-Norte, 1-Leste, 2-Sul, 3-Oeste]
 00000652 0000			pos WORD 0          ;// Ponteiro para a posição atual no mapa (0 - 1559)
 00000654 00			passos BYTE 0       ;// Numero de passos que sao dados na geração do mapa

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE DO TERMINAL
				;// -------------------------------------------------------------------------
 00000655 00000000		cci CONSOLE_CURSOR_INFO <>
	   00000000
 0000065D 00000000		StdOut HANDLE ?
 00000661 4D 41 53 4D 6F	ctitle DB 'MASMorra', 0 ;// Título da janela do terminal
	   72 72 61 00

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELAS DO MENU
				;// -------------------------------------------------------------------------

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: MENU PRINCIPAL
				;// -------------------------------------------------------------------------
 0000066A 0D 0A			telaMenu	DB 13, 10
 0000066C  20 20 20 20 20				DB '           __  ___  ___    ____  __  ___', 13, 10
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 5F 20 20
	   5F 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   20 20 5F 5F 5F
	   0D 0A
 00000696  20 20 20 20 20				DB '          /  |/  / / _ |  / __/ /  |/  / ___   ____  ____ ___ _', 13, 10
	   20 20 20 20 20
	   2F 20 20 7C 2F
	   20 20 2F 20 2F
	   20 5F 20 7C 20
	   20 2F 20 5F 5F
	   2F 20 2F 20 20
	   7C 2F 20 20 2F
	   20 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 5F 0D 0A
 000006D7  20 20 20 20 20				DB '         / /|_/ / / __ | _\ \  / /|_/ / / _ \ / __/ / __// _ `/', 13, 10
	   20 20 20 20 2F
	   20 2F 7C 5F 2F
	   20 2F 20 2F 20
	   5F 5F 20 7C 20
	   5F 5C 20 5C 20
	   20 2F 20 2F 7C
	   5F 2F 20 2F 20
	   2F 20 5F 20 5C
	   20 2F 20 5F 5F
	   2F 20 2F 20 5F
	   5F 2F 2F 20 5F
	   20 60 2F 0D 0A
 00000718  20 20 20 20 20				DB '        /_/  /_/ /_/ |_|/___/ /_/  /_/  \___//_/   /_/   \_,_/', 13, 10, 13, 10, 13, 10
	   20 20 20 2F 5F
	   2F 20 20 2F 5F
	   2F 20 2F 5F 2F
	   20 7C 5F 7C 2F
	   5F 5F 5F 2F 20
	   2F 5F 2F 20 20
	   2F 5F 2F 20 20
	   5C 5F 5F 5F 2F
	   2F 5F 2F 20 20
	   20 2F 5F 2F 20
	   20 20 5C 5F 2C
	   5F 2F 0D 0A 0D
	   0A 0D 0A
 0000075C  20 20 20 20 20				DB '                         ____________________ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 0D 0A
 0000078C  20 20 20 20 20				DB '                       / \                   \ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2F 20
	   5C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 20 0D 0A
 000007BD  20 20 20 20 20				DB '                      |  \|    NOVO JOGO     |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   5C 7C 20 20 20
	   20 4E 4F 56 4F
	   20 4A 4F 47 4F
	   20 20 20 20 20
	   7C 0D 0A
 000007ED  20 20 20 20 20				DB '                       \_||    CONQUISTAS    |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 5F
	   7C 7C 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   7C 0D 0A
 0000081D  20 20 20 20 20				DB '                          |    AJUDA         |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 41 4A 55 44
	   41 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 0000084D  20 20 20 20 20				DB '                          |    CONFIGURACOES |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 43 4F 4E 46
	   49 47 55 52 41
	   43 4F 45 53 20
	   7C 0D 0A
 0000087D  20 20 20 20 20				DB '                          |    SAIR          |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 53 41 49 52
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 000008AD  20 20 20 20 20				DB '                          |  ________________|__', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 0D 0A
 000008DF  20 20 20 20 20				DB '                          \_/__________________/', 13, 10, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 2F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 2F 0D 0A
	   00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONQUISTAS
				;// -------------------------------------------------------------------------
 00000912 20 C9			telaConqs	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000964  20 BA 20 20 20				DB 32, 186, '                                  CONQUISTAS                                 ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000009B6  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A08  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A5A  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000AAC  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000AFE  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B50  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000BA2  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000BF4  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C46  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C98  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000CEA  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D3C  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D8E  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000DE0  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: AJUDA
				;// -------------------------------------------------------------------------
 00000E33 20 C9			telaAjuda	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000E85  20 BA 20 20 20				DB 32, 186, '                                    AJUDA                                    ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 4A
	   55 44 41 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000ED7  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F29  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F7B  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000FCD  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000101F  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001071  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000010C3  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001115  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001167  20 BA 20 52 65				DB 32, 186, ' Recursos utilizados:                                                        ', 186, 13, 10
	   63 75 72 73 6F
	   73 20 75 74 69
	   6C 69 7A 61 64
	   6F 73 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000011B9  20 BA 20 20 20				DB 32, 186, '   Biblioteca Irvine (http://www.asmirvine.com)                              ', 186, 13, 10
	   42 69 62 6C 69
	   6F 74 65 63 61
	   20 49 72 76 69
	   6E 65 20 28 68
	   74 74 70 3A 2F
	   2F 77 77 77 2E
	   61 73 6D 69 72
	   76 69 6E 65 2E
	   63 6F 6D 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000120B  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000125D  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000012AF  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001301  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONFIGURAÇÕES
				;// -------------------------------------------------------------------------
 00001354 20 C9			telaConfig	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 000013A6  20 BA 20 20 20				DB 32, 186, '                                 CONFIGURACOES                               ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   43 4F 4E 46 49
	   47 55 52 41 43
	   4F 45 53 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000013F8  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000144A  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000149C  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000014EE  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001540  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001592  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000015E4  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001636  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001688  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000016DA  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000172C  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000177E  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017D0  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001822  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00


				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE PROCEDIMENTOS
				;// -------------------------------------------------------------------------
 00000000			.code

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: HideCursor
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Esconder o cursor piscante do terminal
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000000			HideCursor PROC
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 0000065D R		mov StdOut, eax
					invoke GetConsoleCursorInfo, StdOut, OFFSET cci
 0000000C  68 00000655 R   *	    push   dword  ptr OFFSET FLAT: cci
 00000011  FF 35 0000065D R *	    push   StdOut
 00000017  E8 00000000 E   *	    call   GetConsoleCursorInfo
 0000001C  C7 05 00000659 R		mov cci.bVisible, FALSE
	   00000000
					invoke SetConsoleCursorInfo, StdOut, OFFSET cci
 00000026  68 00000655 R   *	    push   dword  ptr OFFSET FLAT: cci
 0000002B  FF 35 0000065D R *	    push   StdOut
 00000031  E8 00000000 E   *	    call   SetConsoleCursorInfo
 00000036  C3				ret
 00000037			HideCursor ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ShowMenu
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir o menu principal e chamar o controle da seta seletora
				;//  PARÂMETROS: CL - Opção atual do menu
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000037			ShowMenu PROC USES eax esi ebx 
 00000037  50		   *	    push   eax
 00000038  56		   *	    push   esi
 00000039  53		   *	    push   ebx
 0000003A  B8 0000001E			mov eax, yellow + (blue * 16)
 0000003F  E8 00000000 E		call SetTextColor

 00000044  BE 00000000			mov esi, 0	;// Inicia o índice do menu na primeira opção

 00000049  E8 000000EE			call LimpaTela

 0000004E  BA 0000066A R		mov edx, OFFSET telaMenu ;// Imprime a tela inicial do menu
 00000053  E8 00000000 E		call WriteString

 00000058  8A E9			mov ch, cl			;// Copia a seleção atual para chamar ChangeMenuSel
 0000005A  E8 00000049			call ChangeMenuSel	;// Imprime a seta seletora do menu

 0000005F			MENUL:
 0000005F  B8 00000032			mov  eax, 50
 00000064  E8 00000000 E		call Delay
 00000069  E8 00000000 E		call ReadKey	;// Verifica se há uma tecla pressionada
 0000006E  74 EF			jz MENUL
 00000070  80 FC 48			cmp ah, 48h	;// Seta para cima
 00000073  74 23			je CIMA
 00000075  80 FC 50			cmp ah, 50h	;// Seta para baixo
 00000078  74 0E			je BAIXO
 0000007A  80 FC 1C			cmp ah, 1Ch	;// Enter
 0000007D  75 E0			jne MENUL
 0000007F  E8 00000049			call DoMenuSel
					ret
 00000084  5B		   *	    pop    ebx
 00000085  5E		   *	    pop    esi
 00000086  58		   *	    pop    eax
 00000087  C3		   *	    ret    00000h
 00000088			BAIXO :
 00000088  80 F9 04			cmp cl, (MENUQNT - 1)	;// Limitador máximo
 0000008B  74 D2			je MENUL
 0000008D  8A E9			mov ch, cl
 0000008F  FE C5			inc ch
 00000091  E8 00000012			call ChangeMenuSel
 00000096  EB C7			jmp MENUL
 00000098			CIMA :
 00000098  80 F9 00			cmp cl, 0	;// Limitador mínimo
 0000009B  74 C2			je MENUL
 0000009D  8A E9			mov ch, cl
 0000009F  FE CD			dec ch
 000000A1  E8 00000002			call ChangeMenuSel
 000000A6  EB B7			jmp MENUL
 000000A8			ShowMenu ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ChangeMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir a seta seletora do menu
				;//  PARÂMETROS:  CH - Nova Opção Selecionada
				;//  RETORNO: CL - Opção Selecionada
				;// -------------------------------------------------------------------------
 000000A8			ChangeMenuSel PROC
 000000A8  B2 1D			mov dl, 29			;// pos X da seta
 000000AA  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000AC  02 F1			add dh, cl			;// pos Y da seta(atual)
 000000AE  E8 00000000 E		call Gotoxy
 000000B3  B0 20			mov al, 32			;// ASCII: Espaço
 000000B5  E8 00000000 E		call WriteChar		;// Limpa a seleção anterior
 000000BA  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000BC  02 F5			add dh, ch			;// pos Y da seta(nova)
 000000BE  E8 00000000 E		call Gotoxy
 000000C3  B0 AF			mov al, 175			;// ASCII: Seta
 000000C5  E8 00000000 E		call WriteChar		;// Escreve o indicador do menu
 000000CA  8A CD			mov cl, ch			;// Troca a opção atual
 000000CC  C3				ret
 000000CD			ChangeMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: DoMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Verificar a opção selecionada no menu e agir de acordo
				;//  PARÂMETROS:  CL - Opção Selecionada
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000000CD			DoMenuSel PROC
 000000CD  80 F9 00			cmp cl, 0
 000000D0  74 1B			je opNovoJogo
 000000D2  80 F9 01			cmp cl, 1
 000000D5  74 1D			je opConquistas
 000000D7  80 F9 02			cmp cl, 2
 000000DA  74 29			je opAjuda
 000000DC  80 F9 03			cmp cl, 3
 000000DF  74 35			je opConfig
				;// SELEÇÃO DO MENU: Sair
 000000E1  E8 00000056			call LimpaTela
					invoke ExitProcess, 0
 000000E6  6A 00	   *	    push   +000000000h
 000000E8  E8 00000000 E   *	    call   ExitProcess
				;// SELEÇÃO DO MENU: Novo Jogo
 000000ED			opNovoJogo:
 000000ED  E8 0000057D		          call MainGame
 000000F2  EB 31				jmp MenuRetWait 
				;// SELEÇÃO DO MENU: Conquistas
 000000F4			opConquistas:
 000000F4  E8 00000043				call LimpaTela
 000000F9  BA 00000912 R			mov edx, OFFSET telaConqs
 000000FE  E8 00000000 E			call WriteString
 00000103  EB 20				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Ajuda
 00000105			opAjuda:
 00000105  E8 00000032				call LimpaTela
 0000010A  BA 00000E33 R			mov edx, OFFSET telaAjuda
 0000010F  E8 00000000 E			call WriteString
 00000114  EB 0F				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Configurações
 00000116			opConfig:
 00000116  E8 00000021				call LimpaTela
 0000011B  BA 00001354 R			mov edx, OFFSET telaConfig
 00000120  E8 00000000 E			call WriteString
				;// Para telas do menu que aguardam uma tecla para retornar
 00000125			MenuRetWait:
 00000125  B8 00000032				mov  eax, 50
 0000012A  E8 00000000 E			call Delay
 0000012F  E8 00000000 E			call ReadKey	;// Verifica se há uma tecla pressionada
 00000134  74 EF				jz MenuRetWait
 00000136  E8 FFFFFEFC				call ShowMenu   ;// Retorna ao menu principal
 0000013B  C3					ret
 0000013C			DoMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: LimpaTela
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Limpar a tela, escrevendo o caracter " " (espaço) em toda a 
				;//			   matriz do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000013C			LimpaTela PROC USES eax ecx edx
 0000013C  50		   *	    push   eax
 0000013D  51		   *	    push   ecx
 0000013E  52		   *	    push   edx
 0000013F  B8 00000000			mov eax, black + (black * 16) ;// Para a função SETTEXTCOLOR deve ser passado al, onde os 4 bits HSB é a cor de fundo e os 4 LSB são a cor da letra, a multiplicação por 16 é equivalente a dar um shift de 4 bits para a esquerda
 00000144  E8 00000000 E		call SETTEXTCOLOR ;// Função Irvine : Configura a cor do texto recebendo como parâmetro o registrador eax
 00000149  B2 00			mov dl, 0 ;// Move o cursor para a posição 0, 0
 0000014B  B6 00			mov dh, 0
 0000014D  E8 00000000 E		call GOTOXY ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 00000152  0F B6 0D			movzx ecx, yMax ;// Inicializa o contador do loop com a quantidade de linhas
	   00000001 R
 00000159  41				inc ecx
 0000015A  A0 00000621 R		mov al, vazioChar

 0000015F			LLP1 :
 0000015F  B2 00			mov dl, 0
 00000161  E8 00000000 E		call GOTOXY
 00000166  51				push ecx
 00000167  0F B6 0D			movzx ecx, xMax ;// Inicializa o contador do loop com a quantidade de colunhas
	   00000000 R
 0000016E			LLP2 :
 0000016E  E8 00000000 E		call WRITECHAR ;// Função Irvine : Escreve um caracter no terminal, tMaxX * tMaxY vezes(declarado de forma a ser dois loops aninhados)
 00000173  FE C2			inc dl
 00000175  E2 F7			loop LLP2

 00000177  FE C6			inc dh
 00000179  59				pop ecx
 0000017A  E2 E3			loop LLP1

 0000017C  B8 0000000F			mov eax, white + (black * 16)
 00000181  E8 00000000 E		call SETTEXTCOLOR
 00000186  B2 00			mov dl, 0
 00000188  B6 00			mov dh, 0
 0000018A  E8 00000000 E		call GOTOXY
					ret
 0000018F  5A		   *	    pop    edx
 00000190  59		   *	    pop    ecx
 00000191  58		   *	    pop    eax
 00000192  C3		   *	    ret    00000h

 00000193			LimpaTela ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawBordas
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha as bordas do jogo com o caracter "/" em vermelho
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//				 yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000193			drawBordas PROC uses eax ecx edx 
 00000193  50		   *	    push   eax
 00000194  51		   *	    push   ecx
 00000195  52		   *	    push   edx
 00000196  B8 00000008		     mov eax, gray + (black * 16)
 0000019B  E8 00000000 E	     call SetTextColor

				     ;// -------------------- Imprime a borda superior do mapa
 000001A0  B0 C9		     mov al, 201
 000001A2  E8 00000000 E	     call WriteChar

 000001A7  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 000001AE  83 E9 02		     sub ecx, 2
 000001B1  B0 CD		     mov al, 205
 000001B3			L1:
 000001B3  E8 00000000 E	     call WriteChar
 000001B8  E2 F9		     loop L1

 000001BA  B0 BB		     mov al, 187
 000001BC  E8 00000000 E	     call WriteChar

				     ;// ------------------- Imprime as bordas laterais do mapa
 000001C1  B0 BA		     mov al, 186
 000001C3  0F B6 0D		     movzx ecx, yMax                  
	   00000001 R
 000001CA  83 E9 04		     sub ecx, 4
 000001CD  B6 01		     mov dh, 1
 000001CF			L2:
 000001CF  B2 00		     mov dl, 0
 000001D1  E8 00000000 E	     call GotoXY
 000001D6  E8 00000000 E	     call WriteChar
 000001DB  8A 15 00000000 R	     mov dl, xMax
 000001E1  FE CA		     dec dl
 000001E3  E8 00000000 E	     call GotoXY
 000001E8  E8 00000000 E	     call WriteChar
 000001ED  FE C6		     inc dh
 000001EF  E2 DE		     loop L2

				     ;// ------------------ Imprime a borda de baixo do mapa
 000001F1  B2 00		     mov dl, 0
 000001F3  8A 35 00000001 R	     mov dh, yMax
 000001F9  80 EE 04		     sub dh, 4
 000001FC  E8 00000000 E	     call GotoXY
				     
 00000201  B0 C8		     mov al, 200
 00000203  E8 00000000 E	     call WriteChar

 00000208  0F B6 0D		     movzx ecx, xMax  
	   00000000 R
 0000020F  83 E9 02		     sub ecx, 2
 00000212  B0 CD		     mov al, 205

 00000214			L3:
 00000214  E8 00000000 E	     call WriteChar
 00000219  E2 F9		     loop L3

 0000021B  B0 BC		     mov al, 188
 0000021D  E8 00000000 E	     call WriteChar

 00000222  B8 00000004		     mov eax, red + (black * 16)
 00000227  E8 00000000 E	     call SetTextColor


				     ;// --------------------Imprime a borda superior do status
 0000022C  B0 C9		     mov al, 201
 0000022E  B2 00		     mov dl, 0
 00000230  8A 35 00000001 R	     mov dh, yMax
 00000236  80 EE 03		     sub dh, 3
 00000239  E8 00000000 E	     call GotoXY
 0000023E  E8 00000000 E	     call WriteChar
 00000243  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 0000024A  83 E9 02		     sub ecx, 2
 0000024D  B0 CF		     mov al, 207
 0000024F			L4:
 0000024F  E8 00000000 E	     call WriteChar
 00000254  E2 F9		     loop L4

 00000256  B0 BB		     mov al, 187
 00000258  E8 00000000 E	     call WriteChar

				     ;// ------------------Imprime a borda de baixo do status
 0000025D  B0 C8		     mov al, 200
 0000025F  B2 00		     mov dl, 0
 00000261  8A 35 00000001 R	     mov dh, yMax
 00000267  E8 00000000 E	     call GotoXY
 0000026C  E8 00000000 E	     call writeChar
 00000271  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 00000278  83 E9 02		     sub ecx, 2
 0000027B  B0 D1		     mov al, 209
 0000027D			L5:
 0000027D  E8 00000000 E	     call WriteChar
 00000282  E2 F9		     loop L5
				          
 00000284  B0 BC		     mov al, 188
 00000286  E8 00000000 E	     call WriteChar
				     
				     ;// ------------------ Imprime as laterais do status
 0000028B  B9 00000002		     mov ecx, 2
 00000290  8A 35 00000001 R	     mov dh, yMax
 00000296  80 EE 02		     sub dh, 2
 00000299			L6:
 00000299  B2 00		     mov dl, 0
 0000029B  E8 00000000 E	     call GotoXY
 000002A0  B0 B6		     mov al, 182
 000002A2  E8 00000000 E	     call WriteChar
 000002A7  8A 15 00000000 R	     mov dl, xMax
 000002AD  FE CA		     dec dl
 000002AF  E8 00000000 E	     call GotoXY
 000002B4  B0 C7		     mov al, 199
 000002B6  E8 00000000 E	     call WriteChar
 000002BB  FE C6		     inc dh
 000002BD  E2 DA		     loop L6

				     ;// ------- Reseta a cor e retorna
 000002BF  B8 0000000F		     mov eax, white + (black * 16)
 000002C4  E8 00000000 E	     call SetTextColor
				     ret
 000002C9  5A		   *	    pop    edx
 000002CA  59		   *	    pop    ecx
 000002CB  58		   *	    pop    eax
 000002CC  C3		   *	    ret    00000h
 000002CD			drawBordas ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawStatus
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o status do jogo (nível, vida, etc)
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//		       yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000002CD			drawStatus PROC uses eax edx
				     
 000002CD  50		   *	    push   eax
 000002CE  52		   *	    push   edx
 000002CF  B8 0000000F		     mov eax, white+(black*16)
 000002D4  E8 00000000 E	     call SetTextColor

 000002D9  B9 0000004E		     mov ecx, 78
 000002DE  B6 17		     mov dh, 23
 000002E0  B2 01		     mov dl, 1
 000002E2  E8 00000000 E	     call GotoXY
 000002E7  A0 00000621 R	     mov al, VazioChar
 000002EC			L1:  
 000002EC  E8 00000000 E	     call WriteChar
 000002F1  E2 F9		     loop L1


				     ;// ---- LEVEL
 000002F3  B6 17		     mov dh, 23     ;// move para a posição
 000002F5  B2 05		     mov dl, 5
 000002F7  E8 00000000 E	     call GotoXY
 000002FC  BA 00000626 R	     mov edx, OFFSET strLevel
 00000301  E8 00000000 E	     call WriteString
 00000306  A0 00000624 R	     mov al, Level
 0000030B  E8 00000000 E	     call WriteDec
				     
				     ;// ---- HEALTH
 00000310  B6 17		     mov dh, 23     ;// move para a posição
 00000312  B2 19		     mov dl, 25
 00000314  E8 00000000 E	     call GotoXY
 00000319  BA 00000630 R	     mov edx, OFFSET strHealth
 0000031E  E8 00000000 E	     call WriteString
 00000323  66| A1		     mov ax, Health
	   0000062E R
 00000329  E8 00000000 E	     call WriteDec

				     ;// ---- GOLD
 0000032E  B6 17		     mov dh, 23     ;// move para a posição
 00000330  B2 2D		     mov dl, 45
 00000332  E8 00000000 E	     call GotoXY
 00000337  BA 00000645 R	     mov edx, OFFSET strGold
 0000033C  E8 00000000 E	     call WriteString
 00000341  66| A1		     mov ax, Gold
	   00000643 R
 00000347  E8 00000000 E	     call WriteDec

 0000034C  E8 FFFFFCAF		     call HideCursor
				     ret
 00000351  5A		   *	    pop    edx
 00000352  58		   *	    pop    eax
 00000353  C3		   *	    ret    00000h
 00000354			drawStatus ENDP


				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PrintMapa
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o mapa do jogo
				;//  PARÂMETROS: MAPCOLS - Quantidade de colunas no mapa 
				;//				 MAPROWS - Quantidade de linhas no mapa
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000354			PrintMapa PROC USES ecx esi ebx eax edx
				     
 00000354  51		   *	    push   ecx
 00000355  56		   *	    push   esi
 00000356  53		   *	    push   ebx
 00000357  50		   *	    push   eax
 00000358  52		   *	    push   edx
 00000359  B8 00000080		     mov eax, black + (gray * 16)
 0000035E  E8 00000000 E	     call SETTEXTCOLOR
 00000363  B6 00		     mov dh, 0
 00000365  B2 01		     mov dl, 1
 00000367  B9 00000014		     mov ecx, MAPROWS
 0000036C  BE 00000002 R	     mov esi, OFFSET map
 00000371  BB 00000000		     mov ebx, 0
 00000376			L1:
 00000376  80 C6 01		     add dh, 1
 00000379  51			     push ecx                 ;// Guarda ecx
 0000037A  B9 0000004E		     mov ecx, MAPCOLS         ;// ecx = numero de colunas do mapa
 0000037F  E8 00000000 E	     call GOTOXY              ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 00000384			L2:
 00000384  8A 04 1E		     mov al, [esi + ebx]
 00000387  3A 05 0000061C R	     cmp al, HeroiChar
 0000038D  74 31		     je Hero
 0000038F  3A 05 0000061F R	     cmp al, EscadaChar
 00000395  74 37		     je Escada
 00000397  3A 05 00000622 R	     cmp al, BauChar
 0000039D  74 3D		     je Bau
 0000039F  3A 05 00000623 R		cmp al, MonstroChar
 000003A5  74 43		     je Monstro
 000003A7  50			     push eax
 000003A8  B8 00000080		     mov eax, black + (gray * 16);// Volta para a cor padrão
 000003AD  E8 00000000 E	     call SETTEXTCOLOR
 000003B2  58			     pop eax
 000003B3			Default:
 000003B3  E8 00000000 E	     call WriteChar ;// Desenha padrão (parede ou nada)
 000003B8  43			     inc ebx   
 000003B9  E2 C9		     loop L2   
 000003BB  59			     pop ecx
 000003BC  E2 B8		     loop L1
 000003BE  EB 38		     jmp Fim

 000003C0			Hero:
 000003C0  50			     push eax                      ;// guarda 
 000003C1  B8 0000008F		     mov eax, white + (gray * 16)  ;// Seleciona o branco  
 000003C6  E8 00000000 E	     call SETTEXTCOLOR
 000003CB  58			     pop eax
 000003CC  EB E5		     jmp Default

 000003CE			Escada:
 000003CE  50			     push eax                      ;// guarda 
 000003CF  B8 0000008A		     mov eax, lightGreen + (gray * 16)  ;// Seleciona o verde  
 000003D4  E8 00000000 E	     call SETTEXTCOLOR
 000003D9  58			     pop eax
 000003DA  EB D7		     jmp Default

 000003DC			Bau:
 000003DC  50			     push eax                      ;// guarda 
 000003DD  B8 0000008E		     mov eax, yellow + (gray * 16)  ;// Seleciona o amarelo  
 000003E2  E8 00000000 E	     call SETTEXTCOLOR
 000003E7  58			     pop eax
 000003E8  EB C9		     jmp Default

 000003EA			Monstro:
 000003EA  50			     push eax                      ;// guarda 
 000003EB  B8 00000084		     mov eax, red + (gray * 16)  ;// Seleciona o vermelho  
 000003F0  E8 00000000 E	     call SETTEXTCOLOR
 000003F5  58			     pop eax
 000003F6  EB BB		     jmp Default

 000003F8			Fim:    
				     ;// Reseta a cor do print
 000003F8  B8 0000000F		     mov eax, white + (black * 16)
 000003FD  E8 00000000 E	     call SETTEXTCOLOR

				     ret
 00000402  5A		   *	    pop    edx
 00000403  58		   *	    pop    eax
 00000404  5B		   *	    pop    ebx
 00000405  5E		   *	    pop    esi
 00000406  59		   *	    pop    ecx
 00000407  C3		   *	    ret    00000h
 00000408			PrintMapa ENDP

				;// ==============================================================
				;// ResetMapa PROC
				;// Objetivo: Reseta o Mapa, setando todos os bytes do vetor para '#' - parede
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;// Retorna: Sem retorno
				;// ==============================================================
 00000408			ResetMapa PROC uses eax ecx esi
 00000408  50		   *	    push   eax
 00000409  51		   *	    push   ecx
 0000040A  56		   *	    push   esi
 0000040B  B9 00000000		     mov ecx, 0
 00000410  BE 00000002 R	     mov esi, OFFSET Map
 00000415  A0 00000620 R	     mov al, paredeChar
 0000041A			L1:
 0000041A  88 04 0E		     mov [esi+ecx], al
 0000041D  41			     inc ecx
 0000041E  81 F9 00000618	     cmp ecx, LENGTHOF Map
 00000424  72 F4		     jb L1
				     
				     ret
 00000426  5E		   *	    pop    esi
 00000427  59		   *	    pop    ecx
 00000428  58		   *	    pop    eax
 00000429  C3		   *	    ret    00000h
 0000042A			ResetMapa ENDP

				;// ==============================================================
				;// GeraMapa PROC
				;// Objetivo: Gera o Mapa - drunkard walk modificado
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;//          Map     - Mapa (vetor de bytes)
				;//          emptyCells - células vazias no mapa
				;//          emptyGoal - Meta de células vazias
				;//          pos - posição atual na matriz
				;//          direction - direcao que a geracao se movera
				;//          passos - numero de passos que serão dados
				;// Retorna: Sem retorno
				;// ==============================================================
 0000042A			GeraMapa PROC USES eax ebx ecx edx esi
				;// ------------------------- Reseta mapa e variáveis
 0000042A  50		   *	    push   eax
 0000042B  53		   *	    push   ebx
 0000042C  51		   *	    push   ecx
 0000042D  52		   *	    push   edx
 0000042E  56		   *	    push   esi
 0000042F  E8 FFFFFFD4		     call ResetMapa
 00000434  66| C7 05		     mov emptyCells, 0
	   0000064D R
	   0000
				;// ------------------------- Randomiza a meta de células limpas - entre 620 e 950 (aprox. 40 a 60 % do mapa)
 0000043D  B8 000001C3		     mov eax, 451
 00000442  E8 00000000 E	     call RandomRange
 00000447  05 000001F4		     add eax, 500
 0000044C  66| A3		     mov emptyGoal, ax 
	   0000064F R

				;// ------------------------- Define uma posição inicial aleatória NO MEIO DO MAPA e salva em pos
 00000452  BE 00000002 R	     mov esi, OFFSET Map
 00000457  B8 00000209		     mov eax, 521
 0000045C  E8 00000000 E	     call RandomRange
 00000461  05 00000208		     add eax, 520
 00000466  66| A3		     mov pos, ax   
	   00000652 R
 0000046C  66| A3		     mov posHeroi, ax
	   0000061A R

				;// ------------------------- Enquanto Células vazias < Meta
 00000472  66| A1		WL1: mov ax, emptyGoal
	   0000064F R
 00000478  66| 39 05		     cmp emptyCells, ax
	   0000064D R
 0000047F  0F 83 00000150	     jae Fim

				;// ------------------------- Randomiza direção e num. de passos (de 2 a 5)
				     ;----------- Randomiza direção (0-4)
 00000485  B8 00000004		     mov eax, 4
 0000048A  E8 00000000 E	     call RandomRange
 0000048F  A2 00000651 R	     mov direction, al
				     ;// --------- Randomiza número de passos (1-9)
 00000494  B8 00000009		     mov eax, 9
 00000499  E8 00000000 E	     call RandomRange
 0000049E  40			     inc eax
 0000049F  A2 00000654 R	     mov passos, al
				     ;// --------- Verifica direção e salta para o trecho correspondente
 000004A4  BE 00000002 R	     mov esi, OFFSET Map
 000004A9  80 3D 00000651 R	     cmp direction, 0
	   00
 000004B0  74 23		     je MoveNorth
 000004B2  80 3D 00000651 R	     cmp direction, 1
	   01
 000004B9  74 50		     je MoveEast
 000004BB  80 3D 00000651 R	     cmp direction, 2
	   02
 000004C2  0F 84 0000008A	     je MoveSouth
 000004C8  80 3D 00000651 R	     cmp direction, 3
	   03
 000004CF  0F 84 000000BB	     je MoveWest

 000004D5			MoveNorth:
				     ;// ---------- Tira paredes para o norte
 000004D5  33 C9		     xor ecx, ecx
 000004D7  8A 0D 00000654 R	     mov cl, passos
 000004DD			MNC:
 000004DD  66| A1		     mov ax, pos         
	   00000652 R
 000004E3  66| 83 E8 4E		     sub ax, MAPCOLS     ;// Se não pode mover para cima,
 000004E7  78 89		     js WL1              ;// volta para o inicio
				     
 000004E9  66| A3		     mov pos, ax;// salva a nova posição
	   00000652 R

 000004EF  8A 1D 00000621 R	     mov bl, vazioChar
 000004F5  38 1C 06		     cmp[esi + eax], bl
 000004F8  74 0A		     je NowriteN
 000004FA  66| FF 05		     inc emptyCells
	   0000064D R
 00000501  88 1C 06		     mov[esi + eax], bl
 00000504			NowriteN:  
 00000504  E2 D7		     loop MNC
 00000506  E9 FFFFFF67		     jmp WL1

 0000050B			MoveEast:
				     ;// ----------Tira paredes para o leste
 0000050B  33 C9		     xor ecx, ecx
 0000050D  8A 0D 00000654 R	     mov cl, passos
 00000513			MEC: 
 00000513  66| A1		     mov ax, pos
	   00000652 R
 00000519  66| 40		     inc ax       ;// ax = pos+1
 0000051B  B3 4E		     mov bl, 78
 0000051D  F6 F3		     div bl       ;// (pos+1)/78 - Resto fica em AH
 0000051F  80 FC 00		     cmp ah, 0
 00000522  0F 84 FFFFFF4A	     je WL1      ;// se (pos+1)%78 = 0, então não é valido
				     
 00000528  66| A1		     mov ax, pos
	   00000652 R
 0000052E  66| 40		     inc ax
 00000530  66| A3		     mov pos, ax  ;// salva a nova posição
	   00000652 R

 00000536  8A 1D 00000621 R	     mov bl, vazioChar
 0000053C  38 1C 06		     cmp[esi + eax], bl
 0000053F  74 0A		     je NowriteE
 00000541  66| FF 05		     inc emptyCells
	   0000064D R
 00000548  88 1C 06		     mov[esi + eax], bl
 0000054B			NowriteE:  
 0000054B  E2 C6		     loop MEC
 0000054D  E9 FFFFFF20		     jmp WL1


 00000552			MoveSouth:
				     ;// ----------Tira paredes para o sul
 00000552  33 C9		     xor ecx, ecx
 00000554  8A 0D 00000654 R	     mov cl, passos
 0000055A			MSC: 
 0000055A  66| A1		     mov ax, pos
	   00000652 R
 00000560  66| 83 C0 4E		     add ax, MAPCOLS
 00000564  66| 3D 0617		     cmp ax, 1559     ;// Se não pode mover para baixo,
 00000568  0F 87 FFFFFF04	     ja WL1           ;// volta para o inicio

 0000056E  66| A3		     mov pos, ax     ;// salva a nova posição
	   00000652 R

 00000574  8A 1D 00000621 R	     mov bl, vazioChar
 0000057A  38 1C 06		     cmp[esi + eax], bl
 0000057D  74 0A		     je NowriteS
 0000057F  66| FF 05		     inc emptyCells
	   0000064D R
 00000586  88 1C 06		     mov[esi + eax], bl
 00000589			NowriteS:  
 00000589  E2 CF		     loop MSC
 0000058B  E9 FFFFFEE2		     jmp WL1

 00000590			MoveWest:
				     ;// ----------Tira paredes para o oeste
 00000590  33 C9		     xor ecx, ecx
 00000592  8A 0D 00000654 R	     mov cl, passos
 00000598			MWC :
 00000598  66| A1		     mov ax, pos
	   00000652 R
 0000059E  B3 4E		     mov bl, 78
 000005A0  F6 F3		     div bl         ;// pos/78 - Resto fica em AH
 000005A2  80 FC 00		     cmp ah, 0
 000005A5  0F 84 FFFFFEC7	     je WL1         ;// se pos%78 = 0, então não é valido

 000005AB  66| A1		     mov ax, pos
	   00000652 R
 000005B1  66| 48		     dec ax
 000005B3  66| A3		     mov pos, ax    ;// salva a nova posição
	   00000652 R

 000005B9  8A 1D 00000621 R	     mov bl, vazioChar
 000005BF  38 1C 06		     cmp [esi + eax], bl
 000005C2  74 0A		     je NowriteW
 000005C4  66| FF 05		     inc emptyCells
	   0000064D R
 000005CB  88 1C 06		     mov [esi + eax], bl
 000005CE			NowriteW:  
 000005CE  E2 C8		     loop MWC
 000005D0  E9 FFFFFE9D		     jmp WL1



 000005D5			Fim:
				     ;// -------- - Insere a Escada no mapa
 000005D5  66| A1		     mov ax, pos
	   00000652 R
 000005DB  66| A3		     mov posEscada, ax
	   0000061D R
 000005E1  8A 1D 0000061F R	     mov bl, EscadaChar
 000005E7  88 1C 06		     mov [esi+eax], bl

				     ;// -------- - Insere Personagem no mapa
 000005EA  66| A1		     mov ax, posHeroi
	   0000061A R
 000005F0  8A 1D 0000061C R	     mov bl, HeroiChar
 000005F6  88 1C 06		     mov [esi + eax], bl

 000005F9  E8 0000000B		     call InsertBaus
 000005FE  E8 00000033			call InsertMonstros

				     ret
 00000603  5E		   *	    pop    esi
 00000604  5A		   *	    pop    edx
 00000605  59		   *	    pop    ecx
 00000606  5B		   *	    pop    ebx
 00000607  58		   *	    pop    eax
 00000608  C3		   *	    ret    00000h
 00000609			GeraMapa ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: InsertBaus
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Insere os baús no mapa
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000609			InsertBaus PROC
 00000609  BE 00000002 R	     mov esi, OFFSET Map
 0000060E  B9 00000002		     mov ecx, 2
 00000613  8A 1D 00000621 R	     mov bl, VazioChar

 00000619			random:
 00000619  B8 00000619		     mov eax, 1561
 0000061E  E8 00000000 E	     call RandomRange
 00000623  8A 14 06		     mov dl, [esi+eax]
 00000626  3A D3		     cmp dl, bl
 00000628  75 EF		     jne random

 0000062A			addBau:
 0000062A  8A 15 00000622 R	     mov dl, BauChar
 00000630  88 14 06		     mov [esi+eax], dl
 00000633  E2 E4		     loop random

 00000635  C3			     ret
 00000636			InsertBaus ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: InsertMonstros
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Insere os monstros no mapa
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000636			InsertMonstros PROC
 00000636  BE 00000002 R	     mov esi, OFFSET Map
 0000063B  B9 00000005		     mov ecx, 5
 00000640  B8 0000000F		     mov eax, 15
 00000645  E8 00000000 E	     call RandomRange
 0000064A  03 C8		     add ecx, eax
 0000064C  8A 1D 00000621 R	     mov bl, VazioChar

 00000652			random:
 00000652  B8 00000619		     mov eax, 1561
 00000657  E8 00000000 E	     call RandomRange
 0000065C  8A 14 06		     mov dl, [esi+eax]
 0000065F  3A D3		     cmp dl, bl
 00000661  75 EF		     jne random

 00000663			addMonstro:
 00000663  8A 15 00000623 R	     mov dl, MonstroChar
 00000669  88 14 06		     mov [esi+eax], dl
 0000066C  E2 E4		     loop random

 0000066E  C3			     ret
 0000066F			InsertMonstros ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: mainGame
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Loop do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000066F			MainGame PROC
				     
 0000066F			InitAll:
				     ;// Reseta variáveis
 0000066F  C6 05 00000624 R	     mov Level, 1
	   01
 00000676  66| C7 05		     mov Health, 10
	   0000062E R
	   000A
 0000067F  66| C7 05		     mov Gold, 0
	   00000643 R
	   0000
 00000688  C6 05 0000064C R	     mov isDead, 0
	   00

 0000068F			InitLevel:
 0000068F  E8 FFFFFAA8		     call LimpaTela;// Limpa a tela
 00000694  E8 FFFFFAFA		     call drawBordas;// Desenha as bordas do jogo
 00000699  E8 FFFFFD6A		     call ResetMapa;// Reseta o mapa
 0000069E  E8 FFFFFD87		     call GeraMapa;// Gera um novo mapa

 000006A3			gameloop:
 000006A3  E8 FFFFFCAC		     call PrintMapa;// Desenha o mapa
 000006A8  E8 FFFFFC20		     call drawStatus;// Escreve os status
 000006AD  E8 00000024		     call PlayerMove
 000006B2  80 3D 00000625 R	     cmp inStairs, 0
	   00
 000006B9  75 0B		     jne NextLevel
 000006BB  80 3D 0000064C R	     cmp isDead, 0
	   00
 000006C2  75 11		     jne EndGame
 000006C4  EB DD		     jmp gameloop

 000006C6			NextLevel:
 000006C6  C6 05 00000625 R	     mov inStairs, 0
	   00
 000006CD  FE 05 00000624 R	     inc Level
 000006D3  EB BA		     jmp InitLevel
				 
 000006D5			EndGame:

 000006D5  C3			     ret
 000006D6			MainGame ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PlayerMove
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Lê a entrada do jogador e move o personagem
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000006D6			PlayerMove PROC uses eax esi edx ebx 
				         
 000006D6  50		   *	    push   eax
 000006D7  56		   *	    push   esi
 000006D8  52		   *	    push   edx
 000006D9  53		   *	    push   ebx
 000006DA  BE 00000002 R	     mov esi, OFFSET Map    

 000006DF			KeyWait:
 000006DF  B8 00000032		     mov eax, 50
 000006E4  E8 00000000 E	     call Delay; // Sleep para timeslice
 000006E9  E8 00000000 E	     call ReadKey
 000006EE  74 EF		     jz KeyWait

 000006F0  66| 83 FA 26		     cmp  dx, 0026h
 000006F4  74 18		     je KeyUp
 000006F6  66| 83 FA 25		     cmp dx, 0025h
 000006FA  74 6E		     je KeyLeft
 000006FC  66| 83 FA 27		     cmp dx, 0027h
 00000700  0F 84 0000009F	     je KeyRight
 00000706  66| 83 FA 28		     cmp dx, 0028h
 0000070A  74 30		     je KeyDown
 0000070C  EB D1		     jmp KeyWait

 0000070E			KeyUp:
 0000070E  66| A1		     mov ax, posHeroi
	   0000061A R
 00000714  66| 83 F8 4D		     cmp ax, 77
 00000718  76 C5		     jbe KeyWait      ;// Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000071A  83 E8 4E		     sub eax, 78
 0000071D  8A 1D 00000620 R	     mov bl, paredeChar
 00000723  38 1C 06		     cmp [esi + eax], bl
 00000726  74 B7		     je KeyWait
				     ;// Move caso válido
 00000728  8A 1D 00000621 R	     mov bl, vazioChar
 0000072E  38 1C 06		     cmp[esi + eax], bl
 00000731  0F 84 000000D8	     je MovUp
				     ;// Outras colisões
 00000737  E9 000000A6		     jmp colisao

 0000073C			KeyDown:
 0000073C  66| A1		     mov ax, posHeroi
	   0000061A R
 00000742  66| BB 05CA		     mov bx, 1482
 00000746  66| 3B C3		     cmp ax, bx
 00000749  73 94		     jae KeyWait;   // Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000074B  83 C0 4E		     add eax, 78
 0000074E  8A 1D 00000620 R	     mov bl, paredeChar
 00000754  38 1C 06		     cmp[esi + eax], bl
 00000757  74 86		     je KeyWait
				     ;// Move caso válido
 00000759  8A 1D 00000621 R	     mov bl, vazioChar
 0000075F  38 1C 06		     cmp[esi + eax], bl
 00000762  0F 84 000000CD	     je MovDown
 00000768  EB 78		     jmp colisao

 0000076A			KeyLeft:
 0000076A  66| A1		     mov ax, PosHeroi
	   0000061A R
 00000770  B3 4E		     mov bl, 78
 00000772  F6 F3		     div bl             ;// pos/78 - Resto fica em AH
 00000774  80 FC 00		     cmp ah, 0
 00000777  0F 84 FFFFFF62	     je KeyWait         ;// se pos%78 = 0, então não é valido

 0000077D  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 00000783  66| 48		     dec ax
 00000785  8A 1D 00000620 R	     mov bl, paredeChar
 0000078B  38 1C 06		     cmp [esi+eax], bl
 0000078E  0F 84 FFFFFF4B	     je KeyWait
				     ;// Move caso válido
 00000794  8A 1D 00000621 R	     mov bl, vazioChar
 0000079A  38 1C 06		     cmp [esi + eax], bl
 0000079D  0F 84 000000B8	     je MovLeft
 000007A3  EB 3D		     jmp colisao

 000007A5			KeyRight:
 000007A5  66| A1		     mov ax, PosHeroi
	   0000061A R
 000007AB  66| 40		     inc ax         ;// ax = pos+1
 000007AD  B3 4E		     mov bl, 78
 000007AF  F6 F3		     div bl         ;// (pos+1)/78 - Resto fica em AH
 000007B1  80 FC 00		     cmp ah, 0
 000007B4  0F 84 FFFFFF25	     je KeyWait     ;// se (pos+1)%78 = 0, então não é valido

 000007BA  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 000007C0  66| 40		     inc ax
 000007C2  8A 1D 00000620 R	     mov bl, paredeChar
 000007C8  38 1C 06		     cmp[esi + eax], bl
 000007CB  0F 84 FFFFFF0E	     je KeyWait
				     ;// Move caso válido
 000007D1  8A 1D 00000621 R	     mov bl, vazioChar
 000007D7  38 1C 06		     cmp[esi + eax], bl
 000007DA  0F 84 000000A0	     je MovRight
 000007E0  EB 00		     jmp colisao

 000007E2			Colisao:
				     ;// Colisão com escada
 000007E2  8A 1D 0000061F R	     mov bl, EscadaChar
 000007E8  38 1C 06		     cmp[esi + eax], bl
 000007EB  0F 84 000000B4	     je colisaoEscada
				     ;// Colisão com bau
 000007F1  8A 1D 00000622 R	     mov bl, BauChar
 000007F7  38 1C 06		     cmp[esi + eax], bl
 000007FA  0F 84 000000B1	     je colisaoBau
					;// Colisão com monstro
 00000800  8A 1D 00000623 R	     mov bl, MonstroChar
 00000806  38 1C 06		     cmp[esi + eax], bl
 00000809  0F 84 000000BF	     je colisaoMonstro
					

 0000080F			MovUp:
 0000080F  66| 83 2D		     sub posHeroi, 78
	   0000061A R 4E
 00000817  66| A1		     mov ax, posHeroi
	   0000061A R
 0000081D  8A 1D 00000621 R	     mov bl, vazioChar
 00000823  88 5C 06 4E		     mov [esi + eax + 78], bl   ;// Limpa posição atual
 00000827  8A 1D 0000061C R	     mov bl, HeroiChar
 0000082D  88 1C 06		     mov [esi + eax], bl ; // Adiciona o heroi na nova posição
 00000830  E9 00000101		     jmp EndInput

 00000835			MovDown :
 00000835  66| 83 05		     add posHeroi, 78
	   0000061A R 4E
 0000083D  66| A1		     mov ax, posHeroi
	   0000061A R
 00000843  8A 1D 00000621 R	     mov bl, vazioChar
 00000849  88 5C 06 B2		     mov[esi + eax - 78], bl   ;// Limpa posição atual
 0000084D  8A 1D 0000061C R	     mov bl, HeroiChar
 00000853  88 1C 06		     mov[esi + eax], bl ; // Adiciona o heroi na nova posição
 00000856  E9 000000DB		     jmp EndInput

 0000085B			MovLeft :
 0000085B  66| FF 0D		     dec posHeroi
	   0000061A R
 00000862  66| A1		     mov ax, posHeroi
	   0000061A R
 00000868  8A 1D 00000621 R	     mov bl, vazioChar
 0000086E  88 5C 06 01		     mov[esi + eax + 1], bl;// Limpa posição atual
 00000872  8A 1D 0000061C R	     mov bl, HeroiChar
 00000878  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 0000087B  E9 000000B6		     jmp EndInput

 00000880			MovRight :
 00000880  66| FF 05		     inc posHeroi
	   0000061A R
 00000887  66| A1		     mov ax, posHeroi
	   0000061A R
 0000088D  8A 1D 00000621 R	     mov bl, vazioChar
 00000893  88 5C 06 FF		     mov[esi + eax - 1], bl;// Limpa posição atual
 00000897  8A 1D 0000061C R	     mov bl, HeroiChar
 0000089D  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 000008A0  E9 00000091		     jmp EndInput

 000008A5			colisaoEscada:
 000008A5  C6 05 00000625 R	     mov inStairs, 1
	   01
 000008AC  E9 00000085		     jmp EndInput

 000008B1			colisaoBau:
 000008B1  8A 1D 00000621 R	     mov bl, VazioChar
 000008B7  88 1C 06		     mov [esi+eax], bl ;// Limpa a posição do bau
 000008BA  B8 00000002		     mov eax, 2
 000008BF  E8 00000000 E	     call RandomRange
				     ;// Adiciona Ouro
 000008C4  83 F8 00		     cmp eax, 0
 000008C7  74 39		     je addGold
				     ;// Adiciona vida
 000008C9  83 F8 01		     cmp eax, 1
 000008CC  74 4E		     je addHealth

 000008CE			colisaoMonstro:
 000008CE  0F B6 1D		     movzx ebx, Level
	   00000624 R
 000008D5  66| 39 1D		     cmp Health, bx   ;// compara a vida atual com o dano (dano=level)
	   0000062E R
 000008DC  76 12		     jbe Fatal
 000008DE  66| 29 1D		     sub Health, bx
	   0000062E R
 000008E5  8A 1D 00000621 R	     mov bl, VazioChar
 000008EB  88 1C 06		     mov [esi+eax], bl ;// Remove o monstro
 000008EE  EB 46		     jmp EndInput
 000008F0			fatal:
 000008F0  66| C7 05		     mov Health, 0
	   0000062E R
	   0000
 000008F9  C6 05 0000064C R	     mov isDead, 1
	   01
 00000900  EB 34		     jmp EndInput

 00000902			addGold:
 00000902  B8 00000003		     mov eax, 3          
 00000907  E8 00000000 E	     call RandomRange    
 0000090C  40			     inc eax             ;// gera um número aleatório entre 1 e 3
 0000090D  F6 25 00000624 R	     mul Level           ;// multiplica pelo level e adiciona no ouro
 00000913  66| 01 05		     add Gold, ax
	   00000643 R
 0000091A  EB 1A		     jmp EndInput

 0000091C			addHealth:
 0000091C  A0 00000624 R	     mov al, Level
 00000921  E8 00000000 E	     call RandomRange              ;// gera um numero aleatorio entre 1 e o Level atual
 00000926  40			     inc eax
 00000927  03 05 00000624 R	     add eax, dword PTR Level      ;// adiciona o level atual e adiciona o resultado como vida
 0000092D  66| 01 05		     add Health, ax
	   0000062E R
 00000934  EB 00		     jmp EndInput


 00000936			EndInput:     
				     ret
 00000936  5B		   *	    pop    ebx
 00000937  5A		   *	    pop    edx
 00000938  5E		   *	    pop    esi
 00000939  58		   *	    pop    eax
 0000093A  C3		   *	    ret    00000h
 0000093B			PlayerMove ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: main
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Procedimento principal do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000093B			main PROC
 0000093B  E8 00000000 E	     call Randomize;// Randomiza a seed
					invoke SetConsoleTitle, OFFSET ctitle	;// Muda o título do terminal
 00000940  68 00000661 R   *	    push   dword  ptr OFFSET FLAT: ctitle
 00000945  E8 00000000 E   *	    call   SetConsoleTitleA
 0000094A  E8 FFFFF6B1			call HideCursor							;// Esconde o cursor piscante
 0000094F  B1 00			mov cl, 0								;// Inicia o seletor do menu na primeira opção
 00000951  E8 FFFFF6E1			call ShowMenu							;// Mostra o menu principal

 00000956			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    07/01/18 21:24:03
MASMorra.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001875 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000956 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChangeMenuSel  . . . . . . . . .	P Near	 000000A8 _TEXT	Length= 00000025 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DoMenuSel  . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 0000006F Public STDCALL
  opNovoJogo . . . . . . . . . .	L Near	 000000ED _TEXT	
  opConquistas . . . . . . . . .	L Near	 000000F4 _TEXT	
  opAjuda  . . . . . . . . . . .	L Near	 00000105 _TEXT	
  opConfig . . . . . . . . . . .	L Near	 00000116 _TEXT	
  MenuRetWait  . . . . . . . . .	L Near	 00000125 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GeraMapa . . . . . . . . . . . .	P Near	 0000042A _TEXT	Length= 000001DF Public STDCALL
  WL1  . . . . . . . . . . . . .	L Near	 00000472 _TEXT	
  MoveNorth  . . . . . . . . . .	L Near	 000004D5 _TEXT	
  MNC  . . . . . . . . . . . . .	L Near	 000004DD _TEXT	
  NowriteN . . . . . . . . . . .	L Near	 00000504 _TEXT	
  MoveEast . . . . . . . . . . .	L Near	 0000050B _TEXT	
  MEC  . . . . . . . . . . . . .	L Near	 00000513 _TEXT	
  NowriteE . . . . . . . . . . .	L Near	 0000054B _TEXT	
  MoveSouth  . . . . . . . . . .	L Near	 00000552 _TEXT	
  MSC  . . . . . . . . . . . . .	L Near	 0000055A _TEXT	
  NowriteS . . . . . . . . . . .	L Near	 00000589 _TEXT	
  MoveWest . . . . . . . . . . .	L Near	 00000590 _TEXT	
  MWC  . . . . . . . . . . . . .	L Near	 00000598 _TEXT	
  NowriteW . . . . . . . . . . .	L Near	 000005CE _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000005D5 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public STDCALL
InsertBaus . . . . . . . . . . .	P Near	 00000609 _TEXT	Length= 0000002D Public STDCALL
  random . . . . . . . . . . . .	L Near	 00000619 _TEXT	
  addBau . . . . . . . . . . . .	L Near	 0000062A _TEXT	
InsertMonstros . . . . . . . . .	P Near	 00000636 _TEXT	Length= 00000039 Public STDCALL
  random . . . . . . . . . . . .	L Near	 00000652 _TEXT	
  addMonstro . . . . . . . . . .	L Near	 00000663 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LimpaTela  . . . . . . . . . . .	P Near	 0000013C _TEXT	Length= 00000057 Public STDCALL
  LLP1 . . . . . . . . . . . . .	L Near	 0000015F _TEXT	
  LLP2 . . . . . . . . . . . . .	L Near	 0000016E _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGame . . . . . . . . . . . .	P Near	 0000066F _TEXT	Length= 00000067 Public STDCALL
  InitAll  . . . . . . . . . . .	L Near	 0000066F _TEXT	
  InitLevel  . . . . . . . . . .	L Near	 0000068F _TEXT	
  gameloop . . . . . . . . . . .	L Near	 000006A3 _TEXT	
  NextLevel  . . . . . . . . . .	L Near	 000006C6 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 000006D5 _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayerMove . . . . . . . . . . .	P Near	 000006D6 _TEXT	Length= 00000265 Public STDCALL
  KeyWait  . . . . . . . . . . .	L Near	 000006DF _TEXT	
  KeyUp  . . . . . . . . . . . .	L Near	 0000070E _TEXT	
  KeyDown  . . . . . . . . . . .	L Near	 0000073C _TEXT	
  KeyLeft  . . . . . . . . . . .	L Near	 0000076A _TEXT	
  KeyRight . . . . . . . . . . .	L Near	 000007A5 _TEXT	
  Colisao  . . . . . . . . . . .	L Near	 000007E2 _TEXT	
  MovUp  . . . . . . . . . . . .	L Near	 0000080F _TEXT	
  MovDown  . . . . . . . . . . .	L Near	 00000835 _TEXT	
  MovLeft  . . . . . . . . . . .	L Near	 0000085B _TEXT	
  MovRight . . . . . . . . . . .	L Near	 00000880 _TEXT	
  colisaoEscada  . . . . . . . .	L Near	 000008A5 _TEXT	
  colisaoBau . . . . . . . . . .	L Near	 000008B1 _TEXT	
  colisaoMonstro . . . . . . . .	L Near	 000008CE _TEXT	
  fatal  . . . . . . . . . . . .	L Near	 000008F0 _TEXT	
  addGold  . . . . . . . . . . .	L Near	 00000902 _TEXT	
  addHealth  . . . . . . . . . .	L Near	 0000091C _TEXT	
  EndInput . . . . . . . . . . .	L Near	 00000936 _TEXT	
PrintMapa  . . . . . . . . . . .	P Near	 00000354 _TEXT	Length= 000000B4 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000376 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000384 _TEXT	
  Default  . . . . . . . . . . .	L Near	 000003B3 _TEXT	
  Hero . . . . . . . . . . . . .	L Near	 000003C0 _TEXT	
  Escada . . . . . . . . . . . .	L Near	 000003CE _TEXT	
  Bau  . . . . . . . . . . . . .	L Near	 000003DC _TEXT	
  Monstro  . . . . . . . . . . .	L Near	 000003EA _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000003F8 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetMapa  . . . . . . . . . . .	P Near	 00000408 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000041A _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowMenu . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 00000071 Public STDCALL
  MENUL  . . . . . . . . . . . .	L Near	 0000005F _TEXT	
  BAIXO  . . . . . . . . . . . .	L Near	 00000088 _TEXT	
  CIMA . . . . . . . . . . . . .	L Near	 00000098 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
drawBordas . . . . . . . . . . .	P Near	 00000193 _TEXT	Length= 0000013A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001CF _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000214 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000024F _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000027D _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 00000299 _TEXT	
drawStatus . . . . . . . . . . .	P Near	 000002CD _TEXT	Length= 00000087 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002EC _TEXT	
main . . . . . . . . . . . . . .	P Near	 0000093B _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
Attack . . . . . . . . . . . . .	Byte	 00000639 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000050h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EscadaChar . . . . . . . . . . .	Byte	 0000061F _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Gold . . . . . . . . . . . . . .	Word	 00000643 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
Health . . . . . . . . . . . . .	Word	 0000062E _DATA	
HeroiChar  . . . . . . . . . . .	Byte	 0000061C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Level  . . . . . . . . . . . . .	Byte	 00000624 _DATA	
MAPCOLS  . . . . . . . . . . . .	Number	 0000004Eh   
MAPROWS  . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENUQNT  . . . . . . . . . . . .	Number	 00000005h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Map  . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MonstroChar  . . . . . . . . . .	Byte	 00000623 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 00000019h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StdOut . . . . . . . . . . . . .	DWord	 0000065D _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bauChar  . . . . . . . . . . . .	Byte	 00000622 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cci  . . . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000655 _DATA	
ctitle . . . . . . . . . . . . .	Byte	 00000661 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000651 _DATA	
emptyCells . . . . . . . . . . .	Word	 0000064D _DATA	
emptyGoal  . . . . . . . . . . .	Word	 0000064F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inStairs . . . . . . . . . . . .	Byte	 00000625 _DATA	
isDead . . . . . . . . . . . . .	Byte	 0000064C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
paredeChar . . . . . . . . . . .	Byte	 00000620 _DATA	
passos . . . . . . . . . . . . .	Byte	 00000654 _DATA	
posEscada  . . . . . . . . . . .	Word	 0000061D _DATA	
posHeroi . . . . . . . . . . . .	Word	 0000061A _DATA	
pos  . . . . . . . . . . . . . .	Word	 00000652 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strAttack  . . . . . . . . . . .	Byte	 0000063A _DATA	
strGold  . . . . . . . . . . . .	Byte	 00000645 _DATA	
strHealth  . . . . . . . . . . .	Byte	 00000630 _DATA	
strLevel . . . . . . . . . . . .	Byte	 00000626 _DATA	
telaAjuda  . . . . . . . . . . .	Byte	 00000E33 _DATA	
telaConfig . . . . . . . . . . .	Byte	 00001354 _DATA	
telaConqs  . . . . . . . . . . .	Byte	 00000912 _DATA	
telaMenu . . . . . . . . . . . .	Byte	 0000066A _DATA	
vazioChar  . . . . . . . . . . .	Byte	 00000621 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xMax . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yMax . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
