Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 17:28:29
MASMorra.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE CONSTANTES
				;// -------------------------------------------------------------------------
 = 00000050			COLS = 80            ;// Colunas do jogo
 = 00000019			ROWS = 25            ;// Linhas do jogo
 = 0000004E			MAPCOLS = (COLS - 2) ;// Colunas do mapa
 = 00000014			MAPROWS = (ROWS - 5) ;// Linhas do mapa
 = 00000005			MENUQNT = 5			 ;// Quantas opções tem o menu

				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE VARIÁVEIS
				;// -------------------------------------------------------------------------
 00000000			.data
				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELA
				;// -------------------------------------------------------------------------
 00000000 50			xMax BYTE COLS      ;// número maximo de colunas
 00000001 19			yMax BYTE ROWS      ;// númer maximo de linhas

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE DO MAPA
				;// -------------------------------------------------------------------------
 00000002  00000618 [		Map BYTE MAPCOLS*MAPROWS Dup('#')	;// vetor de (colunas*linhas) posições. 
	    23
	   ]
 0000061A 0000			posHeroi WORD 0						;// Posição atual do heroi
 0000061C 4F			HeroiChar BYTE 'O'

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: GERAÇÃO DE MAPAS
				;// -------------------------------------------------------------------------
 0000061D 0000			emptyCells WORD 0
 0000061F 0000			emptyGoal WORD 0
 00000621 00			direction BYTE 0    ;// Direção do corredor [0-Norte, 1-Leste, 2-Sul, 3-Oeste]
 00000622 0000			pos WORD 0          ;// Ponteiro para a posição atual no mapa (0 - 1559)
 00000624 00			passos BYTE 0       ;// Numero de passos que sao dados na geração do mapa

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: CONTROLE DO TERMINAL
				;// -------------------------------------------------------------------------
 00000625 00000000		cci CONSOLE_CURSOR_INFO <>
	   00000000
 0000062D 00000000		StdOut HANDLE ?
 00000631 4D 41 53 4D 6F	ctitle DB 'MASMorra', 0 ;// Título da janela do terminal
	   72 72 61 00

				;// -------------------------------------------------------------------------
				;//  VARIÁVEIS: TELAS DO MENU
				;// -------------------------------------------------------------------------

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: MENU PRINCIPAL
				;// -------------------------------------------------------------------------
 0000063A 0D 0A			telaMenu	DB 13, 10
 0000063C  20 20 20 20 20				DB '           __  ___  ___    ____  __  ___', 13, 10
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 5F 20 20
	   5F 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   20 20 5F 5F 5F
	   0D 0A
 00000666  20 20 20 20 20				DB '          /  |/  / / _ |  / __/ /  |/  / ___   ____  ____ ___ _', 13, 10
	   20 20 20 20 20
	   2F 20 20 7C 2F
	   20 20 2F 20 2F
	   20 5F 20 7C 20
	   20 2F 20 5F 5F
	   2F 20 2F 20 20
	   7C 2F 20 20 2F
	   20 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 5F 0D 0A
 000006A7  20 20 20 20 20				DB '         / /|_/ / / __ | _\ \  / /|_/ / / _ \ / __/ / __// _ `/', 13, 10
	   20 20 20 20 2F
	   20 2F 7C 5F 2F
	   20 2F 20 2F 20
	   5F 5F 20 7C 20
	   5F 5C 20 5C 20
	   20 2F 20 2F 7C
	   5F 2F 20 2F 20
	   2F 20 5F 20 5C
	   20 2F 20 5F 5F
	   2F 20 2F 20 5F
	   5F 2F 2F 20 5F
	   20 60 2F 0D 0A
 000006E8  20 20 20 20 20				DB '        /_/  /_/ /_/ |_|/___/ /_/  /_/  \___//_/   /_/   \_,_/', 13, 10, 13, 10, 13, 10
	   20 20 20 2F 5F
	   2F 20 20 2F 5F
	   2F 20 2F 5F 2F
	   20 7C 5F 7C 2F
	   5F 5F 5F 2F 20
	   2F 5F 2F 20 20
	   2F 5F 2F 20 20
	   5C 5F 5F 5F 2F
	   2F 5F 2F 20 20
	   20 2F 5F 2F 20
	   20 20 5C 5F 2C
	   5F 2F 0D 0A 0D
	   0A 0D 0A
 0000072C  20 20 20 20 20				DB '                         ____________________ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 0D 0A
 0000075C  20 20 20 20 20				DB '                       / \                   \ ', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2F 20
	   5C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 20 0D 0A
 0000078D  20 20 20 20 20				DB '                      |  \|    NOVO JOGO     |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   5C 7C 20 20 20
	   20 4E 4F 56 4F
	   20 4A 4F 47 4F
	   20 20 20 20 20
	   7C 0D 0A
 000007BD  20 20 20 20 20				DB '                       \_||    CONQUISTAS    |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 5F
	   7C 7C 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   7C 0D 0A
 000007ED  20 20 20 20 20				DB '                          |    AJUDA         |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 41 4A 55 44
	   41 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 0000081D  20 20 20 20 20				DB '                          |    CONFIGURACOES |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 43 4F 4E 46
	   49 47 55 52 41
	   43 4F 45 53 20
	   7C 0D 0A
 0000084D  20 20 20 20 20				DB '                          |    SAIR          |', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 53 41 49 52
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 0D 0A
 0000087D  20 20 20 20 20				DB '                          |  ________________|__', 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 0D 0A
 000008AF  20 20 20 20 20				DB '                          \_/__________________/', 13, 10, 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 2F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 2F 0D 0A
	   00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONQUISTAS
				;// -------------------------------------------------------------------------
 000008E2 20 C9			telaConqs	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000934  20 BA 20 20 20				DB 32, 186, '                                  CONQUISTAS                                 ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 43 4F 4E 51
	   55 49 53 54 41
	   53 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000986  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000009D8  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A2A  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000A7C  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000ACE  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B20  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000B72  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000BC4  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C16  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000C68  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000CBA  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D0C  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000D5E  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000DB0  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: AJUDA
				;// -------------------------------------------------------------------------
 00000E03 20 C9			telaAjuda	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00000E55  20 BA 20 20 20				DB 32, 186, '                                    AJUDA                                    ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 4A
	   55 44 41 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00000EA7  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000EF9  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F4B  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000F9D  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00000FEF  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001041  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001093  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000010E5  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001137  20 BA 20 52 65				DB 32, 186, ' Recursos utilizados:                                                        ', 186, 13, 10
	   63 75 72 73 6F
	   73 20 75 74 69
	   6C 69 7A 61 64
	   6F 73 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001189  20 BA 20 20 20				DB 32, 186, '   Biblioteca Irvine (http://www.asmirvine.com)                              ', 186, 13, 10
	   42 69 62 6C 69
	   6F 74 65 63 61
	   20 49 72 76 69
	   6E 65 20 28 68
	   74 74 70 3A 2F
	   2F 77 77 77 2E
	   61 73 6D 69 72
	   76 69 6E 65 2E
	   63 6F 6D 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000011DB  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000122D  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000127F  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000012D1  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00

				;// -------------------------------------------------------------------------
				;//  TELAS DO MENU: CONFIGURAÇÕES
				;// -------------------------------------------------------------------------
 00001324 20 C9			telaConfig	DB 32, 201, 77 DUP(205), 187, 13, 10
	   0000004D [
	    CD
	   ] BB 0D 0A
 00001376  20 BA 20 20 20				DB 32, 186, '                                 CONFIGURACOES                               ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   43 4F 4E 46 49
	   47 55 52 41 43
	   4F 45 53 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000013C8  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000141A  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 0000146C  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000014BE  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001510  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 00001562  20 BA 20 62 6C				DB 32, 186, ' blablablablablablablablablablablablablablablablablablablablablablablablabla ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 62 6C
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 20 BA
	   0D 0A
 000015B4  20 BA 20 62 6C				DB 32, 186, ' blablablablabla.                                                            ', 186, 13, 10
	   61 62 6C 61 62
	   6C 61 62 6C 61
	   62 6C 61 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001606  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 00001658  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000016AA  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000016FC  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 0000174E  20 BA 20 20 20				DB 32, 186, '                                                                             ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017A0  20 BA 20 20 20				DB 32, 186, '                    Pressione qualquer tecla para voltar                     ', 186, 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 65
	   73 73 69 6F 6E
	   65 20 71 75 61
	   6C 71 75 65 72
	   20 74 65 63 6C
	   61 20 70 61 72
	   61 20 76 6F 6C
	   74 61 72 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 BA
	   0D 0A
 000017F2  20 C8					DB 32, 200, 77 DUP(205), 188, 13, 10, 0
	   0000004D [
	    CD
	   ] BC 0D 0A 00


				;// -------------------------------------------------------------------------
				;//  DEFINIÇÃO DE PROCEDIMENTOS
				;// -------------------------------------------------------------------------
 00000000			.code

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: HideCursor
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Esconder o cursor piscante do terminal
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000000			HideCursor PROC
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 0000062D R		mov StdOut, eax
					invoke GetConsoleCursorInfo, StdOut, OFFSET cci
 0000000C  68 00000625 R   *	    push   dword  ptr OFFSET FLAT: cci
 00000011  FF 35 0000062D R *	    push   StdOut
 00000017  E8 00000000 E   *	    call   GetConsoleCursorInfo
 0000001C  C7 05 00000629 R		mov cci.bVisible, FALSE
	   00000000
					invoke SetConsoleCursorInfo, StdOut, OFFSET cci
 00000026  68 00000625 R   *	    push   dword  ptr OFFSET FLAT: cci
 0000002B  FF 35 0000062D R *	    push   StdOut
 00000031  E8 00000000 E   *	    call   SetConsoleCursorInfo
 00000036  C3				ret
 00000037			HideCursor ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ShowMenu
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir o menu principal e chamar o controle da seta seletora
				;//  PARÂMETROS: CL - Opção atual do menu
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000037			ShowMenu PROC
 00000037  B8 0000001E			mov eax, yellow + (blue * 16)
 0000003C  E8 00000000 E		call SetTextColor

 00000041  BE 00000000			mov esi, 0	;// Inicia o índice do menu na primeira opção

 00000046  E8 000000EB			call LimpaTela

 0000004B  BA 0000063A R		mov edx, OFFSET telaMenu ;// Imprime a tela inicial do menu
 00000050  E8 00000000 E		call WriteString

 00000055  8A E9			mov ch, cl			;// Copia a seleção atual para chamar ChangeMenuSel
 00000057  E8 00000046			call ChangeMenuSel	;// Imprime a seta seletora do menu

 0000005C			MENUL:
 0000005C  B8 00000032			mov  eax, 50
 00000061  E8 00000000 E		call Delay
 00000066  E8 00000000 E		call ReadKey	;// Verifica se há uma tecla pressionada
 0000006B  74 EF			jz MENUL
 0000006D  80 FC 48			cmp ah, 48h	;// Seta para cima
 00000070  74 20			je CIMA
 00000072  80 FC 50			cmp ah, 50h	;// Seta para baixo
 00000075  74 0B			je BAIXO
 00000077  80 FC 1C			cmp ah, 1Ch	;// Enter
 0000007A  75 E0			jne MENUL
 0000007C  E8 00000046			call DoMenuSel
 00000081  C3				ret
 00000082			BAIXO :
 00000082  80 F9 04			cmp cl, (MENUQNT - 1)	;// Limitador máximo
 00000085  74 D5			je MENUL
 00000087  8A E9			mov ch, cl
 00000089  FE C5			inc ch
 0000008B  E8 00000012			call ChangeMenuSel
 00000090  EB CA			jmp MENUL
 00000092			CIMA :
 00000092  80 F9 00			cmp cl, 0	;// Limitador mínimo
 00000095  74 C5			je MENUL
 00000097  8A E9			mov ch, cl
 00000099  FE CD			dec ch
 0000009B  E8 00000002			call ChangeMenuSel
 000000A0  EB BA			jmp MENUL
 000000A2			ShowMenu ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: ChangeMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Imprimir a seta seletora do menu
				;//  PARÂMETROS:  CH - Nova Opção Selecionada
				;//  RETORNO: CL - Opção Selecionada
				;// -------------------------------------------------------------------------
 000000A2			ChangeMenuSel PROC
 000000A2  B2 1D			mov dl, 29			;// pos X da seta
 000000A4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000A6  02 F1			add dh, cl			;// pos Y da seta(atual)
 000000A8  E8 00000000 E		call Gotoxy
 000000AD  B0 20			mov al, 32			;// ASCII: Espaço
 000000AF  E8 00000000 E		call WriteChar		;// Limpa a seleção anterior
 000000B4  B6 09			mov dh, 9			;// base do Y do menu(topo)
 000000B6  02 F5			add dh, ch			;// pos Y da seta(nova)
 000000B8  E8 00000000 E		call Gotoxy
 000000BD  B0 AF			mov al, 175			;// ASCII: Seta
 000000BF  E8 00000000 E		call WriteChar		;// Escreve o indicador do menu
 000000C4  8A CD			mov cl, ch			;// Troca a opção atual
 000000C6  C3				ret
 000000C7			ChangeMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: DoMenuSel
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Verificar a opção selecionada no menu e agir de acordo
				;//  PARÂMETROS:  CL - Opção Selecionada
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000000C7			DoMenuSel PROC
 000000C7  80 F9 00			cmp cl, 0
 000000CA  74 1B			je opNovoJogo
 000000CC  80 F9 01			cmp cl, 1
 000000CF  74 1D			je opConquistas
 000000D1  80 F9 02			cmp cl, 2
 000000D4  74 29			je opAjuda
 000000D6  80 F9 03			cmp cl, 3
 000000D9  74 35			je opConfig
				;// SELEÇÃO DO MENU: Sair
 000000DB  E8 00000056			call LimpaTela
					invoke ExitProcess, 0
 000000E0  6A 00	   *	    push   +000000000h
 000000E2  E8 00000000 E   *	    call   ExitProcess
				;// SELEÇÃO DO MENU: Novo Jogo
 000000E7			opNovoJogo:
 000000E7  E8 000003CE		          call MainGame
 000000EC  EB 31				jmp MenuRetWait 
				;// SELEÇÃO DO MENU: Conquistas
 000000EE			opConquistas:
 000000EE  E8 00000043				call LimpaTela
 000000F3  BA 000008E2 R			mov edx, OFFSET telaConqs
 000000F8  E8 00000000 E			call WriteString
 000000FD  EB 20				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Ajuda
 000000FF			opAjuda:
 000000FF  E8 00000032				call LimpaTela
 00000104  BA 00000E03 R			mov edx, OFFSET telaAjuda
 00000109  E8 00000000 E			call WriteString
 0000010E  EB 0F				jmp MenuRetWait
				;// SELEÇÃO DO MENU: Configurações
 00000110			opConfig:
 00000110  E8 00000021				call LimpaTela
 00000115  BA 00001324 R			mov edx, OFFSET telaConfig
 0000011A  E8 00000000 E			call WriteString
				;// Para telas do menu que aguardam uma tecla para retornar
 0000011F			MenuRetWait:
 0000011F  B8 00000032				mov  eax, 50
 00000124  E8 00000000 E			call Delay
 00000129  E8 00000000 E			call ReadKey	;// Verifica se há uma tecla pressionada
 0000012E  74 EF				jz MenuRetWait
 00000130  E8 FFFFFF02				call ShowMenu   ;// Retorna ao menu principal
 00000135  C3					ret
 00000136			DoMenuSel ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: LimpaTela
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Limpar a tela, escrevendo o caracter " " (espaço) em toda a 
				;//			   matriz do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000136			LimpaTela PROC USES eax ecx edx
 00000136  50		   *	    push   eax
 00000137  51		   *	    push   ecx
 00000138  52		   *	    push   edx
 00000139  B8 00000000			mov eax, black + (black * 16) ;// Para a função SETTEXTCOLOR deve ser passado al, onde os 4 bits HSB é a cor de fundo e os 4 LSB são a cor da letra, a multiplicação por 16 é equivalente a dar um shift de 4 bits para a esquerda
 0000013E  E8 00000000 E		call SETTEXTCOLOR ;// Função Irvine : Configura a cor do texto recebendo como parâmetro o registrador eax
 00000143  B2 00			mov dl, 0 ;// Move o cursor para a posição 0, 0
 00000145  B6 00			mov dh, 0
 00000147  E8 00000000 E		call GOTOXY ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 0000014C  0F B6 0D			movzx ecx, yMax ;// Inicializa o contador do loop com a quantidade de linhas
	   00000001 R
 00000153  41				inc ecx
 00000154  B0 20			mov al, ' '

 00000156			LLP1 :
 00000156  B2 00			mov dl, 0
 00000158  E8 00000000 E		call GOTOXY
 0000015D  51				push ecx
 0000015E  0F B6 0D			movzx ecx, xMax ;// Inicializa o contador do loop com a quantidade de colunhas
	   00000000 R
 00000165			LLP2 :
 00000165  E8 00000000 E		call WRITECHAR ;// Função Irvine : Escreve um caracter no terminal, tMaxX * tMaxY vezes(declarado de forma a ser dois loops aninhados)
 0000016A  FE C2			inc dl
 0000016C  E2 F7			loop LLP2

 0000016E  FE C6			inc dh
 00000170  59				pop ecx
 00000171  E2 E3			loop LLP1

 00000173  B8 0000000F			mov eax, white + (black * 16)
 00000178  E8 00000000 E		call SETTEXTCOLOR
 0000017D  B2 00			mov dl, 0
 0000017F  B6 00			mov dh, 0
 00000181  E8 00000000 E		call GOTOXY
					ret
 00000186  5A		   *	    pop    edx
 00000187  59		   *	    pop    ecx
 00000188  58		   *	    pop    eax
 00000189  C3		   *	    ret    00000h

 0000018A			LimpaTela ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: drawBordas
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha as bordas do jogo com o caracter "/" em vermelho
				;//  PARÂMETROS: xMax - Quantidade de colunas totais do jogo
				;//				 yMax - Quantidade de linhas totais do jogo
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 0000018A			drawBordas PROC uses eax ecx edx 
 0000018A  50		   *	    push   eax
 0000018B  51		   *	    push   ecx
 0000018C  52		   *	    push   edx
 0000018D  B8 00000008		     mov eax, gray + (black * 16)
 00000192  E8 00000000 E	     call SetTextColor

				     ;// -------------------- Imprime a borda superior do mapa
 00000197  0F B6 0D		     movzx ecx, xMax            
	   00000000 R
 0000019E  B0 23		     mov al, '#'
 000001A0			L1:
 000001A0  E8 00000000 E	     call WriteChar
 000001A5  E2 F9		     loop L1
				     
				     ;// ------------------- Imprime as bordas laterais do mapa
 000001A7  0F B6 0D		     movzx ecx, yMax                  
	   00000001 R
 000001AE  83 E9 04		     sub ecx, 4
 000001B1  B6 01		     mov dh, 1
 000001B3			L2:
 000001B3  B2 00		     mov dl, 0
 000001B5  E8 00000000 E	     call GotoXY
 000001BA  E8 00000000 E	     call WriteChar
 000001BF  8A 15 00000000 R	     mov dl, xMax
 000001C5  FE CA		     dec dl
 000001C7  E8 00000000 E	     call GotoXY
 000001CC  E8 00000000 E	     call WriteChar
 000001D1  FE C6		     inc dh
 000001D3  E2 DE		     loop L2

				     ;// ------------------ Imprime a borda de baixo do mapa
 000001D5  B2 00		     mov dl, 0
 000001D7  8A 35 00000001 R	     mov dh, yMax
 000001DD  80 EE 04		     sub dh, 4
 000001E0  E8 00000000 E	     call GotoXY
 000001E5  0F B6 0D		     movzx ecx, xMax           
	   00000000 R
 000001EC			L3:
 000001EC  E8 00000000 E	     call WriteChar
 000001F1  E2 F9		     loop L3

 000001F3  B8 00000004		     mov eax, red + (black * 16)
 000001F8  E8 00000000 E	     call SetTextColor


				     ;// --------------------Imprime a borda superior do status
 000001FD  B0 3D		     mov al, '='
 000001FF  B2 00		     mov dl, 0
 00000201  8A 35 00000001 R	     mov dh, yMax
 00000207  80 EE 03		     sub dh, 3
 0000020A  E8 00000000 E	     call GotoXY
 0000020F  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 00000216			L4:
 00000216  E8 00000000 E	     call WriteChar
 0000021B  E2 F9		     loop L4

				     ;// ------------------Imprime a borda de baixo do status
 0000021D  B2 00		     mov dl, 0
 0000021F  8A 35 00000001 R	     mov dh, yMax
 00000225  E8 00000000 E	     call GotoXY
 0000022A  0F B6 0D		     movzx ecx, xMax
	   00000000 R
 00000231			L5:
 00000231  E8 00000000 E	     call WriteChar
 00000236  E2 F9		     loop L5
				     
				     ;// ------------------ Imprime as laterais do status
 00000238  B0 49		     mov al, 'I'
 0000023A  B9 00000002		     mov ecx, 2
 0000023F  8A 35 00000001 R	     mov dh, yMax
 00000245  80 EE 02		     sub dh, 2
 00000248			L6:
 00000248  B2 00		     mov dl, 0
 0000024A  E8 00000000 E	     call GotoXY
 0000024F  E8 00000000 E	     call WriteChar
 00000254  8A 15 00000000 R	     mov dl, xMax
 0000025A  FE CA		     dec dl
 0000025C  E8 00000000 E	     call GotoXY
 00000261  E8 00000000 E	     call WriteChar
 00000266  FE C6		     inc dh
 00000268  E2 DE		     loop L6

				     ;// ------- Reseta a cor e retorna
 0000026A  B8 0000000F		     mov eax, white + (black * 16)
 0000026F  E8 00000000 E	     call SetTextColor
				     ret
 00000274  5A		   *	    pop    edx
 00000275  59		   *	    pop    ecx
 00000276  58		   *	    pop    eax
 00000277  C3		   *	    ret    00000h
 00000278			drawBordas ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PrintMapa
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Desenha o mapa do jogo
				;//  PARÂMETROS: MAPCOLS - Quantidade de colunas no mapa 
				;//				 MAPROWS - Quantidade de linhas no mapa
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000278			PrintMapa PROC USES ecx esi ebx eax
				     
 00000278  51		   *	    push   ecx
 00000279  56		   *	    push   esi
 0000027A  53		   *	    push   ebx
 0000027B  50		   *	    push   eax
 0000027C  B8 00000080		     mov eax, black + (gray * 16)
 00000281  E8 00000000 E	     call SETTEXTCOLOR
 00000286  B6 00		     mov dh, 0
 00000288  B2 01		     mov dl, 1
 0000028A  B9 00000014		     mov ecx, MAPROWS
 0000028F  BE 00000002 R	     mov esi, OFFSET map
 00000294  BB 00000000		     mov ebx, 0
 00000299			L1:
 00000299  80 C6 01		     add dh, 1
 0000029C  51			     push ecx                 ;// Guarda ecx
 0000029D  B9 0000004E		     mov ecx, MAPCOLS         ;// ecx = numero de colunas do mapa
 000002A2  E8 00000000 E	     call GOTOXY              ;// Função Irvine : Configura o cursor para a linha dh e a coluna dl
 000002A7			L2:
 000002A7  8A 04 1E		     mov al, [esi + ebx]
 000002AA  3A 05 0000061C R	     cmp al, HeroiChar
 000002B0  74 07		     je Hero
 000002B2			Default:
 000002B2  E8 00000000 E	     call WriteChar ;// Desenha padrão (parede ou nada)
 000002B7  EB 1D		     jmp DefLoop

 000002B9			Hero:
 000002B9  50			     push eax                      ;// guarda 
 000002BA  B8 0000008F		     mov eax, white + (gray * 16)  ;// Seleciona o branco  
 000002BF  E8 00000000 E	     call SETTEXTCOLOR
 000002C4  58			     pop eax
 000002C5  E8 00000000 E	     call WriteChar                ;// Desenha o herói
 000002CA  B8 00000080		     mov eax, black + (gray * 16)  ;// Volta para a cor padrão
 000002CF  E8 00000000 E	     call SETTEXTCOLOR
 000002D4  EB 00		     jmp DefLoop

 000002D6			DefLoop:          ;// Continua os loops padrão
 000002D6  43			     inc ebx   
 000002D7  E2 CE		     loop L2   
 000002D9  59			     pop ecx
 000002DA  E2 BD		     loop L1
				     
				     ;// Reseta a cor do print
 000002DC  B8 0000000F		     mov eax, white + (black * 16)
 000002E1  E8 00000000 E	     call SETTEXTCOLOR

				     ret
 000002E6  58		   *	    pop    eax
 000002E7  5B		   *	    pop    ebx
 000002E8  5E		   *	    pop    esi
 000002E9  59		   *	    pop    ecx
 000002EA  C3		   *	    ret    00000h
 000002EB			PrintMapa ENDP

				;// ==============================================================
				;// ResetMapa PROC
				;// Objetivo: Reseta o Mapa, setando todos os bytes do vetor para '#' - parede
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;// Retorna: Sem retorno
				;// ==============================================================
 000002EB			ResetMapa PROC uses eax ecx esi
 000002EB  50		   *	    push   eax
 000002EC  51		   *	    push   ecx
 000002ED  56		   *	    push   esi
 000002EE  B9 00000000		     mov ecx, 0
 000002F3  BE 00000002 R	     mov esi, OFFSET Map
 000002F8  B0 23		     mov al, '#'
 000002FA			L1:
 000002FA  88 04 0E		     mov [esi+ecx], al
 000002FD  41			     inc ecx
 000002FE  81 F9 00000618	     cmp ecx, LENGTHOF Map
 00000304  72 F4		     jb L1
				     
				     ret
 00000306  5E		   *	    pop    esi
 00000307  59		   *	    pop    ecx
 00000308  58		   *	    pop    eax
 00000309  C3		   *	    ret    00000h
 0000030A			ResetMapa ENDP

				;// ==============================================================
				;// GeraMapa PROC
				;// Objetivo: Gera o Mapa - drunkard walk modificado
				;// Usa:     MAPCOLS - Quantidade de colunas no mapa
				;//		 MAPROWS - Quantidade de linhas no mapa
				;//          Map     - Mapa (vetor de bytes)
				;//          emptyCells - células vazias no mapa
				;//          emptyGoal - Meta de células vazias
				;//          pos - posição atual na matriz
				;//          direction - direcao que a geracao se movera
				;//          passos - numero de passos que serão dados
				;// Retorna: Sem retorno
				;// ==============================================================
 0000030A			GeraMapa PROC USES eax ebx ecx edx esi
				;// ------------------------- Reseta mapa e variáveis
 0000030A  50		   *	    push   eax
 0000030B  53		   *	    push   ebx
 0000030C  51		   *	    push   ecx
 0000030D  52		   *	    push   edx
 0000030E  56		   *	    push   esi
 0000030F  E8 FFFFFFD7		     call ResetMapa
 00000314  66| C7 05		     mov emptyCells, 0
	   0000061D R
	   0000
				;// ------------------------- Randomiza a meta de células limpas - entre 620 e 870 (aprox. 40 a 55 % do mapa)
 0000031D  B8 000001C3		     mov eax, 451
 00000322  E8 00000000 E	     call RandomRange
 00000327  05 000001A4		     add eax, 420
 0000032C  66| A3		     mov emptyGoal, ax 
	   0000061F R

				;// ------------------------- Define uma posição inicial aleatória NO MEIO DO MAPA e salva em pos
 00000332  BE 00000002 R	     mov esi, OFFSET Map
 00000337  B8 00000209		     mov eax, 521
 0000033C  E8 00000000 E	     call RandomRange
 00000341  05 00000208		     add eax, 520
 00000346  66| A3		     mov pos, ax   
	   00000622 R
 0000034C  66| A3		     mov posHeroi, ax
	   0000061A R

				;// ------------------------- Enquanto Células vazias < Meta
 00000352  66| A1		WL1: mov ax, emptyGoal
	   0000061F R
 00000358  66| 39 05		     cmp emptyCells, ax
	   0000061D R
 0000035F  0F 83 00000140	     jae Fim

				;// ------------------------- Randomiza direção e num. de passos (de 2 a 5)
				     ;----------- Randomiza direção (0-4)
 00000365  B8 00000004		     mov eax, 4
 0000036A  E8 00000000 E	     call RandomRange
 0000036F  A2 00000621 R	     mov direction, al
				     ;// --------- Randomiza número de passos (1-9)
 00000374  B8 00000009		     mov eax, 9
 00000379  E8 00000000 E	     call RandomRange
 0000037E  40			     inc eax
 0000037F  A2 00000624 R	     mov passos, al
				     ;// --------- Verifica direção e salta para o trecho correspondente
 00000384  BE 00000002 R	     mov esi, OFFSET Map
 00000389  80 3D 00000621 R	     cmp direction, 0
	   00
 00000390  74 23		     je MoveNorth
 00000392  80 3D 00000621 R	     cmp direction, 1
	   01
 00000399  74 4C		     je MoveEast
 0000039B  80 3D 00000621 R	     cmp direction, 2
	   02
 000003A2  0F 84 00000082	     je MoveSouth
 000003A8  80 3D 00000621 R	     cmp direction, 3
	   03
 000003AF  0F 84 000000AF	     je MoveWest

 000003B5			MoveNorth:
				     ;// ---------- Tira paredes para o norte
 000003B5  33 C9		     xor ecx, ecx
 000003B7  8A 0D 00000624 R	     mov cl, passos
 000003BD			MNC:
 000003BD  66| A1		     mov ax, pos         
	   00000622 R
 000003C3  66| 83 E8 4E		     sub ax, MAPCOLS     ;// Se não pode mover para cima,
 000003C7  78 89		     js WL1              ;// volta para o inicio
				     
 000003C9  66| A3		     mov pos, ax;// salva a nova posição
	   00000622 R

 000003CF  B3 20		     mov bl, ' '
 000003D1  38 1C 06		     cmp[esi + eax], bl
 000003D4  74 0A		     je NowriteN
 000003D6  66| FF 05		     inc emptyCells
	   0000061D R
 000003DD  88 1C 06		     mov[esi + eax], bl
 000003E0			NowriteN:  
 000003E0  E2 DB		     loop MNC
 000003E2  E9 FFFFFF6B		     jmp WL1

 000003E7			MoveEast:
				     ;// ----------Tira paredes para o leste
 000003E7  33 C9		     xor ecx, ecx
 000003E9  8A 0D 00000624 R	     mov cl, passos
 000003EF			MEC: 
 000003EF  66| A1		     mov ax, pos
	   00000622 R
 000003F5  66| 40		     inc ax       ;// ax = pos+1
 000003F7  B3 4E		     mov bl, 78
 000003F9  F6 F3		     div bl       ;// (pos+1)/78 - Resto fica em AH
 000003FB  80 FC 00		     cmp ah, 0
 000003FE  0F 84 FFFFFF4E	     je WL1      ;// se (pos+1)%78 = 0, então não é valido
				     
 00000404  66| A1		     mov ax, pos
	   00000622 R
 0000040A  66| 40		     inc ax
 0000040C  66| A3		     mov pos, ax  ;// salva a nova posição
	   00000622 R

 00000412  B3 20		     mov bl, ' '
 00000414  38 1C 06		     cmp[esi + eax], bl
 00000417  74 0A		     je NowriteE
 00000419  66| FF 05		     inc emptyCells
	   0000061D R
 00000420  88 1C 06		     mov[esi + eax], bl
 00000423			NowriteE:  
 00000423  E2 CA		     loop MEC
 00000425  E9 FFFFFF28		     jmp WL1


 0000042A			MoveSouth:
				     ;// ----------Tira paredes para o sul
 0000042A  33 C9		     xor ecx, ecx
 0000042C  8A 0D 00000624 R	     mov cl, passos
 00000432			MSC: 
 00000432  66| A1		     mov ax, pos
	   00000622 R
 00000438  66| 83 C0 4E		     add ax, MAPCOLS
 0000043C  66| 3D 0617		     cmp ax, 1559     ;// Se não pode mover para baixo,
 00000440  0F 87 FFFFFF0C	     ja WL1           ;// volta para o inicio

 00000446  66| A3		     mov pos, ax     ;// salva a nova posição
	   00000622 R

 0000044C  B3 20		     mov bl, ' '
 0000044E  38 1C 06		     cmp[esi + eax], bl
 00000451  74 0A		     je NowriteS
 00000453  66| FF 05		     inc emptyCells
	   0000061D R
 0000045A  88 1C 06		     mov[esi + eax], bl
 0000045D			NowriteS:  
 0000045D  E2 D3		     loop MSC
 0000045F  E9 FFFFFEEE		     jmp WL1

 00000464			MoveWest:
				     ;// ----------Tira paredes para o oeste
 00000464  33 C9		     xor ecx, ecx
 00000466  8A 0D 00000624 R	     mov cl, passos
 0000046C			MWC :
 0000046C  66| A1		     mov ax, pos
	   00000622 R
 00000472  B3 4E		     mov bl, 78
 00000474  F6 F3		     div bl         ;// pos/78 - Resto fica em AH
 00000476  80 FC 00		     cmp ah, 0
 00000479  0F 84 FFFFFED3	     je WL1         ;// se pos%78 = 0, então não é valido

 0000047F  66| A1		     mov ax, pos
	   00000622 R
 00000485  66| 48		     dec ax
 00000487  66| A3		     mov pos, ax    ;// salva a nova posição
	   00000622 R

 0000048D  B3 20		     mov bl, ' '
 0000048F  38 1C 06		     cmp [esi + eax], bl
 00000492  74 0A		     je NowriteW
 00000494  66| FF 05		     inc emptyCells
	   0000061D R
 0000049B  88 1C 06		     mov [esi + eax], bl
 0000049E			NowriteW:  
 0000049E  E2 CC		     loop MWC
 000004A0  E9 FFFFFEAD		     jmp WL1



 000004A5			Fim:
				     ;// -------- - Insere Personagem no mapa
 000004A5  66| A1		     mov ax, posHeroi
	   0000061A R
 000004AB  8A 1D 0000061C R	     mov bl, HeroiChar
 000004B1  88 1C 06		     mov [esi + eax], bl

				     ret
 000004B4  5E		   *	    pop    esi
 000004B5  5A		   *	    pop    edx
 000004B6  59		   *	    pop    ecx
 000004B7  5B		   *	    pop    ebx
 000004B8  58		   *	    pop    eax
 000004B9  C3		   *	    ret    00000h
 000004BA			GeraMapa ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: mainGame
				;// -------------------------------------------------------------------------
				;//	OBJETIVO: Loop do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000004BA			MainGame PROC

 000004BA  E8 FFFFFC77		     call LimpaTela;// Limpa a tela
 000004BF  E8 FFFFFCC6		     call drawBordas;// Desenha as bordas do jogo
 000004C4  E8 FFFFFE22		     call ResetMapa;// Reseta o mapa
 000004C9  E8 FFFFFE3C		     call GeraMapa;// Gera um novo mapa

 000004CE			gameloop:
 000004CE  E8 FFFFFDA5		     call PrintMapa;// Desenha o mapa
 000004D3  E8 00000003		     call PlayerMove

 000004D8  EB F4		     jmp gameloop
				     
 000004DA  C3			     ret
 000004DB			MainGame ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: PlayerMove
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Lê a entrada do jogador e move o personagem
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 000004DB			PlayerMove PROC uses eax esi edx ebx 
				         
 000004DB  50		   *	    push   eax
 000004DC  56		   *	    push   esi
 000004DD  52		   *	    push   edx
 000004DE  53		   *	    push   ebx
 000004DF  BE 00000002 R	     mov esi, OFFSET Map    

 000004E4			KeyWait:
 000004E4  B8 00000032		     mov eax, 50
 000004E9  E8 00000000 E	     call Delay; // Sleep para timeslice
 000004EE  E8 00000000 E	     call ReadKey
 000004F3  74 EF		     jz KeyWait

 000004F5  66| 83 FA 26		     cmp  dx, 0026h
 000004F9  74 14		     je KeyUp
 000004FB  66| 83 FA 25		     cmp dx, 0025h
 000004FF  74 4B		     je KeyLeft
 00000501  66| 83 FA 27		     cmp dx, 0027h
 00000505  74 6C		     je KeyRight
 00000507  66| 83 FA 28		     cmp dx, 0028h
 0000050B  74 1F		     je KeyDown
 0000050D  EB D5		     jmp KeyWait

 0000050F			KeyUp:
 0000050F  66| A1		     mov ax, posHeroi
	   0000061A R
 00000515  66| 83 F8 4D		     cmp ax, 77
 00000519  76 C9		     jbe KeyWait      ;// Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000051B  83 E8 4E		     sub eax, 78
 0000051E  B3 23		     mov bl, '#'
 00000520  38 1C 06		     cmp [esi + eax], bl
 00000523  74 BF		     je KeyWait
				     ;// Move caso válido
 00000525  B3 20		     mov bl, ' '
 00000527  38 1C 06		     cmp[esi + eax], bl
 0000052A  74 76		     je MovUp
				     ;// -------------------------- INSERIR COLISÕES

 0000052C			KeyDown:
 0000052C  66| A1		     mov ax, posHeroi
	   0000061A R
 00000532  66| BB 05CA		     mov bx, 1482
 00000536  66| 3B C3		     cmp ax, bx
 00000539  73 A9		     jae KeyWait;   // Aguarda outra tecla caso inválido

				     ;// Checa se existe uma parede:
 0000053B  83 C0 4E		     add eax, 78
 0000053E  B3 23		     mov bl, '#'
 00000540  38 1C 06		     cmp[esi + eax], bl
 00000543  74 9F		     je KeyWait
				     ;// Move caso válido
 00000545  B3 20		     mov bl, ' '
 00000547  38 1C 06		     cmp[esi + eax], bl
 0000054A  74 75		     je MovDown
				     ;// -------------------------- INSERIR COLISÕES

 0000054C			KeyLeft:
 0000054C  66| A1		     mov ax, PosHeroi
	   0000061A R
 00000552  F6 F3		     div bl         ;// pos/78 - Resto fica em AH
 00000554  80 FC 00		     cmp ah, 0
 00000557  74 8B		     je KeyWait         ;// se pos%78 = 0, então não é valido

 00000559  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 0000055F  66| 48		     dec ax
 00000561  B3 23		     mov bl, '#'
 00000563  38 1C 06		     cmp [esi+eax], bl
 00000566  0F 84 FFFFFF78	     je KeyWait
				     ;// Move caso válido
 0000056C  B3 20		     mov bl, ' '
 0000056E  38 1C 06		     cmp [esi + eax], bl
 00000571  74 6D		     je MovLeft
				     ;// -------------------------- INSERIR COLISÕES

 00000573			KeyRight:
 00000573  66| A1		     mov ax, PosHeroi
	   0000061A R
 00000579  66| 40		     inc ax         ;// ax = pos+1
 0000057B  B3 4E		     mov bl, 78
 0000057D  F6 F3		     div bl         ;// (pos+1)/78 - Resto fica em AH
 0000057F  80 FC 00		     cmp ah, 0
 00000582  0F 84 FFFFFF5C	     je KeyWait     ;// se (pos+1)%78 = 0, então não é valido

 00000588  66| A1		     mov ax, posHeroi
	   0000061A R
				     ;// Checa se existe uma parede:
 0000058E  66| 40		     inc ax
 00000590  B3 23		     mov bl, '#'
 00000592  38 1C 06		     cmp[esi + eax], bl
 00000595  0F 84 FFFFFF49	     je KeyWait
				     ;// Move caso válido
 0000059B  B3 20		     mov bl, ' '
 0000059D  38 1C 06		     cmp[esi + eax], bl
 000005A0  74 5C		     je MovRight
				     ;// -------------------------- INSERIR COLISÕES

 000005A2			MovUp:
 000005A2  66| 83 2D		     sub posHeroi, 78
	   0000061A R 4E
 000005AA  66| A1		     mov ax, posHeroi
	   0000061A R
 000005B0  B3 20		     mov bl, ' '
 000005B2  88 5C 06 4E		     mov [esi + eax + 78], bl   ;// Limpa posição atual
 000005B6  8A 1D 0000061C R	     mov bl, HeroiChar
 000005BC  88 1C 06		     mov [esi + eax], bl ; // Adiciona o heroi na nova posição
 000005BF  EB 5B		     jmp EndInput

 000005C1			MovDown :
 000005C1  66| 83 05		     add posHeroi, 78
	   0000061A R 4E
 000005C9  66| A1		     mov ax, posHeroi
	   0000061A R
 000005CF  B3 20		     mov bl, ' '
 000005D1  88 5C 06 B2		     mov[esi + eax - 78], bl   ;// Limpa posição atual
 000005D5  8A 1D 0000061C R	     mov bl, HeroiChar
 000005DB  88 1C 06		     mov[esi + eax], bl ; // Adiciona o heroi na nova posição
 000005DE  EB 3C		     jmp EndInput

 000005E0			MovLeft :
 000005E0  66| FF 0D		     dec posHeroi
	   0000061A R
 000005E7  66| A1		     mov ax, posHeroi
	   0000061A R
 000005ED  B3 20		     mov bl, ' '
 000005EF  88 5C 06 01		     mov[esi + eax + 1], bl;// Limpa posição atual
 000005F3  8A 1D 0000061C R	     mov bl, HeroiChar
 000005F9  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 000005FC  EB 1E		     jmp EndInput

 000005FE			MovRight :
 000005FE  66| FF 05		     inc posHeroi
	   0000061A R
 00000605  66| A1		     mov ax, posHeroi
	   0000061A R
 0000060B  B3 20		     mov bl, ' '
 0000060D  88 5C 06 FF		     mov[esi + eax - 1], bl;// Limpa posição atual
 00000611  8A 1D 0000061C R	     mov bl, HeroiChar
 00000617  88 1C 06		     mov[esi + eax], bl; // Adiciona o heroi na nova posição
 0000061A  EB 00		     jmp EndInput


 0000061C			EndInput:     

				     ret
 0000061C  5B		   *	    pop    ebx
 0000061D  5A		   *	    pop    edx
 0000061E  5E		   *	    pop    esi
 0000061F  58		   *	    pop    eax
 00000620  C3		   *	    ret    00000h
 00000621			PlayerMove ENDP

				;// -------------------------------------------------------------------------
				;//  PROCEDIMENTO: main
				;// -------------------------------------------------------------------------
				;//	 OBJETIVO: Procedimento principal do jogo
				;//  PARÂMETROS: Não Possui
				;//  RETORNO: Não Possui
				;// -------------------------------------------------------------------------
 00000621			main PROC
 00000621  E8 00000000 E	     call Randomize;// Randomiza a seed
					invoke SetConsoleTitle, OFFSET ctitle	;// Muda o título do terminal
 00000626  68 00000631 R   *	    push   dword  ptr OFFSET FLAT: ctitle
 0000062B  E8 00000000 E   *	    call   SetConsoleTitleA
 00000630  E8 FFFFF9CB			call HideCursor							;// Esconde o cursor piscante
 00000635  B1 00			mov cl, 0								;// Inicia o seletor do menu na primeira opção
 00000637  E8 FFFFF9FB			call ShowMenu							;// Mostra o menu principal

 0000063C			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 17:28:29
MASMorra.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001845 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000063C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChangeMenuSel  . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000025 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DoMenuSel  . . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 0000006F Public STDCALL
  opNovoJogo . . . . . . . . . .	L Near	 000000E7 _TEXT	
  opConquistas . . . . . . . . .	L Near	 000000EE _TEXT	
  opAjuda  . . . . . . . . . . .	L Near	 000000FF _TEXT	
  opConfig . . . . . . . . . . .	L Near	 00000110 _TEXT	
  MenuRetWait  . . . . . . . . .	L Near	 0000011F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GeraMapa . . . . . . . . . . . .	P Near	 0000030A _TEXT	Length= 000001B0 Public STDCALL
  WL1  . . . . . . . . . . . . .	L Near	 00000352 _TEXT	
  MoveNorth  . . . . . . . . . .	L Near	 000003B5 _TEXT	
  MNC  . . . . . . . . . . . . .	L Near	 000003BD _TEXT	
  NowriteN . . . . . . . . . . .	L Near	 000003E0 _TEXT	
  MoveEast . . . . . . . . . . .	L Near	 000003E7 _TEXT	
  MEC  . . . . . . . . . . . . .	L Near	 000003EF _TEXT	
  NowriteE . . . . . . . . . . .	L Near	 00000423 _TEXT	
  MoveSouth  . . . . . . . . . .	L Near	 0000042A _TEXT	
  MSC  . . . . . . . . . . . . .	L Near	 00000432 _TEXT	
  NowriteS . . . . . . . . . . .	L Near	 0000045D _TEXT	
  MoveWest . . . . . . . . . . .	L Near	 00000464 _TEXT	
  MWC  . . . . . . . . . . . . .	L Near	 0000046C _TEXT	
  NowriteW . . . . . . . . . . .	L Near	 0000049E _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000004A5 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LimpaTela  . . . . . . . . . . .	P Near	 00000136 _TEXT	Length= 00000054 Public STDCALL
  LLP1 . . . . . . . . . . . . .	L Near	 00000156 _TEXT	
  LLP2 . . . . . . . . . . . . .	L Near	 00000165 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MainGame . . . . . . . . . . . .	P Near	 000004BA _TEXT	Length= 00000021 Public STDCALL
  gameloop . . . . . . . . . . .	L Near	 000004CE _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayerMove . . . . . . . . . . .	P Near	 000004DB _TEXT	Length= 00000146 Public STDCALL
  KeyWait  . . . . . . . . . . .	L Near	 000004E4 _TEXT	
  KeyUp  . . . . . . . . . . . .	L Near	 0000050F _TEXT	
  KeyDown  . . . . . . . . . . .	L Near	 0000052C _TEXT	
  KeyLeft  . . . . . . . . . . .	L Near	 0000054C _TEXT	
  KeyRight . . . . . . . . . . .	L Near	 00000573 _TEXT	
  MovUp  . . . . . . . . . . . .	L Near	 000005A2 _TEXT	
  MovDown  . . . . . . . . . . .	L Near	 000005C1 _TEXT	
  MovLeft  . . . . . . . . . . .	L Near	 000005E0 _TEXT	
  MovRight . . . . . . . . . . .	L Near	 000005FE _TEXT	
  EndInput . . . . . . . . . . .	L Near	 0000061C _TEXT	
PrintMapa  . . . . . . . . . . .	P Near	 00000278 _TEXT	Length= 00000073 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000299 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002A7 _TEXT	
  Default  . . . . . . . . . . .	L Near	 000002B2 _TEXT	
  Hero . . . . . . . . . . . . .	L Near	 000002B9 _TEXT	
  DefLoop  . . . . . . . . . . .	L Near	 000002D6 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetMapa  . . . . . . . . . . .	P Near	 000002EB _TEXT	Length= 0000001F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002FA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowMenu . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 0000006B Public STDCALL
  MENUL  . . . . . . . . . . . .	L Near	 0000005C _TEXT	
  BAIXO  . . . . . . . . . . . .	L Near	 00000082 _TEXT	
  CIMA . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
drawBordas . . . . . . . . . . .	P Near	 0000018A _TEXT	Length= 000000EE Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001A0 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000001EC _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000216 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 00000231 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 00000248 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000621 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000050h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HeroiChar  . . . . . . . . . . .	Byte	 0000061C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAPCOLS  . . . . . . . . . . . .	Number	 0000004Eh   
MAPROWS  . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENUQNT  . . . . . . . . . . . .	Number	 00000005h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Map  . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 00000019h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StdOut . . . . . . . . . . . . .	DWord	 0000062D _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cci  . . . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000625 _DATA	
ctitle . . . . . . . . . . . . .	Byte	 00000631 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000621 _DATA	
emptyCells . . . . . . . . . . .	Word	 0000061D _DATA	
emptyGoal  . . . . . . . . . . .	Word	 0000061F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
passos . . . . . . . . . . . . .	Byte	 00000624 _DATA	
posHeroi . . . . . . . . . . . .	Word	 0000061A _DATA	
pos  . . . . . . . . . . . . . .	Word	 00000622 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
telaAjuda  . . . . . . . . . . .	Byte	 00000E03 _DATA	
telaConfig . . . . . . . . . . .	Byte	 00001324 _DATA	
telaConqs  . . . . . . . . . . .	Byte	 000008E2 _DATA	
telaMenu . . . . . . . . . . . .	Byte	 0000063A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xMax . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yMax . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
