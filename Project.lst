Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 01:02:34
MASMorra.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Constantes 
 = 00000050			COLS = 80            ; Colunas do jogo
 = 00000019			ROWS = 25            ; Linhas do jogo
 = 0000004E			MAPCOLS = (COLS - 2) ; Colunas do mapa
 = 00000014			MAPROWS = (ROWS - 5) ; Linhas do mapa

				; Variáveis
 00000000			.data
				     ; Variáveis da tela
 00000000 50			     xMax BYTE COLS      ; número maximo de colunas
 00000001 19			     yMax BYTE ROWS      ; númer maximo de linhas

				     ; Mapa
 00000002  00000618 [		     Map BYTE MAPCOLS*MAPROWS Dup('#')  ; vetor de (colunas*linhas) posições. 
	    23
	   ]
 0000061A 0000			     posHeroi WORD 0    ; Posição atual do heroi

				     ; Variáveis de geração de mapa
 0000061C 0000			     emptyCells WORD 0
 0000061E 0000			     emptyGoal WORD 0
 00000620 00			     direction BYTE 0    ; Direção do corredor [0-Norte, 1-Leste, 2-Sul, 3-Oeste]
 00000621 0000			     pos WORD 0          ; Ponteiro para a posição atual no mapa (0 - 1559)
 00000623 00			     passos BYTE 0       ; Numero de passos que sao dados na geração do mapa



				; Procedimentos
 00000000			.code
				; ==============================================================
				; LimpaTela PROC
				; Objetivo: Limpar a tela do jogo em substituição a função CLRSCR do Irvine, esta função apenas escreve o caracter " "(espaço)em toda a matriz que esta contida no jogo
				; Usa:      Sem parâmetros
				; Retorna:  Sem retorno
				; ==============================================================
 00000000			LimpaTela PROC
 00000000  B8 00000000		     mov eax, black + (black * 16)      ; Para a função SETTEXTCOLOR deve ser passado al, onde os 4 bits HSB é a cor de fundo e os 4 LSB são a cor da letra, a multiplicação por 16 é equivalente a dar um shift de 4 bits para a esquerda
 00000005  E8 00000000 E	     call SETTEXTCOLOR                  ; Função Irvine : Configura a cor do texto recebendo como parâmetro o registrador eax
 0000000A  B2 00		     mov dl, 0                          ; Move o cursor para a posição 0, 0
 0000000C  B6 00		     mov dh, 0
 0000000E  E8 00000000 E	     call GOTOXY                        ; Função Irvine : Configura o cursor para a linha dh e a coluna dl
 00000013  0F B6 0D		     movzx ecx, xMax                    ; Inicializa o contador do loop com a quantidade de colunas
	   00000000 R

 0000001A			LLP1 :
 0000001A  B2 00		     mov dl, 0
 0000001C  8A F1		     mov dh, cl
 0000001E  E8 00000000 E	     call GOTOXY
 00000023  51			     push ecx
 00000024  0F B6 0D		     movzx ecx, yMax                    ; Inicializa o contador do loop com a quantidade de linhas
	   00000001 R
 0000002B			LLP2 :
 0000002B  B0 20		     mov al, ' '
 0000002D  E8 00000000 E	     call WRITECHAR                     ; Função Irvine : Escreve um caracter no terminal, tMaxX * tMaxY vezes(declarado de forma a ser dois loops aninhados)
 00000032  E2 F7		     loop LLP2

 00000034  59			     pop ecx
 00000035  E2 E3		     loop LLP1

 00000037  B8 0000000F		     mov eax, white + (black * 16)
 0000003C  E8 00000000 E	     call SETTEXTCOLOR
 00000041  B2 00		     mov dl, 0
 00000043  B6 00		     mov dh, 0
 00000045  E8 00000000 E	     call GOTOXY
 0000004A  C3			     ret
 0000004B			LimpaTela ENDP

				; ==============================================================
				; Bordas PROC
				; Objetivo: Desenha as bordas do jogo com o caracter "/" em vermelho
				; Usa:      xMax - Quantidade de colunas totais do jogo
				;		  yMax - Quantidade de linhas totais do jogo
				; Retorna: Sem retorno
				; ==============================================================
 0000004B			Bordas PROC
 0000004B  B8 00000004		     mov eax, red + (black * 16)
 00000050  E8 00000000 E	     call SETTEXTCOLOR

 00000055  0F B6 0D		     movzx ecx, xMax                   ; Trecho para impressão da primeira linha da matriz do jogo, imprime tMaxX vezes o caracter "!"
	   00000000 R
 0000005C  B0 2F		     mov al, '/'
 0000005E			L1:
 0000005E  E8 00000000 E	     call WRITECHAR
 00000063  E2 F9		     loop L1

 00000065  0F B6 0D		     movzx ecx, yMax                   ; Trecho para impressão dos limites laterais do Jogo, imprime tMaxY vezes o caracter '!' de cada lado do inicio e fim da barra impressa anteriormente
	   00000001 R
 0000006C  B6 01		     mov dh, 1
 0000006E			L2:
 0000006E  B2 00		     mov dl, 0
 00000070  E8 00000000 E	     call GOTOXY
 00000075  E8 00000000 E	     call WRITECHAR
 0000007A  8A 15 00000000 R	     mov dl, xMax
 00000080  FE CA		     dec dl
 00000082  E8 00000000 E	     call GOTOXY
 00000087  E8 00000000 E	     call WRITECHAR
 0000008C  FE C6		     inc dh
 0000008E  E2 DE		     loop L2

 00000090  B2 00		     mov dl, 0
 00000092  8A 35 00000001 R	     mov dh, yMax
 00000098  E8 00000000 E	     call GOTOXY
 0000009D  0F B6 0D		     movzx ecx, xMax                 ; Trecho para impressão da ultima linha da matriz do jogo, imprime tMaxX vezes o caracter "!"
	   00000000 R
 000000A4			L3:
 000000A4  E8 00000000 E	     call WRITECHAR
 000000A9  E2 F9		     loop L3

 000000AB  B8 0000000F		     mov eax, white + (black * 16)
 000000B0  E8 00000000 E	     call SETTEXTCOLOR
 000000B5  C3			     ret
 000000B6			Bordas ENDP

				; ============================================================== 
				; PrintMapa PROC
				; Objetivo: Desenha o Mapa. 
				; Usa:     MAPCOLS - Quantidade de colunas no mapa     
				;		 MAPROWS - Quantidade de linhas no mapa
				; Retorna: Sem retorno
				; ==============================================================
 000000B6			PrintMapa PROC USES ecx esi ebx eax
				     
 000000B6  51		   *	    push   ecx
 000000B7  56		   *	    push   esi
 000000B8  53		   *	    push   ebx
 000000B9  50		   *	    push   eax
 000000BA  B8 00000080		     mov eax, black + (gray * 16)
 000000BF  E8 00000000 E	     call SETTEXTCOLOR
 000000C4  B6 00		     mov dh, 0
 000000C6  B2 01		     mov dl, 1
 000000C8  B9 00000014		     mov ecx, MAPROWS
 000000CD  BE 00000002 R	     mov esi, OFFSET map
 000000D2  BB 00000000		     mov ebx, 0
 000000D7			L1:
 000000D7  80 C6 01		     add dh, 1
 000000DA  51			     push ecx                 ; Guarda ecx
 000000DB  B9 0000004E		     mov ecx, MAPCOLS         ; ecx = numero de colunas do mapa
 000000E0  E8 00000000 E	     call GOTOXY              ; Função Irvine : Configura o cursor para a linha dh e a coluna dl
 000000E5			L2:
 000000E5  8A 04 1E		     mov al, [esi + ebx]
 000000E8  3C 41		     cmp al, 'A'
 000000EA  74 07		     je Hero
 000000EC			Default:
 000000EC  E8 00000000 E	     call WriteChar ; Desenha padrão (parede ou nada)
 000000F1  EB 1D		     jmp DefLoop

 000000F3			Hero:
 000000F3  50			     push eax                      ; guarda 
 000000F4  B8 0000008F		     mov eax, white + (gray * 16)  ; Seleciona o branco  
 000000F9  E8 00000000 E	     call SETTEXTCOLOR
 000000FE  58			     pop eax
 000000FF  E8 00000000 E	     call WriteChar                ; Desenha o herói
 00000104  B8 00000080		     mov eax, black + (gray * 16)  ; Volta para a cor padrão
 00000109  E8 00000000 E	     call SETTEXTCOLOR
 0000010E  EB 00		     jmp DefLoop

 00000110			DefLoop:          ; Continua os loops padrão
 00000110  43			     inc ebx   
 00000111  E2 D2		     loop L2   
 00000113  59			     pop ecx
 00000114  E2 C1		     loop L1
				     
				     ; Reseta a cor do print
 00000116  B8 0000000F		     mov eax, white + (black * 16)
 0000011B  E8 00000000 E	     call SETTEXTCOLOR

				     ret
 00000120  58		   *	    pop    eax
 00000121  5B		   *	    pop    ebx
 00000122  5E		   *	    pop    esi
 00000123  59		   *	    pop    ecx
 00000124  C3		   *	    ret    00000h
 00000125			PrintMapa ENDP

				; ==============================================================
				; ResetMapa PROC
				; Objetivo: Reseta o Mapa, setando todos os bytes do vetor para '#' - parede
				; Usa:     MAPCOLS - Quantidade de colunas no mapa
				;		 MAPROWS - Quantidade de linhas no mapa
				; Retorna: Sem retorno
				; ==============================================================
 00000125			ResetMapa PROC
 00000125  B9 00000000		     mov ecx, 0
 0000012A  BE 00000002 R	     mov esi, OFFSET Map
 0000012F  B0 23		     mov al, '#'
 00000131			L1:
 00000131  88 04 0E		     mov [esi+ecx], al
 00000134  41			     inc ecx
 00000135  81 F9 00000618	     cmp ecx, LENGTHOF Map
 0000013B  72 F4		     jb L1
				     
 0000013D  C3			     ret
 0000013E			ResetMapa ENDP

				; ==============================================================
				; GeraMapa PROC
				; Objetivo: Gera o Mapa - drunkard walk modificado
				; Usa:     MAPCOLS - Quantidade de colunas no mapa
				;		 MAPROWS - Quantidade de linhas no mapa
				;          Map     - Mapa (vetor de bytes)
				;          emptyCells - células vazias no mapa
				;          emptyGoal - Meta de células vazias
				;          pos - posição atual na matriz
				;          direction - direcao que a geracao se movera
				;          passos - numero de passos que serão dados
				; Retorna: Sem retorno
				; ==============================================================
 0000013E			GeraMapa PROC
				; ------------------------- Reseta mapa e variáveis
 0000013E  E8 FFFFFFE2		     call ResetMapa
 00000143  66| C7 05		     mov emptyCells, 0
	   0000061C R
	   0000
				; ------------------------- Randomiza a meta de células limpas - entre 620 e 1070 (aprox. 40 a 70 % do mapa)
 0000014C  B8 000001C2		     mov eax, 450
 00000151  E8 00000000 E	     call RandomRange
 00000156  05 0000026C		     add eax, 620
 0000015B  66| A3		     mov emptyGoal, ax 
	   0000061E R

				; ------------------------- Define uma posição inicial aleatória e salva em pos
 00000161  BE 00000002 R	     mov esi, OFFSET Map
 00000166  B8 00000617		     mov eax, 1559
 0000016B  E8 00000000 E	     call RandomRange
 00000170  66| A3		     mov pos, ax   
	   00000621 R
 00000176  66| A3		     mov posHeroi, ax
	   0000061A R

				; ------------------------- Enquanto Células vazias < Meta
 0000017C  66| A1		WL1: mov ax, emptyGoal
	   0000061E R
 00000182  66| 39 05		     cmp emptyCells, ax
	   0000061C R
 00000189  0F 83 00000140	     jae Fim

				; ------------------------- Randomiza direção e num. de passos (de 2 a 5)
				     ;----------- Randomiza direção (0-4)
 0000018F  B8 00000004		     mov eax, 4
 00000194  E8 00000000 E	     call RandomRange
 00000199  A2 00000620 R	     mov direction, al
				     ; --------- Randomiza número de passos (1-9)
 0000019E  B8 00000009		     mov eax, 9
 000001A3  E8 00000000 E	     call RandomRange
 000001A8  40			     inc eax
 000001A9  A2 00000623 R	     mov passos, al
				     ; --------- Verifica direção e salta para o trecho correspondente
 000001AE  BE 00000002 R	     mov esi, OFFSET Map
 000001B3  80 3D 00000620 R	     cmp direction, 0
	   00
 000001BA  74 23		     je MoveNorth
 000001BC  80 3D 00000620 R	     cmp direction, 1
	   01
 000001C3  74 4C		     je MoveEast
 000001C5  80 3D 00000620 R	     cmp direction, 2
	   02
 000001CC  0F 84 00000082	     je MoveSouth
 000001D2  80 3D 00000620 R	     cmp direction, 3
	   03
 000001D9  0F 84 000000AF	     je MoveWest

 000001DF			MoveNorth:
				     ; ---------- Tira paredes para o norte
 000001DF  33 C9		     xor ecx, ecx
 000001E1  8A 0D 00000623 R	     mov cl, passos
 000001E7			MNC:
 000001E7  66| A1		     mov ax, pos         
	   00000621 R
 000001ED  66| 83 E8 4E		     sub ax, MAPCOLS     ; Se não pode mover para cima,
 000001F1  78 89		     js WL1              ; volta para o inicio
				     
 000001F3  66| A3		     mov pos, ax; salva a nova posição
	   00000621 R

 000001F9  B3 20		     mov bl, ' '
 000001FB  38 1C 06		     cmp[esi + eax], bl
 000001FE  74 0A		     je NowriteN
 00000200  66| FF 05		     inc emptyCells
	   0000061C R
 00000207  88 1C 06		     mov[esi + eax], bl
 0000020A			NowriteN:  
 0000020A  E2 DB		     loop MNC
 0000020C  E9 FFFFFF6B		     jmp WL1

 00000211			MoveEast:
				     ; ----------Tira paredes para o leste
 00000211  33 C9		     xor ecx, ecx
 00000213  8A 0D 00000623 R	     mov cl, passos
 00000219			MEC: 
 00000219  66| A1		     mov ax, pos
	   00000621 R
 0000021F  66| 40		     inc ax       ; ax = pos+1
 00000221  B3 4E		     mov bl, 78
 00000223  F6 F3		     div bl       ; (pos+1)/78 - Resto fica em AH
 00000225  80 FC 00		     cmp ah, 0
 00000228  0F 84 FFFFFF4E	     je WL1      ; se (pos+1)%78 = 0, então não é valido
				     
 0000022E  66| A1		     mov ax, pos
	   00000621 R
 00000234  66| 40		     inc ax
 00000236  66| A3		     mov pos, ax  ; salva a nova posição
	   00000621 R

 0000023C  B3 20		     mov bl, ' '
 0000023E  38 1C 06		     cmp[esi + eax], bl
 00000241  74 0A		     je NowriteE
 00000243  66| FF 05		     inc emptyCells
	   0000061C R
 0000024A  88 1C 06		     mov[esi + eax], bl
 0000024D			NowriteE:  
 0000024D  E2 CA		     loop MEC
 0000024F  E9 FFFFFF28		     jmp WL1


 00000254			MoveSouth:
				     ; ----------Tira paredes para o sul
 00000254  33 C9		     xor ecx, ecx
 00000256  8A 0D 00000623 R	     mov cl, passos
 0000025C			MSC: 
 0000025C  66| A1		     mov ax, pos
	   00000621 R
 00000262  66| 83 C0 4E		     add ax, MAPCOLS
 00000266  66| 3D 0617		     cmp ax, 1559     ; Se não pode mover para baixo,
 0000026A  0F 87 FFFFFF0C	     ja WL1           ; volta para o inicio

 00000270  66| A3		     mov pos, ax     ; salva a nova posição
	   00000621 R

 00000276  B3 20		     mov bl, ' '
 00000278  38 1C 06		     cmp[esi + eax], bl
 0000027B  74 0A		     je NowriteS
 0000027D  66| FF 05		     inc emptyCells
	   0000061C R
 00000284  88 1C 06		     mov[esi + eax], bl
 00000287			NowriteS:  
 00000287  E2 D3		     loop MSC
 00000289  E9 FFFFFEEE		     jmp WL1

 0000028E			MoveWest:
				     ; ----------Tira paredes para o oeste
 0000028E  33 C9		     xor ecx, ecx
 00000290  8A 0D 00000623 R	     mov cl, passos
 00000296			MWC :
 00000296  66| A1		     mov ax, pos
	   00000621 R
 0000029C  B3 4E		     mov bl, 78
 0000029E  F6 F3		     div bl         ; pos/78 - Resto fica em AH
 000002A0  80 FC 00		     cmp ah, 0
 000002A3  0F 84 FFFFFED3	     je WL1         ; se pos%78 = 0, então não é valido

 000002A9  66| A1		     mov ax, pos
	   00000621 R
 000002AF  66| 48		     dec ax
 000002B1  66| A3		     mov pos, ax    ; salva a nova posição
	   00000621 R

 000002B7  B3 20		     mov bl, ' '
 000002B9  38 1C 06		     cmp[esi + eax], bl
 000002BC  74 0A		     je NowriteW
 000002BE  66| FF 05		     inc emptyCells
	   0000061C R
 000002C5  88 1C 06		     mov[esi + eax], bl
 000002C8			NowriteW:  
 000002C8  E2 CC		     loop MWC
 000002CA  E9 FFFFFEAD		     jmp WL1



 000002CF			Fim:
				     ; -------- - Insere Personagem no mapa
 000002CF  66| A1		     mov ax, posHeroi
	   0000061A R
 000002D5  B3 41		     mov bl, 'A'
 000002D7  88 1C 06		     mov[esi + eax], bl

 000002DA  C3			     ret
 000002DB			GeraMapa ENDP

				; *=============================================================
				; main PROC
				; Objetivo: Função principal do jogo.
				; Usa:      Sem parâmetros
				; Retorna:  Sem retorno
				; =============================================================
 000002DB			main PROC
 000002DB  E8 00000000 E	     call Randomize      ; Randomiza a seed
 000002E0  E8 FFFFFD1B		     call LimpaTela
 000002E5  E8 FFFFFD61		     call Bordas
 000002EA  E8 FFFFFE36		     call ResetMapa      
 000002EF  E8 FFFFFE4A		     call GeraMapa
 000002F4  E8 FFFFFDBD		     call PrintMapa

 000002F9			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    06/30/18 01:02:34
MASMorra.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000624 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Bordas . . . . . . . . . . . . .	P Near	 0000004B _TEXT	Length= 0000006B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000005E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000006E _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GeraMapa . . . . . . . . . . . .	P Near	 0000013E _TEXT	Length= 0000019D Public STDCALL
  WL1  . . . . . . . . . . . . .	L Near	 0000017C _TEXT	
  MoveNorth  . . . . . . . . . .	L Near	 000001DF _TEXT	
  MNC  . . . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  NowriteN . . . . . . . . . . .	L Near	 0000020A _TEXT	
  MoveEast . . . . . . . . . . .	L Near	 00000211 _TEXT	
  MEC  . . . . . . . . . . . . .	L Near	 00000219 _TEXT	
  NowriteE . . . . . . . . . . .	L Near	 0000024D _TEXT	
  MoveSouth  . . . . . . . . . .	L Near	 00000254 _TEXT	
  MSC  . . . . . . . . . . . . .	L Near	 0000025C _TEXT	
  NowriteS . . . . . . . . . . .	L Near	 00000287 _TEXT	
  MoveWest . . . . . . . . . . .	L Near	 0000028E _TEXT	
  MWC  . . . . . . . . . . . . .	L Near	 00000296 _TEXT	
  NowriteW . . . . . . . . . . .	L Near	 000002C8 _TEXT	
  Fim  . . . . . . . . . . . . .	L Near	 000002CF _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LimpaTela  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004B Public STDCALL
  LLP1 . . . . . . . . . . . . .	L Near	 0000001A _TEXT	
  LLP2 . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMapa  . . . . . . . . . . .	P Near	 000000B6 _TEXT	Length= 0000006F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000D7 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000000E5 _TEXT	
  Default  . . . . . . . . . . .	L Near	 000000EC _TEXT	
  Hero . . . . . . . . . . . . .	L Near	 000000F3 _TEXT	
  DefLoop  . . . . . . . . . . .	L Near	 00000110 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetMapa  . . . . . . . . . . .	P Near	 00000125 _TEXT	Length= 00000019 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000131 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000002DB _TEXT	Length= 0000001E Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLS . . . . . . . . . . . . . .	Number	 00000050h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAPCOLS  . . . . . . . . . . . .	Number	 0000004Eh   
MAPROWS  . . . . . . . . . . . .	Number	 00000014h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Map  . . . . . . . . . . . . . .	Byte	 00000002 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ROWS . . . . . . . . . . . . . .	Number	 00000019h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction  . . . . . . . . . . .	Byte	 00000620 _DATA	
emptyCells . . . . . . . . . . .	Word	 0000061C _DATA	
emptyGoal  . . . . . . . . . . .	Word	 0000061E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
passos . . . . . . . . . . . . .	Byte	 00000623 _DATA	
posHeroi . . . . . . . . . . . .	Word	 0000061A _DATA	
pos  . . . . . . . . . . . . . .	Word	 00000621 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xMax . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yMax . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
